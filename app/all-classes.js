/*
Copyright(c) 2012 GaiaEHR
*/
/**
 * @class Ext.ux.LiveSearchGridPanel
 * @extends Ext.grid.Panel
 * <p>A GridPanel class with live search support.</p>
 * @author Nicolas Ferrero
 */
Ext.define('Ext.ux.LiveSearchGridPanel', {
    extend: 'Ext.grid.Panel',
    requires: [
        'Ext.toolbar.TextItem',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Text',
        'Ext.ux.statusbar.StatusBar'
    ],
    
    /**
     * @private
     * search value initialization
     */
    searchValue: null,
    
    /**
     * @private
     * The row indexes where matching strings are found. (used by previous and next buttons)
     */
    indexes: [],
    
    /**
     * @private
     * The row index of the first search, it could change if next or previous buttons are used.
     */
    currentIndex: null,
    
    /**
     * @private
     * The generated regular expression used for searching.
     */
    searchRegExp: null,
    
    /**
     * @private
     * Case sensitive mode.
     */
    caseSensitive: false,
    
    /**
     * @private
     * Regular expression mode.
     */
    regExpMode: false,
    
    /**
     * @cfg {String} matchCls
     * The matched string css classe.
     */
    matchCls: 'x-livesearch-match',
    
    defaultStatusText: i18n['nothing_found'],
    
    // Component initialization override: adds the top and bottom toolbars and setup headers renderer.
    initComponent: function() {
        var me = this;
        me.tbar = [i18n['search'],{
                 xtype: 'textfield',
                 name: 'searchField',
                 hideLabel: true,
                 width: 200,
                 listeners: {
                     change: {
                         fn: me.onTextFieldChange,
                         scope: this,
                         buffer: 100
                     }
                 }
            }, {
                xtype: 'button',
                text: '<',
                tooltip: i18n['find_previous_row'],
                handler: me.onPreviousClick,
                scope: me
            },{
                xtype: 'button',
                text: '>',
                tooltip: i18n['find_next_row'],
                handler: me.onNextClick,
                scope: me
            }, '-', {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.regExpToggle,
                scope: me                
            }, i18n['regular_expression'], {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.caseSensitiveToggle,
                scope: me
            }, i18n['case_sensitive']];

        me.bbar = Ext.create('Ext.ux.StatusBar', {
            defaultText: me.defaultStatusText,
            name: 'searchStatusBar'
        });
        
        me.callParent(arguments);
    },
    
    // afterRender override: it adds textfield and statusbar reference and start monitoring keydown events in textfield input 
    afterRender: function() {
        var me = this;
        me.callParent(arguments);
        me.textField = me.down('textfield[name=searchField]');
        me.statusBar = me.down('statusbar[name=searchStatusBar]');
    },
    // detects html tag
    tagsRe: /<[^>]*>/gm,
    
    // DEL ASCII code
    tagsProtect: '\x0f',
    
    // detects regexp reserved word
    regExpProtect: /\\|\/|\+|\\|\.|\[|\]|\{|\}|\?|\$|\*|\^|\|/gm,
    
    /**
     * In normal mode it returns the value with protected regexp characters.
     * In regular expression mode it returns the raw value except if the regexp is invalid.
     * @return {String} The value to process or null if the textfield value is blank or invalid.
     * @private
     */
    getSearchValue: function() {
        var me = this,
            value = me.textField.getValue();
            
        if (value === '') {
            return null;
        }
        if (!me.regExpMode) {
            value = value.replace(me.regExpProtect, function(m) {
                return '\\' + m;
            });
        } else {
            try {
                new RegExp(value);
            } catch (error) {
                me.statusBar.setStatus({
                    text: error.message,
                    iconCls: 'x-status-error'
                });
                return null;
            }
            // this is stupid
            if (value === '^' || value === '$') {
                return null;
            }
        }

        return value;
    },
    
    /**
     * Finds all strings that matches the searched value in each grid cells.
     * @private
     */
     onTextFieldChange: function() {
         var me = this,
             count = 0;

         me.view.refresh();
         // reset the statusbar
         me.statusBar.setStatus({
             text: me.defaultStatusText,
             iconCls: ''
         });

         me.searchValue = me.getSearchValue();
         me.indexes = [];
         me.currentIndex = null;

         if (me.searchValue !== null) {
             me.searchRegExp = new RegExp(me.searchValue, 'g' + (me.caseSensitive ? '' : 'i'));
             
             
             me.store.each(function(record, idx) {
                 var td = Ext.fly(me.view.getNode(idx)).down('td'),
                     cell, matches, cellHTML;
                 while(td) {
                     cell = td.down('.x-grid-cell-inner');
                     matches = cell.dom.innerHTML.match(me.tagsRe);
                     cellHTML = cell.dom.innerHTML.replace(me.tagsRe, me.tagsProtect);
                     
                     // populate indexes array, set currentIndex, and replace wrap matched string in a span
                     cellHTML = cellHTML.replace(me.searchRegExp, function(m) {
                        count += 1;
                        if (Ext.Array.indexOf(me.indexes, idx) === -1) {
                            me.indexes.push(idx);
                        }
                        if (me.currentIndex === null) {
                            me.currentIndex = idx;
                        }
                        return '<span class="' + me.matchCls + '">' + m + '</span>';
                     });
                     // restore protected tags
                     Ext.each(matches, function(match) {
                        cellHTML = cellHTML.replace(me.tagsProtect, match); 
                     });
                     // update cell html
                     cell.dom.innerHTML = cellHTML;
                     td = td.next();
                 }
             }, me);

             // results found
             if (me.currentIndex !== null) {
                 me.getSelectionModel().select(me.currentIndex);
                 me.statusBar.setStatus({
                     text: count + ' ' + i18n['matches_found'],
                     iconCls: 'x-status-valid'
                 });
             }
         }

         // no results found
         if (me.currentIndex === null) {
             me.getSelectionModel().deselectAll();
         }

         // force textfield focus
         me.textField.focus();
     },
    
    /**
     * Selects the previous row containing a match.
     * @private
     */   
    onPreviousClick: function() {
        var me = this,
            idx;
            
        if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx - 1] || me.indexes[me.indexes.length - 1];
            me.getSelectionModel().select(me.currentIndex);
         }
    },
    
    /**
     * Selects the next row containing a match.
     * @private
     */    
    onNextClick: function() {
         var me = this,
             idx;
             
         if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx + 1] || me.indexes[0];
            me.getSelectionModel().select(me.currentIndex);
         }
    },
    
    /**
     * Switch to case sensitive mode.
     * @private
     */    
    caseSensitiveToggle: function(checkbox, checked) {
        this.caseSensitive = checked;
        this.onTextFieldChange();
    },
    
    /**
     * Switch to regular expression mode
     * @private
     */
    regExpToggle: function(checkbox, checked) {
        this.regExpMode = checked;
        this.onTextFieldChange();
    }
});
/**
* @class Ext.ux.SlidingPager
* @extends Object
* Plugin for PagingToolbar which replaces the textfield input with a slider
* @constructor
* Create a new ItemSelector
* @param {Object} config Configuration options
*/
Ext.define('Ext.ux.SlidingPager', {
    extend: 'Object',
    requires: [
        'Ext.slider.Single',
        'Ext.slider.Tip'
    ],

    constructor : function(config) {
        if (config) {
            Ext.apply(this, config);
        }
    },

    init : function(pbar){
        var idx = pbar.items.indexOf(pbar.child("#inputItem")),
            slider;

        Ext.each(pbar.items.getRange(idx - 2, idx + 2), function(c){
            c.hide();
        });

        slider = Ext.create('Ext.slider.Single', {
            width: 114,
            minValue: 1,
            maxValue: 1,
            hideLabel: true,
            tipText: function(thumb) {
                return Ext.String.format(i18n['page'] + ' <b>{0}</b> ' + i18n['of'] + ' <b>{1}</b>', thumb.value, thumb.slider.maxValue);
            },
            listeners: {
                changecomplete: function(s, v){
                    pbar.store.loadPage(v);
                }
            }
        });

        pbar.insert(idx + 1, slider);

        pbar.on({
            change: function(pb, data){
                if(data){
                slider.setMaxValue(data.pageCount);
                slider.setValue(data.currentPage);

                }
            }
        });
    }
});

/**
 * @class Ext.ux.PreviewPlugin
 * @extends Ext.AbstractPlugin
 *
 * The Preview enables you to show a configurable preview of a record.
 *
 * This plugin assumes that it has control over the features used for this
 * particular grid section and may conflict with other plugins.
 *
 * @alias plugin.preview
 * @ptype preview
 */
Ext.define('Ext.ux.PreviewPlugin', {
	extend     : 'Ext.AbstractPlugin',
	alias      : 'plugin.preview',
	requires   : ['Ext.grid.feature.RowBody', 'Ext.grid.feature.RowWrap'],

	// private, css class to use to hide the body
	hideBodyCls: 'x-grid-row-body-hidden',

	/**
	 * @cfg {String} bodyField
	 * Field to display in the preview. Must me a field within the Model definition
	 * that the store is using.
	 */
	bodyField: '',

	/**
	 * @cfg {Boolean} previewExpanded
	 */
	previewExpanded: true,

	constructor: function(config) {
		this.callParent(arguments);
		var bodyField = this.bodyField,
			hideBodyCls = this.hideBodyCls,
			section = this.getCmp(),
			features = [
				{
					ftype            : 'rowbody',
					getAdditionalData: function(data, idx, record, orig, view) {
						var o = Ext.grid.feature.RowBody.prototype.getAdditionalData.apply(this, arguments);
						Ext.apply(o, {
							rowBody   : data[bodyField],
							rowBodyCls: section.previewExpanded ? '' : hideBodyCls
						}, null);
						return o;
					}
				},
				{
					ftype: 'rowwrap'
				}
			];

		section.previewExpanded = this.previewExpanded;
		if(!section.features) {
			section.features = [];
		}
		section.features = features.concat(section.features);
	},

	/**
	 * Toggle between the preview being expanded/hidden
	 * @param {Boolean} expanded Pass true to expand the record and false to not show the preview.
	 */
	toggleExpanded: function(expanded) {
		var view = this.getCmp();
		this.previewExpanded = view.previewExpanded = expanded;
		view.refresh();
	},

	/**
	 * Expand Selected row and collapse all others
	 * @param index
	 */
	toggleRowExpanded: function() {
		var hideBodyCls = this.hideBodyCls,
			view = this.getCmp(),
			rowIndex = view.getStore().indexOf(view.getSelectionModel().getLastSelected()),
			rows = view.getNodes(),
			row = view.getNode(rowIndex);

		if(!view.previewExpanded) {
			Ext.each(rows, function(row) {
				Ext.get(Ext.get(row).query('.x-grid-rowbody-tr')).addCls(hideBodyCls);
			});
			Ext.get(Ext.get(row).query('.x-grid-rowbody-tr')).removeCls(hideBodyCls);
            view.up('grid').doLayout();
		}
	}

});
/**
 * Render panel
 *
 * @namespace FormLayoutEngine.getFields
 */
Ext.define('App.classes.RenderPanel', {
	extend       : 'Ext.container.Container',
	alias        : 'widget.renderpanel',
	cls          : 'RenderPanel',
	layout       : 'border',
	frame        : false,
	border       : false,
	pageLayout   : 'fit',
	pageBody     : [],
	pageTitle    : '',
	initComponent: function() {
		var me = this;
		Ext.apply(me, {
			items: [
				{
					cls   : 'RenderPanel-header',
					itemId: 'RenderPanel-header',
					xtype : 'container',
					region: 'north',
					layout: 'fit',
					height: 33,
					html  : '<div class="panel_title">' + me.pageTitle + '</div>'

				},
				{
					cls    : 'RenderPanel-body-container',
                    itemId : 'RenderPanel-body-container',
					xtype  : 'container',
					region : 'center',
					layout : 'fit',
					padding: 5,
					items  : [
						{
							cls     : 'RenderPanel-body',
							xtype   : 'panel',
							frame   : true,
							layout  : this.pageLayout,
							border  : false,
                            itemId  : 'pageLayout',
							defaults: {frame: false, border: false, autoScroll: true},
							items   : me.pageBody
						}
					]
				}
			]
		}, this);
		me.callParent(arguments);
	},

	updateTitle: function(pageTitle, readOnly, timer) {
		
		var readOnlyDiv = '<div class="readOnly">' + i18n['read_only'] + '</div>',
			timerDiv = '<span class="timer">' + timer + '</span>';
		this.getComponent('RenderPanel-header').update('<div class="panel_title">' + pageTitle + '</div>' + (readOnly ? readOnlyDiv : '') + (timer ?  timerDiv : ''));
	},

	setReadOnly:function(readOnly){
		var forms = this.query('form');

		for(var j = 0; j < forms.length; j++) {
			var form = forms[j], items;
			if(form.readOnly != readOnly){
				form.readOnly = readOnly;
				items = form.getForm().getFields().items;
				for(var k = 0; k < items.length; k++){
					items[k].setReadOnly(readOnly);
				}
			}
		}
		return readOnly;
	},

	setButtonsDisabled:function(buttons, disabled){
		var disable = disabled || app.patient.readOnly;
		for(var i = 0; i < buttons.length; i++) {
			var btn = buttons[i];
			if(btn.disabled != disable){
				btn.disabled = disable;
				btn.setDisabled(disable)
			}
		}
	},

	goBack: function() {
		app.goBack();
	},

	checkIfCurrPatient: function() {
		return app.getCurrPatient();
	},

	patientInfoAlert: function() {
		var patient = app.getCurrPatient();

		Ext.Msg.alert(i18n['status'], i18n['patient'] + ': ' + patient.name + ' (' + patient.pid + ')');
	},

	currPatientError: function() {
		Ext.Msg.show({
			title  : 'Oops! ' + i18n['no_patient_selected'],
			msg    : i18n['select_patient_patient_live_search'],
			scope  : this,
			buttons: Ext.Msg.OK,
			icon   : Ext.Msg.ERROR,
			fn     : function() {
				this.goBack();
			}
		});
	},

	getFormItems: function(formPanel, formToRender, callback) {
        if(formPanel){
            formPanel.removeAll();
            FormLayoutEngine.getFields({formToRender: formToRender}, function(provider, response) {
                var items = eval(response.result);
                  formPanel.add(items);
                if(typeof callback == 'function') {
                    callback(formPanel, items, true);
                }
            });
        }
	},

	boolRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		}
		return val;
	},

	alertRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		}
		return val;
	},

    warnRenderer:function(val, metaData, record){
	    var toolTip = record.data.warningMsg ? record.data.warningMsg : '';
        if(val == '1' || val == true || val == 'true') {
            return '<img src="resources/images/icons/icoImportant.png" ' + toolTip + ' />';
        }
        return '';
    },

	onExpandRemoveMask: function(cmb) {
		cmb.picker.loadMask.destroy()
	},

	strToLowerUnderscores: function(str) {
		return str.toLowerCase().replace(/ /gi, "_");
	},

	getCurrPatient: function() {
		return app.getCurrPatient();
	},

	getApp: function() {
		return app.getApp();
	},

	msg: function(title, format) {
		app.msg(title, format)
	},

	alert:function(msg, icon) {
		app.alert(msg,icon)
	},

    passwordVerificationWin:function(callback){
        var msg = Ext.Msg.prompt(i18n['password_verification'], i18n['please_enter_your_password'] + ':', function(btn, password) {
            callback(btn, password);
        });
        var f = msg.textField.getInputId();
        document.getElementById(f).type = 'password';
        return msg;
    },
    getPageHeader:function(){
        return this.getComponent('RenderPanel-header');
    },
    getPageBodyContainer:function(){
        return this.getComponent('RenderPanel-body-container');
    },
    getPageBody:function(){
        return this.getPageBodyContainer().down('panel');
    }

});

/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.ActiveProblems', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'code_text' },
		{name: 'code' }
	]

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.DefaultDocuments', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type:'int' },
        {name: 'title', type:'string' },
		{name: 'body', type:'string' },
		{name: 'template_type', type:'string' },
		{name: 'date', type:'date', dateFormat:'Y-m-d H:i:s' }

	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.DocumentsTemplates', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type:'int' },
        {name: 'title', type:'string' },
		{name: 'body', type:'string' },
		{name: 'template_type', type:'string' },
		{name: 'date', type:'date', dateFormat:'Y-m-d H:i:s' }

	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.ExternalDataLoads', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'date' },
        {name: 'version' },
		{name: 'path' },
		{name: 'basename' },
		{name: 'codeType' }
	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.FloorPlans', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'title', type: 'string'}
	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.FloorPlanZones', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'floor_plan_id', type: 'int'},
		{name: 'title', type: 'string'},
		{name: 'type', type: 'string'},
		{name: 'x', type: 'int'},
		{name: 'y', type: 'int'},
		{name: 'active', type: 'bool'}
	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.HeadersAndFooters', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type:'int' },
        {name: 'title', type:'string' },
        {name: 'template_type', type:'string' },
		{name: 'body', type:'string' },
		{name: 'date', type:'date', dateFormat:'Y-m-d H:i:s' }

	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.ImmunizationRelations', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'immunization_id', type: 'int'},
		{name: 'foreign_id', type: 'int'},
		{name: 'code' },
		{name: 'code_text', type: 'string' },
		{name: 'code_type' }

	],
    proxy: {
    		type       : 'direct',
    		api        : {
    			read  : PreventiveCare.getRelations,
    			create: PreventiveCare.addRelations,
    			destroy: PreventiveCare.removeRelations
    		}


    	}


});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.LabObservations', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id' },
        {name: 'code_text_short' },
		{name: 'parent_id' },
		{name: 'parent_loinc' },
		{name: 'parent_name' },
		{name: 'sequence' },
		{name: 'loinc_number' },
		{name: 'loinc_name' },
		{name: 'default_unit' },
		{name: 'range_start' },
		{name: 'range_end' },
		{name: 'required_in_panel' },
		{name: 'description' },
		{name: 'active', type:'bool' }
	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.Medications', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'PRODUCTNDC' },
		{name: 'PROPRIETARYNAME' },
		{name: 'NONPROPRIETARYNAME' },
		{name: 'DOSAGEFORMNAME' },
		{name: 'ROUTENAME' },
		{name: 'ACTIVE_NUMERATOR_STRENGTH' },
		{name: 'ACTIVE_INGRED_UNIT' }
	],
    proxy: {
    		type       : 'direct',
    		api        : {
    			read  : Medications.getMedications,
    			create: Medications.addMedications,
    			destroy: Medications.removeMedications,
			    update: Medications.updateMedications
    		},
    		reader     : {
    			totalProperty: 'totals',
    			root         : 'rows'
    		}

    	}


});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.PreventiveCare', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'preventive_care_id', type: 'int'},
		{name: 'uid', type: 'int'},
		{name: 'description', type: 'string'},
		{name: 'age_start', type: 'string'},
		{name: 'age_end', type: 'string'},
		{name: 'sex', type: 'string'},
		{name: 'pregnant', type: 'bool'},
		{name: 'frequency', type: 'string'},
		{name: 'category_id', type: 'string'},
		{name: 'code', type: 'string'},
		{name: 'coding_system', type: 'string'},
		{name: 'dismiss', type: 'bool'},
		{name: 'frequency_type', type: 'string'},
		{name: 'reason', type: 'string'},
		{name: 'times_to_perform', type: 'string'},
		{name: 'doc_url1', type: 'string'},
		{name: 'doc_url2', type: 'string'},
		{name: 'doc_url3', type: 'string'},
		{name: 'active', type:'bool'}
	]

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.PreventiveCareActiveProblems', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'guideline_id', type: 'int'},
		{name: 'code', type: 'string'},
		{name: 'code_text', type: 'string'}
	]

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.PreventiveCareMedications', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'guideline_id', type: 'int'},
		{name: 'code', type: 'string'},
		{name: 'code_text', type: 'string'}
	]

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.PreventiveCareLabs', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'value_name', type: 'string'},
		{name: 'greater_than', type: 'string'},
		{name: 'less_than', type: 'string'},
		{name: 'equal_to', type: 'string'},
		{name: 'code', type: 'string'},
		{name: 'preventive_care_id', type: 'string'}
	]

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.model.administration.Services', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'code_text', type: 'string'},
		{name: 'sg_code', type: 'string'},
		{name: 'long_desc', type: 'string'},
		{name: 'code_text_short', type: 'string'},
		{name: 'code', type: 'string'},
		{name: 'code_type', type: 'string'},
		{name: 'modifier', type: 'string'},
		{name: 'units', type: 'string'},
		{name: 'fee', type: 'int'},
		{name: 'superbill', type: 'string'},
		{name: 'related_code', type: 'string'},
		{name: 'taxrates', type: 'string'},
		{name: 'active', type: 'bool'},
		{name: 'reportable', type: 'string'},
        ////////////////////////////////////
		{name: 'sex', type: 'string'},
		{name: 'age_start', type: 'int'},
		{name: 'age_end', type: 'int'},
		{name: 'times_to_perform', type: 'int'},
		{name: 'frequency_number', type: 'int'},
		{name: 'frequency_time', type: 'string'},
		{name: 'pregnant', type: 'bool'},
		{name: 'only_once', type: 'bool'},
		{name: 'active_problems', type: 'string'},
		{name: 'medications', type: 'string'},
		{name: 'labs', type: 'string'}
	]

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.miscellaneous.OfficeNotes', {
	extend: 'Ext.data.Model',
    fields: [
        {name: 'id', type: 'int'},
        {name: 'date', type: 'date', dateFormat: 'c'},
        {name: 'body', type: 'string'},
        {name: 'user', type: 'string'},
        {name: 'facility_id', type: 'string'},
        {name: 'activity', type: 'string'}
    ],
    proxy : {
        type: 'direct',
        api : {
            read  : OfficeNotes.getOfficeNotes,
            create: OfficeNotes.addOfficeNotes,
            update: OfficeNotes.updateOfficeNotes
        }
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.fees.Billing', {
    extend: 'Ext.data.Model',
    fields: [
        {name: 'eid', type: 'int '},
        {name: 'pid', type: 'int'},
        {name: 'patientName', type: 'string'},
        {name: 'primaryProvider', type: 'string'},
        {name: 'encounterProvider', type: 'string'},
        {name: 'supervisorProvider', type: 'string'},
        {name: 'facility', type: 'string'},
        {name: 'billing_facility', type: 'string'},
        {name: 'start_date', type: 'string'},
        {name: 'close_date', type: 'string'},
        {name: 'billing_stage', type: 'int'},
        {name: 'icdxCodes', type: 'auto'}
    ],
    proxy : {
        type: 'direct',
        api : {
            read  : Fees.getFilterEncountersBillingData
        },
        reader     : {
            root: 'encounters',
            totalProperty: 'totals'
        }
    }

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.fees.Checkout', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'id', type: 'int'},
        {name: 'time', type: 'string'},
        {name: 'follow_up_facility', type: 'string'},
        {name: 'note', type: 'string'},
        {name: 'reminder', type: 'string'},
        {name: 'patient_name', type: 'string'},
        {name: 'encounter_number', type: 'int'},
        {name: 'transaction_facility', type: 'string'},
        {name: 'transaction_number', type: 'int'},
        {name: 'transaction_date', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'payment_amount', type: 'string'},
        {name: 'paying_entity', type: 'string'},
        {name: 'post_to_date', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'check_number', type: 'int'}
	],
	proxy : {
		type: 'direct',
        api : {
            read  : Fees.getPaymentsBySearch
        },
        reader: {
            root         : 'rows',
            totalProperty: 'totals'
        }
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 *
 * @namespace Fees.EncountersPayment
 *
 */

Ext.define('App.model.fees.EncountersPayments', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'id', type: 'int'},
        {name: 'paying_entity', type: 'string'},
        {name: 'payment_from', type: 'string'},
        {name: 'no', type: 'int'},
        {name: 'payment_method', type: 'string'},
        {name: 'pay_to', type: 'string'},
        {name: 'amount', type: 'string'},
        {name: 'date_from', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'date_to', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'note', type: 'string'}
	],
    proxy : {
        type: 'direct',
        api : {
            read :Fees.getPaymentsBySearch
        },
        reader: {
            root         : 'rows',
            totalProperty: 'totals'
        }
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.fees.PaymentTransactions', {
	extend: 'Ext.data.Model',
	fields: [

	],
	proxy : {
		type: 'direct',
        api : {
            read  : Fees.getPaymentsBySearch
        },
        reader: {
            root         : 'rows',
            totalProperty: 'totals'
        }
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/19/12
 * Time: 1:01 PM
 */
Ext.define('App.model.navigation.Navigation', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'text', type: 'string'},
		{name: 'disabled', type: 'bool', defaultValue: false}
	],
	proxy    : {
		type: 'direct',
		api : {
			read: Navigation.getNavigation
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Allergies', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'created_uid', type: 'int'},
		{name: 'updated_uid', type: 'int'},
		{name: 'create_date', type: 'date', dateFormat: 'c'},
		{name: 'allergy_type', type: 'string'},
		{name: 'allergy', type: 'string'},
		{name: 'allergy_id', type: 'int'},
		{name: 'begin_date', type: 'date', dateFormat: 'c'},
		{name: 'end_date', type: 'date', dateFormat: 'c'},
		{name: 'reaction', type: 'string'},
		{name: 'location', type: 'string'},
		{name: 'severity', type: 'string'},
        {name: 'alert', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Medical.getPatientAllergies,
			create: Medical.addPatientAllergies,
			update: Medical.updatePatientAllergies
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.CheckoutAlertArea', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'alert', type: 'string'},
        {name: 'alertType', type: 'int'}

	],
	proxy : {
		type: 'direct',
		api : {
			read: Encounter.checkoutAlerts
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.CptCodes', {
    extend: 'Ext.data.Model',
    fields: [
        {name: 'id', type:'int'},
        {name: 'eid', type:'int'},
        {name: 'code', type: 'string'},
        {name: 'code_text', type: 'string'},
        {name: 'code_text_medium', type: 'string'},
        {name: 'place_of_service', type: 'string'},
        {name: 'emergency', type: 'bool'},
        {name: 'charge', type: 'string'},
        {name: 'days_of_units', type: 'string'},
        {name: 'essdt_plan', type: 'string'},
        {name: 'modifiers', type: 'string'},
        {name: 'status', type: 'int', defaultValue: 0}
    ],
    proxy : {
        type  : 'direct',
        api   : {
            read: Services.getCptCodes,
            create: Services.addCptCode,
            update: Services.updateCptCode,
            destroy: Services.deleteCptCode
        },
        reader: {
            root         : 'rows',
            totalProperty: 'totals'
        }
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Dental', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'created_uid', type: 'int'},
		{name: 'updated_uid', type: 'int'},
		{name: 'create_date', type: 'date', dateFormat: 'c'},
		{name: 'title', type: 'string'},
		{name: 'diagnosis_code', type: 'string'},
		{name: 'begin_date', type: 'date', dateFormat: 'c'},
		{name: 'end_date', type: 'date', dateFormat: 'c'},
		{name: 'ocurrence', type: 'string'},
		{name: 'referred_by', type: 'string'},
		{name: 'outcome', type: 'string'},
		{name: 'destination', type: 'string'},
        {name: 'alert', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Medical.getPatientDental,
			create: Medical.addPatientDental,
			update: Medical.updatePatientDental
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Disclosures', {
	extend: 'Ext.data.Model',
	fields: [

        {name: 'id', type: 'int'},
        {name: 'eid', type: 'int'},
        {name: 'pid', type: 'int'},
        {name: 'uid', type: 'int'},
        {name: 'date', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'type', type: 'string'},
        {name: 'recipient', type: 'string'},
        {name: 'description', type: 'string'},
        {name: 'active', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Patient.getPatientDisclosures,
			create  : Patient.createPatientDisclosure,
			update  : Patient.updatePatientDisclosure
		}
	}
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.Encounter', {
	extend : 'Ext.data.Model',
	fields : [
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'open_uid', type: 'string'},
		{name: 'close_uid', type: 'string'},
		{name: 'brief_description', type: 'string'},
		{name: 'visit_category', type: 'string'},
		{name: 'facility', type: 'string'},
		{name: 'billing_facility', type: 'string'},
		{name: 'priority', type: 'string'},
		{name: 'start_date', type: 'date', dateFormat:'Y-m-d H:i:s'},
		{name: 'close_date', type: 'date', dateFormat:'Y-m-d H:i:s'},
		{name: 'onset_date', type: 'date', dateFormat:'Y-m-d H:i:s'}
	],
	proxy  : {
		type       : 'direct',
		api        : {
			read: Encounter.getEncounter,
			create: Encounter.createEncounter,
			update: Encounter.updateEncounter
		},
		reader     : {
			type: 'json',
			root: 'encounter'
		}
	},
    hasMany: [
        {model: 'App.model.patient.Vitals', name: 'vitals', primaryKey: 'eid'},
        {model: 'App.model.patient.ReviewOfSystems', name: 'reviewofsystems', primaryKey: 'eid'},
        {model: 'App.model.patient.ReviewOfSystemsCheck', name: 'reviewofsystemschecks', primaryKey: 'eid'},
        {model: 'App.model.patient.SOAP', name: 'soap', primaryKey: 'eid'},
        {model: 'App.model.patient.SpeechDictation', name: 'speechdictation', primaryKey: 'eid'}
    ]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.EncounterCPTsICDs', {
	extend : 'Ext.data.Model',
	fields : [
		{name: 'code'},
		{name: 'code_text'},
		{name: 'type'},
		{name: 'code_text_short'}
	],
	proxy  : {
		type       : 'direct',
		api        : {
			read: Encounter.getEncounterCodes
		},
		reader     : {
			type: 'json',
			root: 'encounter'
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.Encounters', {
	extend : 'Ext.data.Model',
	fields : [
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'open_uid', type: 'string'},
		{name: 'close_uid', type: 'string'},
		{name: 'brief_description', type: 'string'},
		{name: 'visit_category', type: 'string'},
		{name: 'facility', type: 'string'},
		{name: 'billing_facility', type: 'string'},
		{name: 'sensitivity', type: 'string'},
		{name: 'start_date', type: 'date', dateFormat:'Y-m-d H:i:s'},
		{name: 'close_date', type: 'date', dateFormat:'Y-m-d H:i:s'},
		{name: 'onset_date', type: 'date', dateFormat:'Y-m-d H:i:s'}
	],
	proxy  : {
		type       : 'direct',
		api        : {
			read: Encounter.getEncounters
		},
		reader     : {
			type: 'json',
			root: 'encounter'
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.EventHistory', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'date', type: 'date', dateFormat: 'Y-m-d H:i:s'},
		{name: 'user', type: 'string'},
		{name: 'event', type: 'string'}
	]
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.Immunization', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'id', type: 'int'},
        {name: 'code', type: 'int'},
		{name: 'code_text', type: 'string'}

	],
	proxy : {
		type: 'direct',
		api : {
			read: Medical.getImmunizationsList
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.ImmunizationCheck', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'id', type: 'int'},
        {name: 'pid', type: 'int'},
        {name: 'immunization_id', type: 'int'},
		{name: 'immunization_name', type: 'string'},
		{name: 'alert', type: 'bool'}

	],
	proxy : {
		type: 'direct',
		api : {
			read: Medical.getPatientImmunizations
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.LaboratoryTypes', {
	extend: 'Ext.data.Model',
	fields: [

		{name: 'id', type: 'int'},
		{name: 'label', type: 'string'},
		{name: 'fields' }

	],
	proxy : {
		type: 'direct',
		api : {
			read  : Laboratories.getActiveLaboratoryTypes
		}
	}
});


 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.MeaningfulUseAlert', {
	extend: 'Ext.data.Model',
	fields: [

		{name: 'name', type: 'string'},
		{name: 'val', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Patient.getMeaningfulUserAlertByPid
		}
	}
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.MedicalIssues', {
	extend: 'Ext.data.Model',
	fields: [

		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'created_uid', type: 'int'},
		{name: 'updated_uid', type: 'int'},
		{name: 'create_date', type: 'date', dateFormat: 'c'},
		{name: 'code', type: 'string'},
		{name: 'code_text', type: 'string'},
		{name: 'begin_date', type: 'date', dateFormat: 'c'},
		{name: 'end_date', type: 'date', dateFormat: 'c'},
		{name: 'ocurrence', type: 'string'},
		{name: 'referred_by', type: 'string'},
		{name: 'outcome', type: 'string'},
        {name: 'alert', type: 'bool'}

	],
	proxy : {
		type: 'direct',
		api : {
			read  : Medical.getMedicalIssues,
			create: Medical.addMedicalIssues,
			update: Medical.updateMedicalIssues
		}
	}
});


 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Medications', {
	extend: 'Ext.data.Model',
	fields: [

		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'created_uid', type: 'int'},
		{name: 'updated_uid', type: 'int'},
		{name: 'create_date', type: 'date', dateFormat: 'c'},
		{name: 'medication', type: 'string'},
		{name: 'medication_id', type: 'string'},
		{name: 'begin_date', type: 'date', dateFormat: 'c'},
		{name: 'end_date', type: 'date', dateFormat: 'c'},
		{name: 'ocurrence', type: 'string'},
		{name: 'referred_by', type: 'string'},
		{name: 'outcome', type: 'string'},
        {name: 'alert', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Medical.getPatientMedications,
			create: Medical.addPatientMedications,
			update: Medical.updatePatientMedications
		}
	}
});


 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Notes', {
	extend: 'Ext.data.Model',
	fields: [

        {name: 'id', type: 'int'},
        {name: 'eid', type: 'int'},
        {name: 'pid', type: 'int'},
        {name: 'uid', type: 'int'},
        {name: 'date', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'body', type: 'string'},
        {name: 'type', type: 'string'},
        {name: 'user_name', type: 'string'}
	],
	proxy : {
		type: 'direct',
		api : {
			read    : Patient.getPatientNotes,
            create  : Patient.addPatientNotes,
            update  : Patient.updatePatientNotes
		}
	}
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PatientArrivalLog', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'id', type: 'int'},
        {name: 'area_id', type: 'int'},
        {name: 'pid', type: 'int'},
		{name: 'time', type: 'string'},
		{name: 'name', type: 'string'},
		{name: 'status', type: 'string'},
		{name: 'area', type: 'string'},
		{name: 'warning', type: 'bool'},
		{name: 'warningMsg', type: 'string'},
		{name: 'isNew', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read: PoolArea.getPatientsArrivalLog,
			create: PoolArea.addPatientArrivalLog,
			update: PoolArea.updatePatientArrivalLog,
			destroy: PoolArea.removePatientArrivalLog
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PatientCalendarEvents', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'id', type: 'int'},
		{name: 'user_id', type: 'int'},
		{name: 'category', type: 'int'},
		{name: 'facility', type: 'int'},
		{name: 'billing_facillity', type: 'int'},
		{name: 'patient_id', type: 'int'},
		{name: 'title', type: 'string'},
		{name: 'status', type: 'string'},
		{name: 'start', type: 'date', dateFormat:'Y-m-d H:s:i'},
		{name: 'end', type: 'date', dateFormat:'Y-m-d H:s:i'},
		{name: 'data', type: 'string'},
		{name: 'rrule', type: 'string'},
		{name: 'loc', type: 'string'},
		{name: 'notes', type: 'string'},
		{name: 'url', type: 'string'},
		{name: 'ad', type: 'string'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: Calendar.getPatientFutureEvents
		},
		reader     : {
			type: 'json'
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.PatientDocuments', {
	extend: 'Ext.data.Model',
	fields: [

        {name: 'id', type: 'int'},
        {name: 'pid', type: 'int'},
        {name: 'eid', type: 'int'},
        {name: 'uid', type: 'int'},
        {name: 'docType', type: 'string'},
        {name: 'name', type: 'string'},
        {name: 'date', type: 'date', dateFormat: 'c'},
        {name: 'url', type: 'string'},
        {name: 'note', type: 'string'},
        {name: 'title', type: 'string'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Patient.getPatientDocuments,
            update: Documents.updateDocumentsTitle
		}
	}
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PatientImmunization', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'created_uid', type: 'int'},
		{name: 'updated_uid', type: 'int'},
		{name: 'immunization_name', type: 'string'},
		{name: 'immunization_id', type: 'int'},
		{name: 'administered_date', type: 'date', dateFormat: 'c'},
		{name: 'manufacturer', type: 'string'},
		{name: 'lot_number', type: 'string'},
		{name: 'administered_by', type: 'string'},
		{name: 'education_date', type: 'date', dateFormat: 'c'},
		{name: 'dosis'},
		{name: 'create_date', type: 'date', dateFormat: 'c'},
		{name: 'note', type: 'string'},
        {name: 'alert', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Medical.getPatientImmunizations,
			create: Medical.addPatientImmunization,
			update: Medical.updatePatientImmunization
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PatientLabsResults', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'id', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'uid', type: 'int'},
		{name: 'auth_uid', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'document_id', type: 'int'},
		{name: 'document_url'},
		{name: 'date', type: 'date', dateFormat:'Y-m-d H:s:i'},
		{name: 'data'},
		{name: 'columns'},
		{name: 'parent_id'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: Medical.getPatientLabsResults,
			create: Medical.addPatientLabsResult,
			update: Medical.updatePatientLabsResult,
			destroy: Medical.deletePatientLabsResult
		},
		reader     : {
			type: 'json'
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PatientsLabsOrders', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'laboratories', type: 'string'}

	],
	proxy : {
		type: 'direct',
		api : {
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PatientsPrescription', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'medication', type: 'string'},
        {name: 'medication_id', type: 'string'},
        {name: 'dose', type: 'int'},
		{name: 'dose_mg', type: 'string'},
		{name: 'take_pills', type: 'int'},
		{name: 'type', type: 'string'},
		{name: 'route', type: 'string'},
		{name: 'prescription_often', type: 'string'},
		{name: 'prescription_when', type: 'string'},
		{name: 'dispense', type: 'string'},
		{name: 'refill', type: 'string'},
		{name: 'begin_date'},
		{name: 'end_date'}

	],
	proxy : {
		type: 'direct',
		api : {
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.PreventiveCare', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'uid', type: 'int'},
		{name: 'description'},
		{name: 'date', dateFormat: 'Y-m-d'},
		{name: 'observation'},
		{name: 'type'},
		{name: 'dismiss'},
		{name: 'reason'},
		{name: 'alert', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			update: PreventiveCare.addPreventivePatientDismiss,
			read  : PreventiveCare.getPreventiveCareCheck
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.QRCptCodes', {
    extend: 'Ext.data.Model',
    fields: [
        {name: 'id', type:'int'},
        {name: 'eid', type:'int'},
        {name: 'code', type: 'string'},
        {name: 'code_text', type: 'string'},
        {name: 'code_text_medium', type: 'string'},
        {name: 'place_of_service', type: 'string'},
        {name: 'emergency', type: 'bool'},
        {name: 'charge', type: 'string'},
        {name: 'days_of_units', type: 'string'},
        {name: 'essdt_plan', type: 'string'},
        {name: 'modifiers', type: 'string'},
        {name: 'status', type: 'int', defaultValue: 0}
    ],
    proxy : {
        type  : 'direct',
        api   : {
            read: Services.getCptCodes
        },
        reader: {
            root         : 'rows',
            totalProperty: 'totals'
        }
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.DismissedAlerts', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'date', type: 'date', dateFormat: 'c'},
		{name: 'preventive_care_id', type: 'int'},
		{name: 'reason', type: 'string'},
		{name: 'observation', type: 'string'},
		{name: 'dismiss', type: 'bool'},
		{name: 'description', type: 'string'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : PreventiveCare.getPreventiveCareDismissedAlertsByPid,
			update: PreventiveCare.updatePreventiveCareDismissedAlertsByPid
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Omar U. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Reminders', {
	extend: 'Ext.data.Model',
	fields: [

		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'uid', type: 'int'},
		{name: 'date', type: 'date', dateFormat:'Y-m-d H:i:s'},
		{name: 'body', type: 'string'},
		{name: 'type', type: 'string'},
        {name: 'user_name', type: 'string'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Patient.getPatientReminders,
            create: Patient.addPatientReminders,
            update: Patient.updatePatientReminders
		}
	}
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */

Ext.define('App.model.patient.Surgery', {
	extend: 'Ext.data.Model',
	fields: [
		{name: 'id', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'created_uid', type: 'int'},
		{name: 'updated_uid', type: 'int'},
		{name: 'create_date', type: 'date', dateFormat: 'c'},
		{name: 'surgery', type: 'string'},
		{name: 'surgery_id', type: 'string'},
		{name: 'date', type: 'date', dateFormat: 'c'},
		{name: 'referred_by', type: 'string'},
		{name: 'outcome', type: 'string'},
		{name: 'notes', type: 'string'},
        {name: 'alert', type: 'bool'}
	],
	proxy : {
		type: 'direct',
		api : {
			read  : Medical.getPatientSurgery,
			create: Medical.addPatientSurgery,
			update: Medical.updatePatientSurgery
		}
	}
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.VectorGraph', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age_mos', type: 'float'},
		{name: 'height', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P85', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		}
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 4/13/12
 * Time: 10:37 PM
 */

Ext.define('App.model.patient.VisitPayment', {
	extend: 'Ext.data.Model',
	fields: [
        {name: 'id', type: 'int'},
        {name: 'no', type: 'int'},
        {name: 'date', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'facility', type: 'string'},
        {name: 'received_from', type: 'string'},
        {name: 'amount', type: 'string'},
        {name: 'for_payment_of', type: 'string'},
        {name: 'paid_by', type: 'string'},
        {name: 'description', type: 'string'},
        {name: 'next_appointment', type: 'date', dateFormat:'Y-m-d H:i:s'},
        {name: 'accounted_amount', type: 'string'},
        {name: 'payment_amount', type: 'string'},
        {name: 'balance_due', type: 'string'}
	],
    proxy : {
        type: 'direct',
        api : {
            read  : Encounter.Checkout
        },
        reader     : {
            type: 'json'
        }
    }
});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.Vitals', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'id', type: 'int'},
		{name: 'pid', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'uid', type: 'int'},
		{name: 'auth_uid', type: 'int'},
		{name: 'date', type: 'date', dateFormat:'Y-m-d H:i:s' },
		{name: 'weight_lbs', type: 'float', useNull:true},
		{name: 'weight_kg', type: 'float', useNull:true},
		{name: 'height_in', type: 'float', useNull:true},
		{name: 'height_cm', type: 'float', useNull:true},
		{name: 'bp_systolic', type: 'float', useNull:true},
		{name: 'bp_diastolic', type: 'float', useNull:true},
		{name: 'pulse', type: 'int', useNull:true},
		{name: 'respiration', type: 'int', useNull:true},
		{name: 'temp_f', type: 'float', useNull:true},
		{name: 'temp_c', type: 'float', useNull:true},
		{name: 'temp_location', type: 'string'},
		{name: 'oxygen_saturation', type: 'float', useNull:true},
		{name: 'head_circumference_in', type: 'float', useNull:true},
		{name: 'head_circumference_cm', type: 'float', useNull:true},
		{name: 'waist_circumference_in', type: 'float', useNull:true},
		{name: 'waist_circumference_cm', type: 'float', useNull:true},
		{name: 'bmi', type: 'int', useNull:true},
		{name: 'bmi_status', type: 'string', useNull:true},
		{name: 'other_notes', type: 'string'},
		{name: 'administer_by', type: 'string'},
		{name: 'authorized_by', type: 'string'},

		{name: 'bp_systolic_normal', type: 'int', defaultValue: 120 },
		{name: 'bp_diastolic_normal', type: 'int', defaultValue: 80 }

	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: Encounter.getVitals,
			create: Encounter.addVitals,
			update: Encounter.updateVitals
		},
		reader     : {
			type: 'json'
		}
	},
    belongsTo: { model: 'App.model.patient.Encounter', foreignKey: 'eid' }

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.BMIForAge', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:8
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.HeadCircumferenceInf', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:4
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.LengthForAgeInf', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:2
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.StatureForAge', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:7
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.WeightForAge', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:6
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.WeightForAgeInf', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:1
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.WeightForRecumbentInf', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'age', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:3
        }
	}

});
 /**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */
Ext.define('App.model.patient.charts.WeightForStature', {
	extend   : 'Ext.data.Model',
	fields   : [
        {name: 'height', type: 'float'},
		{name: 'PP', type: 'float'},
		{name: 'P3', type: 'float'},
		{name: 'P5', type: 'float'},
		{name: 'P10', type: 'float'},
		{name: 'P25', type: 'float'},
		{name: 'P50', type: 'float'},
		{name: 'P75', type: 'float'},
		{name: 'P85', type: 'float'},
		{name: 'P90', type: 'float'},
		{name: 'P95', type: 'float'},
		{name: 'P97', type: 'float'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: VectorGraph.getGraphData
		},
		reader     : {
			type: 'json'
		},
        extraParams:{
            type:5
        }
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 * @namespace Patient.getPatientsByPoolArea
 */
Ext.define('App.model.areas.PoolArea', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'pid', type: 'int'},
		{name: 'eid', type: 'int'},
		{name: 'name', type: 'string'},
		{name: 'shortName', type: 'string'},
		{name: 'photoSrc', type: 'string'},
		{name: 'poolArea', type: 'string'},
		{name: 'floorPlanId', type: 'int'},
		{name: 'floorPlanRequireZone', type: 'bool'},
		{name: 'zoneId', type: 'int'},
		{name: 'patientZoneId', type: 'int'},
		{name: 'priority', type: 'string'}
	],
	proxy    : {
		type       : 'direct',
		api        : {
			read: PoolArea.getPatientsByPoolAreaAccess
		}
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 * @namespace Patient.getPatientsByPoolArea
 */
Ext.define('App.model.areas.PoolDropAreas', {
	extend   : 'Ext.data.Model',
	fields   : [
		{name: 'name', type: 'string'},
		{name: 'pid', type: 'int'},
		{name: 'pic', type: 'string'}
	]
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.ActiveProblems', {
	model: 'App.model.administration.ActiveProblems',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : Services.getActiveProblems,
			create: Services.addActiveProblems,
			destroy: Services.removeActiveProblems
		},
		reader     : {
			totalProperty: 'totals',
			root         : 'rows'
		}
	},
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.DefaultDocuments', {
	model: 'App.model.administration.DefaultDocuments',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : DocumentHandler.getDefaultDocumentsTemplates,
			create: DocumentHandler.addDocumentsTemplates,
			update: DocumentHandler.updateDocumentsTemplates
		}
	},
    autoSync: true,
	autoLoad: false

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.DocumentsTemplates', {
	model: 'App.model.administration.DocumentsTemplates',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : DocumentHandler.getDocumentsTemplates,
			create: DocumentHandler.addDocumentsTemplates,
			update: DocumentHandler.updateDocumentsTemplates
		}
	},
    autoSync: true,
	autoLoad: false

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */


Ext.define('App.store.administration.ExternalDataLoads', {
	model: 'App.model.administration.ExternalDataLoads',
	extend: 'Ext.data.Store',
	constructor:function(config){
		var me = this;
		me.proxy = {
			type       : 'direct',
			api        : {
				read  : ExternalDataUpdate.getCodeFiles
			},
			extraParams: {
				codeType: config.codeType
			}
		};
		me.callParent(arguments);
	},
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.administration.FloorPlans', {
	model: 'App.model.administration.FloorPlans',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : FloorPlans.getFloorPlans,
			create: FloorPlans.createFloorPlan,
			update: FloorPlans.updateFloorPlan
		}
	},
    autoSync  : true,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.administration.FloorPlanZones', {
	model: 'App.model.administration.FloorPlanZones',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : FloorPlans.getFloorPlanZones,
			create: FloorPlans.createFloorPlanZone,
			update: FloorPlans.updateFloorPlanZone
		}
	},
    autoSync  : true,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.HeadersAndFooters', {
	model: 'App.model.administration.HeadersAndFooters',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : DocumentHandler.getHeadersAndFootersTemplates,
			create: DocumentHandler.addDocumentsTemplates,
			update: DocumentHandler.updateDocumentsTemplates
		}
	},
    autoSync: true,
	autoLoad: false

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.ImmunizationRelations', {
	model: 'App.model.administration.ImmunizationRelations',
	extend: 'Ext.data.Store',
    autoLoad  : false,
	autoSync  : true,
	remoteSort: false

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.LabObservations', {
	model: 'App.model.administration.LabObservations',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : Laboratories.getLabObservations,
			create: Laboratories.addLabObservation,
			update: Laboratories.updateLabObservation,
			destroy: Laboratories.removeLabObservation
		}
	},
    autoSync: true,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.Medications', {
	model: 'App.model.administration.Medications',
	extend: 'Ext.data.Store',
    autoLoad  : false,
	autoSync  : true,
	remoteSort: true

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */


Ext.define('App.store.administration.PreventiveCare', {
	model: 'App.model.administration.PreventiveCare',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : PreventiveCare.getGuideLinesByCategory,
			create: PreventiveCare.addGuideLine,
			update: PreventiveCare.updateGuideLine
		},
		reader     : {
			totalProperty: 'totals',
			root         : 'rows'
		},
		extraParams: {
			code_type: this.code_type,
			query    : this.query,
			active   : this.active
		}
	},
    autoSync  : true,
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */


Ext.define('App.store.administration.PreventiveCareActiveProblems', {
	model: 'App.model.administration.PreventiveCareActiveProblems',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : PreventiveCare.getGuideLineActiveProblems,
			create: PreventiveCare.addGuideLineActiveProblems,
			destroy: PreventiveCare.removeGuideLineActiveProblems
		}
	},
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */


Ext.define('App.store.administration.PreventiveCareMedications', {
	model: 'App.model.administration.PreventiveCareMedications',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : PreventiveCare.getGuideLineMedications,
			create: PreventiveCare.addGuideLineMedications,
			destroy: PreventiveCare.removeGuideLineMedications
		}
	},
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */


Ext.define('App.store.administration.PreventiveCareLabs', {
	model: 'App.model.administration.PreventiveCareLabs',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : PreventiveCare.getGuideLineLabs,
			create: PreventiveCare.addGuideLineLabs,
			destroy: PreventiveCare.removeGuideLineLabs,
			update: PreventiveCare.updateGuideLineLabs
		}
	},
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */


Ext.define('App.store.administration.Services', {
	model: 'App.model.administration.Services',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : DataManager.getServices,
			create: DataManager.addService,
			update: DataManager.updateService
		},
		reader     : {
			totalProperty: 'totals',
			root         : 'rows'
		},
		extraParams: {
			code_type: this.code_type,
			query    : this.query,
			active   : this.active
		}
	},
    autoSync  : true,
	remoteSort: true,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:09 PM
 */


Ext.define('App.store.administration.ActiveProblems', {
	model: 'App.model.administration.ActiveProblems',
	extend: 'Ext.data.Store',
	proxy: {
		type       : 'direct',
		api        : {
			read  : Services.getActiveProblems,
			create: Services.addActiveProblems,
			destroy: Services.removeActiveProblems
		},
		reader     : {
			totalProperty: 'totals',
			root         : 'rows'
		}
	},
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Plushy
 * Date: 3/26/12
 * Time: 10:18 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.store.miscellaneous.OfficeNotes', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.miscellaneous.OfficeNotes',
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez
 * Date: 3/26/12
 * Time: 10:18 PM
 */
Ext.define('App.store.fees.Billing', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.fees.Billing',
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Plushy
 * Date: 3/26/12
 * Time: 10:18 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.store.fees.Checkout', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.fees.Checkout',
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Plushy
 * Date: 3/26/12
 * Time: 10:18 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.store.fees.EncountersPayments', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.fees.EncountersPayments',
	autoLoad  : false
});

/**
 * Created by JetBrains PhpStorm.
 * User: Plushy
 * Date: 3/26/12
 * Time: 10:18 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.store.fees.PaymentTransactions', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.fees.PaymentTransactions',
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/19/12
 * Time: 1:03 PM
 */
Ext.define('App.store.navigation.Navigation', {
	extend  : 'Ext.data.TreeStore',
	requires: ['App.model.navigation.Navigation'],
	model   : 'App.model.navigation.Navigation'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */

Ext.define('App.store.patient.Allergies', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Allergies',
    remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.CheckoutAlertArea', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.CheckoutAlertArea',
	remoteSort: false,
	autoLoad  : false
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */

Ext.define('App.store.patient.Dental', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Dental',
    remoteSort: false,
	autoLoad  : false
});
/*
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Disclosures', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Disclosures',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Encounter', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.Encounter'],
	pageSize: 10,
	model   : 'App.model.patient.Encounter'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.EncounterCPTsICDs', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.EncounterCPTsICDs',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.EncounterEventHistory', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.EventHistory',
    proxy : {
        type: 'direct',
        api : {
            read  : Encounter.getEncounterEventHistory
        }
    },
    autoLoad:false
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Encounters', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.Encounters'],
	pageSize: 25,
	model   : 'App.model.patient.Encounters',
    remoteSort:true
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Immunization', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Immunization',
	remoteSort: false,
	autoLoad  : true
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.ImmunizationCheck', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.ImmunizationCheck',
	remoteSort: true,
	autoLoad  : false
});


/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.LaboratoryTypes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.LaboratoryTypes',
	remoteSort: false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.MeaningfulUseAlert', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.MeaningfulUseAlert',
	remoteSort: true,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.MedicalIssues', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.MedicalIssues',
    remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Medications', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Medications',
    remoteSort: false,
	autoLoad  : false
});
/*
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Notes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Notes',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientArrivalLog', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientArrivalLog',
	remoteSort: true,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientCalendarEvents', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientCalendarEvents',
	remoteSort: false,
	autoLoad  : false
});
/*
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientDocuments', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientDocuments',
	remoteSort: false,
	autoLoad  : false,
	autoSync:true
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */

Ext.define('App.store.patient.DismissedAlerts', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.DismissedAlerts',
    remoteSort: false,
	autoLoad  : false,
    autoSync  : true
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientImmunization', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientImmunization',
	remoteSort: false,
	autoLoad  : false
});



/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientLabsResults', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientLabsResults',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientsLabsOrders', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientsLabsOrders',
	remoteSort: false,
	autoLoad  : false
});



/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PatientsPrescription', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientsPrescription',
	remoteSort: false,
	autoLoad  : false
});



/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.PreventiveCare', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PreventiveCare',
	remoteSort: false,
	autoLoad  : false
});



/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */

Ext.define('App.store.patient.QRCptCodes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.QRCptCodes',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Reminders', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Reminders',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */

Ext.define('App.store.patient.Surgery', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Surgery',
	remoteSort: false,
	autoLoad  : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.VectorGraph', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.VectorGraph'],
	model   : 'App.model.patient.VectorGraph'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 4/13/12
 * Time: 11:32 PM
 */

Ext.define('App.store.patient.VisitPayment', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.VisitPayment'],
	model   : 'App.model.patient.VisitPayment'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.Vitals', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.Vitals'],
	pageSize: 10,
	model   : 'App.model.patient.Vitals'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.BMIForAge', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.BMIForAge'],
	model   : 'App.model.patient.charts.BMIForAge'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.HeadCircumferenceInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.HeadCircumferenceInf'],
	model   : 'App.model.patient.charts.HeadCircumferenceInf'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.LengthForAgeInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.LengthForAgeInf'],
	model   : 'App.model.patient.charts.LengthForAgeInf'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.StatureForAge', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.StatureForAge'],
	model   : 'App.model.patient.charts.StatureForAge'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.WeightForAge', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForAge'],
	model   : 'App.model.patient.charts.WeightForAge'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.WeightForAgeInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForAgeInf'],
	model   : 'App.model.patient.charts.WeightForAgeInf'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.WeightForRecumbentInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForRecumbentInf'],
	model   : 'App.model.patient.charts.WeightForRecumbentInf'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.patient.charts.WeightForStature', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForStature'],
	model   : 'App.model.patient.charts.WeightForStature'
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 11:11 PM
 */
Ext.define('App.store.areas.PoolArea', {
	extend: 'Ext.data.Store',
	requires: ['App.model.areas.PoolArea'],
	pageSize: 10,
	model   : 'App.model.areas.PoolArea'
});
/**
 * @class Ext.ux.ActivityMonitor
 * @author Arthur Kay (http://www.akawebdesign.com)
 * @singleton
 * @version 1.0
 *
 * GitHub Project: https://github.com/arthurakay/ExtJS-Activity-Monitor
 */
Ext.define('App.classes.ActivityMonitor', {
    singleton   : true,

    ui          : null,
    runner      : null,
    task        : null,
    lastActive  : null,
    
    ready       : false,
    verbose     : false,
    interval    : (1000 * 60), //1 minute
    maxInactive : (1000 * 60 * 2), //5 minutes
    
    init : function(config) {
        if (!config) { config = {}; }
        
        Ext.apply(this, config, {
            runner     : new Ext.util.TaskRunner(),
            ui         : Ext.getBody(),
            task       : {
                run      : this.monitorUI,
                interval : config.interval || this.interval,
                scope    : this
            }
        });
        this.ready = true;
    },
    
    isReady : function() {
        return this.ready;
    },
    
    isActive   : Ext.emptyFn,
    isInactive : Ext.emptyFn,
    
    start : function() {
        if (!this.isReady()) {
            this.log('Please run ActivityMonitor.init()');
            return false;
        }
        
        this.ui.on('mousemove', this.captureActivity, this);
        this.ui.on('keydown', this.captureActivity, this);
        
        this.lastActive = new Date();
        this.log('ActivityMonitor has been started.');
        
        this.runner.start(this.task);

        return true;
    },
    
    stop : function() {
        if (!this.isReady()) {
            this.log('Please run ActivityMonitor.init()');
            return false;
        }
        
        this.runner.stop(this.task);
        this.lastActive = null;
        
        this.ui.un('mousemove', this.captureActivity);
        this.ui.un('keydown', this.captureActivity);
        
        this.log('ActivityMonitor has been stopped.');

        return true;
    },
    
    captureActivity : function(eventObj, el, eventOptions) {
        if(app.logoutWarinigWindow) app.cancelAutoLogout();
        this.lastActive = new Date();
    },
    
    monitorUI : function() {
        var now      = new Date(),
            inactive = (now - this.lastActive);
        
        if (inactive >= this.maxInactive) {
            this.log('MAXIMUM INACTIVE TIME HAS BEEN REACHED');
            this.stop(); //remove event listeners
            
            this.isInactive();
        }
        else {
            this.log('CURRENTLY INACTIVE FOR ' + Math.floor(inactive / 1000) + ' SECONDS)');
            this.isActive();
        }
    },
    
    log : function(msg) {
        if (this.verbose) {
            window.console.log(msg);
        }
    }
    
});

/**
 * Render panel
 *
 * @namespace FormLayoutEngine.getFields
 */
Ext.define('App.classes.AbstractPanel', {

	setReadOnly:function(readOnly){
		var forms = this.query('form');

		for(var j = 0; j < forms.length; j++) {
			var form = forms[j], items;
			if(form.readOnly != readOnly){
				form.readOnly = readOnly;
				items = form.getForm().getFields().items;
				for(var k = 0; k < items.length; k++){
					items[k].setReadOnly(readOnly);
				}
			}
		}
		return readOnly;
	},

	setButtonsDisabled:function(buttons, disabled){
		var disable = disabled || app.patient.readOnly;
		for(var i = 0; i < buttons.length; i++) {
			var btn = buttons[i];
			if(btn.disabled != disable){
				btn.disabled = disable;
				btn.setDisabled(disable)
			}
		}
	},

	goBack: function() {
		app.goBack();
	},

	checkIfCurrPatient: function() {
		return app.getCurrPatient();
	},

	patientInfoAlert: function() {
		var patient = app.getCurrPatient();

		Ext.Msg.alert(i18n['status'], i18n['patient'] + ': ' + patient.name + ' (' + patient.pid + ')');
	},

	currPatientError: function() {
		Ext.Msg.show({
			title  : 'Oops! ' + i18n['no_patient_selected'],
			msg    : i18n['select_patient_patient_live_search'],
			scope  : this,
			buttons: Ext.Msg.OK,
			icon   : Ext.Msg.ERROR,
			fn     : function() {
				this.goBack();
			}
		});
	},

	getFormItems: function(formPanel, formToRender, callback) {
		formPanel.removeAll();

		FormLayoutEngine.getFields({formToRender: formToRender}, function(provider, response) {
			var items = eval(response.result);
            formPanel.add(items);
			if(typeof callback == 'function') {
				callback(formPanel, items, true);
			}
		});
	},

	boolRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		}
		return val;
	},

	alertRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		}
		return val;
	},

    warnRenderer:function(val, metaData, record){
	    say(record);
	    var toolTip = record.data.warningMsg ? record.data.warningMsg : '';

        if(val == '1' || val == true || val == 'true') {
            return '<img src="resources/images/icons/icoImportant.png" ' + toolTip + ' />';
        }else{
            return val;
        }
    },

	onExpandRemoveMask: function(cmb) {
		cmb.picker.loadMask.destroy()
	},

	strToLowerUnderscores: function(str) {
		return str.toLowerCase().replace(/ /gi, "_");
	},

	getCurrPatient: function() {
		return app.getCurrPatient();
	},

	getApp: function() {
		return app.getApp();
	},

	msg: function(title, format) {
		app.msg(title, format)
	},

	alert:function(msg, icon) {
		app.alert(msg,icon)
	},

    passwordVerificationWin:function(callback){
        var msg = Ext.Msg.prompt(i18n['password_verification'], i18n['please_enter_your_password'] + ':', function(btn, password) {
            callback(btn, password);
        });
        var f = msg.textField.getInputId();
        document.getElementById(f).type = 'password';
        return msg;
    },
    getPageHeader:function(){
        return this.getComponent('RenderPanel-header');
    },
    getPageBodyContainer:function(){
        return this.getComponent('RenderPanel-body-container');
    },
    getPageBody:function(){
        return this.getPageBodyContainer().down('panel');
    }

});

/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Services.liveIDCXSearch
 */
Ext.define('App.classes.LiveCPTSearch', {
    extend       : 'Ext.form.field.ComboBox',
    alias        : 'widget.livecptsearch',
    hideLabel    : true,
    triggerTip   : i18n['click_to_clear_selection'],
    spObj        : '',
    spForm       : '',
    spExtraParam : '',
    qtip         : i18n['clearable_combo_box'],
    trigger1Class: 'x-form-select-trigger',
    trigger2Class: 'x-form-clear-trigger',
    initComponent: function() {
        var me = this;

        Ext.define('liveCPTSearchModel', {
            extend: 'Ext.data.Model',
            fields: [
	            {name: 'id'},
	            {name: 'eid'},
	            {name: 'code', type: 'strig'},
	            {name: 'code_text', type: 'string'},
	            {name: 'code_text_medium', type: 'string'},
	            {name: 'place_of_service', type: 'string'},
	            {name: 'emergency', type: 'string'},
	            {name: 'charge', type: 'string'},
	            {name: 'days_of_units', type: 'string'},
	            {name: 'essdt_plan', type: 'string'},
	            {name: 'modifiers', type: 'string'}
            ],
            proxy : {
                type       : 'direct',
                api        : {
                    read: ServiceCodes.liveCodeSearch
                },
                reader     : {
                    totalProperty: 'totals',
                    root         : 'rows'
                },
                extraParams: { code_type: 'cpt' }
            }
        });

        me.store = Ext.create('Ext.data.Store', {
            model   : 'liveCPTSearchModel',
            pageSize: 25,
            autoLoad: false
        });

        Ext.apply(this, {
            store       : me.store,
            displayField: 'code_text',
            valueField  : 'code',
            emptyText   : i18n['search'] + '...',
            typeAhead   : true,
            minChars    : 1,
            anchor      : '100%',
            listConfig  : {
                loadingText: i18n['searching'] + '...',
                //emptyText	: 'No matching posts found.',
                //---------------------------------------------------------------------
                // Custom rendering template for each item
                //---------------------------------------------------------------------
                getInnerTpl: function() {
                    return '<div class="search-item">{code}: {code_text}</div>';
                }
            },
            pageSize    : 25
        }, null);

        me.callParent();
    },


    onRender: function(ct, position) {
        this.callParent(arguments);
        var id = this.getId();
        this.triggerConfig = {
            tag: 'div', cls: 'x-form-twin-triggers', style: 'display:block;', cn: [
                {tag: "img", style: Ext.isIE? 'margin-left:0;height:21px' : '', src: Ext.BLANK_IMAGE_URL, id: "trigger2" + id, name: "trigger2" + id, cls: "x-form-trigger " + this.trigger2Class}
            ]};
        this.triggerEl.replaceWith(this.triggerConfig);
        this.triggerEl.on('mouseup', function(e) {
                if(e.target.name == "trigger2" + id) {
                    this.reset();
                    this.oldValue = null;
                    if(this.spObj !== '' && this.spExtraParam !== '') {
                        Ext.getCmp(this.spObj).store.setExtraParam(this.spExtraParam, '');
                        Ext.getCmp(this.spObj).store.load()
                    }
                    if(this.spForm !== '') {
                        Ext.getCmp(this.spForm).getForm().reset();
                    }
                }
            }, this);
        var trigger2 = Ext.get("trigger2" + id);
        trigger2.addClsOnOver('x-form-trigger-over');
    }

});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Patient.patientLiveSearch
 */
Ext.define('App.classes.LiveImmunizationSearch', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.immunizationlivesearch',
	hideLabel    : true,

	initComponent: function() {
		var me = this;

		Ext.define('liveImmunizationSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'code'},
				{name: 'code_text'},
				{name: 'code_text_short'}

			],
			proxy : {
				type  : 'direct',
				api   : {
					read: Medical.getImmunizationLiveSearch
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'liveImmunizationSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'code_text_short',
			valueField  : 'code_text_short',
			emptyText   : i18n['search_for_a_immunizations'] + '...',
			typeAhead   : true,
			minChars    : 1,
			listConfig  : {
				loadingText: i18n['searching'] + '...',
				//emptyText	: 'No matching posts found.',
				//---------------------------------------------------------------------
				// Custom rendering template for each item
				//---------------------------------------------------------------------
				getInnerTpl: function() {
					return '<div class="search-item"><h3>{code}<span style="font-weight: normal"> ({code_text}) </span></div>';
				}
			},
			pageSize    : 10
		}, null);

		me.callParent();
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Patient.patientLiveSearch
 */
Ext.define('App.classes.LiveMedicationSearch', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.medicationlivetsearch',
	hideLabel    : true,

	initComponent: function() {
		var me = this;

		Ext.define('liveMedicationsSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'PROPRIETARYNAME'},
				{name: 'PRODUCTNDC'},
				{name: 'NONPROPRIETARYNAME'},
				{name: 'ACTIVE_NUMERATOR_STRENGTH'},
				{name: 'ACTIVE_INGRED_UNIT'}
			],
			proxy : {
				type  : 'direct',
				api   : {
					read: Medical.getMedicationLiveSearch
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'liveMedicationsSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'PROPRIETARYNAME',
			valueField  : 'PROPRIETARYNAME',
			emptyText   : i18n['search_for_a_medication'] + '...',
			typeAhead   : false,
			hideTrigger : true,
			minChars    : 1,
			listConfig  : {
				loadingText: i18n['searching'] + '...',
				//emptyText	: 'No matching posts found.',
				//---------------------------------------------------------------------
				// Custom rendering template for each item
				//---------------------------------------------------------------------
				getInnerTpl: function() {
					return '<div class="search-item"><h3>{PROPRIETARYNAME}<span style="font-weight: normal"> ({NONPROPRIETARYNAME}) </span></h3>{ACTIVE_NUMERATOR_STRENGTH} | {ACTIVE_INGRED_UNIT}</div>';
				}
			},
			pageSize    : 10
		}, null);

		me.callParent();
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Patient.patientLiveSearch
 */
Ext.define('App.classes.LiveLabsSearch', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.labslivetsearch',
	hideLabel    : true,

	initComponent: function() {
		var me = this;

		Ext.define('liveLabsSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'loinc_name'},
				{name: 'loinc_number'}
			],
			proxy : {
				type  : 'direct',
				api   : {
					read: Medical.getLabsLiveSearch
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'liveLabsSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'loinc_name',
			valueField  : 'id',
			emptyText   : i18n['search'] + '...',
			typeAhead   : false,
			hideTrigger : true,
			minChars    : 1,
			listConfig  : {
			loadingText: i18n['searching'] + '...',
				//emptyText	: 'No matching posts found.',
				//---------------------------------------------------------------------
				// Custom rendering template for each item
				//---------------------------------------------------------------------
				getInnerTpl: function() {
					return '<div class="search-item"><h3>{loinc_name}</h3></div>';
				}
			},
			pageSize    : 10
		}, null);

		me.callParent();
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Patient.patientLiveSearch
 */
Ext.define('App.classes.LivePatientSearch', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.patienlivetsearch',
	hideLabel    : true,

	initComponent: function() {
		var me = this;

		Ext.define('patientLiveSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'pid', type: 'int'},
				{name: 'pubpid', type: 'int'},
				{name: 'fullname', type: 'string'},
				{name: 'DOB', type: 'string'},
				{name: 'SS', type: 'string'}
			],
			proxy : {
				type  : 'direct',
				api   : {
					read: Patient.patientLiveSearch
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'patientLiveSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'fullname',
			valueField  : 'pid',
			emptyText   : me.emptyText,
			typeAhead   : false,
			hideTrigger : true,
			minChars    : 1,
			listConfig  : {
				loadingText: i18n['searching'] + '...',
				//emptyText	: 'No matching posts found.',
				//---------------------------------------------------------------------
				// Custom rendering template for each item
				//---------------------------------------------------------------------
				getInnerTpl: function() {
					return '<div class="search-item"><h3><span>{fullname}</span>&nbsp;&nbsp;({pid})</h3>DOB:&nbsp;{DOB}&nbsp;SS:&nbsp;{SS}</div>';
				}
			},
			pageSize    : 10
		}, null);

		me.callParent();
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Patient.patientLiveSearch
 */
Ext.define('App.classes.LiveSurgeriesSearch', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.surgerieslivetsearch',
	hideLabel    : true,

	initComponent: function() {
		var me = this;

		Ext.define('liveSurgeriesSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'type'},
				{name: 'type_num'},
				{name: 'surgery'}
			],
			proxy : {
				type  : 'direct',
				api   : {
					read: Medical.getSurgeriesLiveSearch
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'liveSurgeriesSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'surgery',
			valueField  : 'surgery',
			emptyText   : i18n['search_for_a_surgery'] + '...',
			typeAhead   : true,
			minChars    : 1,
			listConfig  : {
				loadingText: i18n['searching'] + '...',
				//emptyText	: 'No matching posts found.',
				//---------------------------------------------------------------------
				// Custom rendering template for each item
				//---------------------------------------------------------------------
				getInnerTpl: function() {
					return '<div class="search-item"><h3>{surgery}<span style="font-weight: normal"> ({type}) </span></h3></div>';
				}
			},
			pageSize    : 10
		}, null);

		me.callParent();
	}

});
/*
 * Copyright 2007-2011, Active Group, Inc.  All rights reserved.
 * ******************************************************************************
 * This file is distributed on an AS IS BASIS WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * ***********************************************************************************
 * @version 4.0 alpha-1
 * [For Ext 4.0 or higher only]
 *
 * License: Ext.ux.ManagedIframe.Component and Ext.ux.ManagedIframe.Element
 * are licensed under the terms of the Open Source GPL 3.0 license:
 * http://www.gnu.org/licenses/gpl.html
 *
 * Commercial use is prohibited without a Commercial Developement License. See
 * http://licensing.theactivegroup.com.
 *
 */

/**
 * @class Ext.ux.ManagedIframe.Component
 * @extends Ext.Component
 */

Ext.define('App.classes.ManagedIframe', {

	/* Begin Definitions */
	extend: 'Ext.Component',
	alias : 'widget.miframe',
	/* End Definitions */

	hideMode  : Ext.isIE ? 'display' : 'nosize',

	/*
	 * @cfg {Boolean} autoScroll True to set overflow:auto on the nested iframe.
	 * If False, overflow is forced to hidden.
	 * Note: set to undefined to control overflow-x/y via the frameStyle config option
	 */
	autoScroll: true,

	/*
	 * @cfg {String/Object} frameStyle (optional) Style string or object configuration representing
	 * the desired style attributes to apply to the embedded IFRAME.
	 * Defaults to 'height:100%; width:100%;'
	 */
	frameStyle: null,

	frameCls: 'ux-miframe',

	shimCls: 'ux-miframe-shim',

	shimUrl    : Ext.BLANK_IMAGE_URL,

	/*
	 * @cfg {String} src (optional) Uri to load into the frame
	 */
	src        : null,

	/*
	 * @cfg {Boolean} autoMask True to display a loadMask during page content changes
	 */
	autoMask   : true,

	/*
	 * @cfg {String} maskMessage default message text rendered during masking operations
	 */
	maskMessage: 'Loading...',

	resetUrl: 'javascript:void(0);',

	ariaRole: 'presentation',

	unsupportedText: i18n['frames_are_disabled'],

	/*
	 * Bubble frame events to upstream containers
	 */
	bubbleEvents   : ['documentloaded', 'load'],

	initComponent: function() {

		var me = this,
			frameStyle = Ext.isString(me.frameStyle)
				? Ext.core.Element.parseStyles(me.frameStyle)
				: me.frameStyle || {};

		me.autoEl = {
			cn: [
				Ext.applyIf(
					me.frameConfig || {},
					{
						tag        : 'iframe',
						cls        : me.frameCls,
						style      : Ext.apply(
							{
								"height": "100%",
								"width" : "100%"
							},
							frameStyle
						),
						frameBorder: 'no',
						role       : me.ariaRole,
						name       : me.getId(),
						src        : me.resetUrl || ''
					}
				),
				{tag: 'noframes', html: me.unsupportedText},
				{
					tag       : 'img',
					cls       : me.shimCls,
					galleryimg: "no",
					style     : "position:absolute;top:0;left:0;display:none;z-index:20;height:100%;width:100%;",
					src       : me.shimUrl
				}
			]
		};
		this.callParent();
	},

	renderSelectors: {
		frameElement: 'iframe.ux-miframe',
		frameShim   : 'img.ux-miframe-shim'
	},

	afterRender     : function() {
		var me = this;
		me.callParent();

		if(me.frameElement) {
			me.frameElement.relayEvent('load', me);  //propagate DOM events to the component and bubbled consumers
			me.on({
				load : me.onFrameLoad,
				scope: me
			});
		}
		if(me.frameShim) {
			me.frameShim.autoBoxAdjust = false;
			me.frameShim.setVisibilityMode(Ext.core.Element.DISPLAY);
		}
		//permit layout to quiesce
		Ext.defer(me.setSrc, 50, me, []);
	},

	// private
	getContentTarget: function() {
		return this.frameElement;
	},

	getActionEl: function() {
		return this.frameElement || this.el;
	},

	/*
	 * @private
	 */
	onFrameLoad: function(e) {
		var me = this;
		me.fireEvent('documentloaded', me, me.frameElement);
		if(me.autoMask) {
			me.setLoading(false);
		}
	},

	/*
	 * Setter - Changes the current src attribute of the IFRAME, applying a loadMask
	 * over the frame (if autoMask is true)
	 * Note: call without the uri argument to simply refresh the frame with the current src value
	 */
	setSrc     : function(uri) {
		var me = this;
		uri = uri || me.src || me.defaultSrc;
		if(uri && me.rendered && me.frameElement) {
			me.autoMask &&
				me.isVisible(true) &&
			me.setLoading(me.maskMessage || '');

			me.frameElement.dom.src = uri;
		}
		me.src = uri;
		return me;
	},

	/**
	 * contentEl is NOT supported, but tpl/data, and html ARE.
	 * @private
	 */
	initContent: function() {
		var me = this,
			content = me.data || me.html;

		if(me.contentEl && Ext.isDefined(Ext.global.console)) {
			Ext.global.console.warn('Ext.ux.ManagedIframe.Component: \'contentEl\' is not supported by this class.');
		}

		// Make sure this.tpl is an instantiated XTemplate
		if(me.tpl && !me.tpl.isTemplate) {
			me.tpl = Ext.create('Ext.XTemplate', me.tpl);
		}

		if(content) {
			me.update(content);  //no-op until alpha2 release
		}
		delete me.contentEl;
	},

	/**
	 * Update(replacing) the document content of the IFRAME.
	 * @param {Mixed} htmlOrData
	 * If this component has been configured with a template via the tpl config
	 * then it will use this argument as data to populate the frame.
	 * If this component was not configured with a template, the components
	 * content area (iframe) will be updated via Ext.ux.ManagedIframe.Element update
	 * @param {Boolean} loadScripts (optional) Defaults to false
	 * @param {Function} callback (optional) Callback to execute when scripts have finished loading
	 */
	updateAlpha2: function(htmlOrData, loadScripts, callback) {
		var me = this;

		if(me.tpl && !Ext.isString(htmlOrData)) {
			me.data = htmlOrData;
			me.html = me.tpl.apply(htmlOrData || {});
		} else {
			me.html = Ext.core.DomHelper.markup(htmlOrData);
		}

		if(me.rendered) {
			me.getContentTarget().update(me.html, loadScripts, callback);
		}
		return me;
	},

	//Frame writing scheduled for Aplha2, so no-op for now
	update      : function() {
	},

	/**
	 * Sets the overflow on the IFRAME element of the component.
	 * @param {Boolean} scroll True to allow the IFRAME to auto scroll.
	 * @return {Ext.ux.ManagedIframe.Component} this
	 */
	setAutoScroll: function(scroll) {
		var me = this,
			targetEl;
		if(Ext.isDefined(scroll)) {  //permits frameStyle overrides
			scroll = !!scroll;
			if(me.rendered && (targetEl = me.getContentTarget())) {
				targetEl.setStyle('overflow', scroll ? 'auto' : 'hidden');
			}
			me.autoScroll = scroll;
		}
		return me;
	},

	/*
	 *   Toggle the transparent shim on/off
	 */
	toggleShim   : function(enabled) {
		var me = this;
		if(me.frameShim) {
			me.frameShim[enabled ? 'show' : 'hide']();
		}
		return me.frameShim;
	},

	onDestroy: function() {
		var me = this, frame;
		if(frame = me.frameElement) {
			frame.clearListeners();
			frame.remove();
		}
		me.deleteMembers('frameElement', 'frameShim');
		me.callParent();
	}

});

/**
 * A plugin that provides the ability to visually indicate to the user that a node is disabled.
 *
 * Notes:
 * - Compatible with Ext 4.x
 * - If the view already defines a getRowClass function, the original function will be called before this plugin.
 *
 var tree = Ext.create('Ext.tree.Panel',{
 plugins: [{
 ptype: 'nodedisabled'
 }]
 ...
 });
 *
 * @class Ext.ux.tree.plugin.NodeDisabled
 * @extends Ext.AbstractPlugin
 * @author Phil Crawford
 * @license Licensed under the terms of the Open Source <a href="http://www.gnu.org/licenses/lgpl.html">LGPL 3.0 license</a>.  Commercial use is permitted to the extent that the code/component(s) do NOT become part of another Open Source or Commercially licensed development library or toolkit without explicit permission.
 * @version 0.1 (July 1, 2011)
 * @constructor
 * @param {Object} config
 */
Ext.define('App.classes.NodeDisabled', {
    alias:'plugin.nodedisabled', extend:'Ext.AbstractPlugin'


    //configurables
    /**
     * @cfg {String} disabledCls
     * The CSS class applied when the {@link Ext.data.Model} of the node has a 'disabled' field with a true value.
     */, disabledCls:'tree-node-disabled'
    /**
     * @cfg {Boolean} preventSelection
     * True to prevent selection of a node that is disabled. Default true.
     */, preventSelection:true

    /**
     * @cfg {Boolean} preventChecking
     * True to prevent checking of a node that is disabled. Default true.
     */, preventChecking:true

    //properties


    /**
     * @private
     * @param {Ext.tree.Panel} tree
     */, init:function (tree) {
        var me = this
            , view = tree.getView()
            , origFn
            , origScope;

        me.callParent(arguments);

        origFn = view.getRowClass;
        if (origFn) {
            origScope = view.scope || me;
            Ext.apply(view, {
                getRowClass:function () {
                    var v1, v2;
                    v1 = origFn.apply(origScope, arguments) || '';
                    v2 = me.getRowClass.apply(me, arguments) || '';
                    return (v1 && v2) ? v1 + ' ' + v2 : v1 + v2;
                }
            }, null);
        } else {
            Ext.apply(view, {
                getRowClass:Ext.Function.bind(me.getRowClass, me)
            }, null);
        }

        if (me.preventSelection) {
            tree.getSelectionModel().on('beforeselect', me.onBeforeNodeSelect, me);
        }

        if (me.preventChecking) {
            tree.on('checkchange', me.checkchange, me);
        }
    } // eof init


    /**
     * Returns a properly typed result.
     * @return {Ext.tree.Panel}
     */, getCmp:function () {
        return this.callParent(arguments);
    } //eof getCmp

    /**
     * @private
     * @param {Ext.data.Model} record
     * @param {Number} index
     * @param {Object} rowParams
     * @param {Ext.data.Store} ds
     * @return {String}
     */, getRowClass:function (record, index, rowParams, ds) {
        return record.get('disabled') ? this.disabledCls : '';
    }//eof getRowClass

    /**
     * @private
     * @param {Ext.selection.TreeModel} sm
     * @param {Ext.data.Model} node
     * @return {Boolean}
     */, onBeforeNodeSelect:function (sm, node) {
        if (node.get('disabled')) {
            return false;
        }
    }//eof onBeforeNodeSelect

    /**
     * @event checkchange
     * Fires when a node with a checkbox's checked property changes
     * @param {Ext.data.Model} node The node who's checked property was changed
     * @param {Boolean} checked The node's new checked state
     */, checkchange:function (node, checked) {
        if (node.get('disabled')) {
            node.set('checked', !checked);
        }
    }//eof checkchange

});//eo class

//end of file
//******************************************************************************
// Photo ID Window
//******************************************************************************
Ext.define('App.classes.PhotoIdWindow', {
	extend       : 'Ext.window.Window',
	alias        : 'widget.photoidwindow',
	height       : 320,
	width        : 320,
	layout       : 'fit',
	renderTo     : document.body,
	initComponent: function() {
		var me = this;


		window.webcam.set_api_url( 'dataProvider/WebCamImgHandler.php' );
	    window.webcam.set_swf_url( 'lib/jpegcam/htdocs/webcam.swf' );
	    window.webcam.set_quality( 100 ); // JPEG quality (1 - 100)
	    window.webcam.set_shutter_sound( true, 'lib/jpegcam/htdocs/shutter.mp3' ); // play shutter click sound
	    window.webcam.set_hook( 'onComplete', 'onWebCamComplete' );

		Ext.apply(this, {
			html:window.webcam.get_html(320, 320),
			buttons: [
				{
					text   : i18n['capture'],
					iconCls: 'save',
					handler: me.captureToCanvas
				},
				{
					text   : i18n['cancel'],
					scope:me,
					handler: function(){
						this.close();
					}
				}
			]
		},null);
		me.callParent(arguments);
	},

	captureToCanvas:function(){
		window.webcam.snap();
	}
});
/**
 * @class Ext.fx.target.Sprite

 This class represents an animation target for a {@link Ext.draw.Sprite}. In general this class will not be
 created directly, the {@link Ext.draw.Sprite} will be passed to the animation and
 and the appropriate target will be created.

 * @markdown
 */

Ext.define('Ext.fx.target.Sprite', {

    /* Begin Definitions */

    extend: 'Ext.fx.target.Target',

    /* End Definitions */

    type: 'draw',

    getFromPrim: function (sprite, attr) {
        var obj;
        switch (attr) {
            case 'rotate':
            case 'rotation':
                obj = sprite.attr.rotation;
                return {
                    x: obj.x || 0,
                    y: obj.y || 0,
                    degrees: obj.degrees || 0
                };
            case 'scale':
            case 'scaling':
                obj = sprite.attr.scaling;
                return {
                    x: obj.x || 1,
                    y: obj.y || 1,
                    cx: obj.cx || 0,
                    cy: obj.cy || 0
                };
            case 'translate':
            case 'translation':
                obj = sprite.attr.translation;
                return {
                    x: obj.x || 0,
                    y: obj.y || 0
                };
            default:
                return sprite.attr[attr];
        }
    },

    getAttr: function (attr, val) {
        return [
            [this.target, val != undefined ? val : this.getFromPrim(this.target, attr)]
        ];
    },

    setAttr: function (targetData) {
        var ln = targetData.length,
            spriteArr = [],
            attrsConf, attr, attrArr, attrs, sprite, idx, value, i, j, x, y, ln2;
        for (i = 0; i < ln; i++) {
            attrsConf = targetData[i].attrs;
            for (attr in attrsConf) {
                attrArr = attrsConf[attr];
                ln2 = attrArr.length;
                for (j = 0; j < ln2; j++) {
                    sprite = attrArr[j][0];
                    attrs = attrArr[j][1];
                    if (attr === 'translate' || attr === 'translation') {
                        value = {
                            x: attrs.x,
                            y: attrs.y
                        };
                    }
                    else if (attr === 'rotate' || attr === 'rotation') {
                        x = attrs.x;
                        if (isNaN(x)) {
                            x = null;
                        }
                        y = attrs.y;
                        if (isNaN(y)) {
                            y = null;
                        }
                        value = {
                            degrees: attrs.degrees,
                            x: x,
                            y: y
                        };
                    } else if (attr === 'scale' || attr === 'scaling') {
                        x = attrs.x;
                        if (isNaN(x)) {
                            x = null;
                        }
                        y = attrs.y;
                        if (isNaN(y)) {
                            y = null;
                        }
                        value = {
                            x: x,
                            y: y,
                            cx: attrs.cx,
                            cy: attrs.cy
                        };
                    }
                    else if (attr === 'width' || attr === 'height' || attr === 'x' || attr === 'y') {
                        value = parseFloat(attrs);
                    }
                    else {
                        value = attrs;
                    }
                    idx = Ext.Array.indexOf(spriteArr, sprite);
                    if (idx == -1) {
                        spriteArr.push([sprite, {}]);
                        idx = spriteArr.length - 1;
                    }
                    spriteArr[idx][1][attr] = value;
                }
            }
        }
        ln = spriteArr.length;
        for (i = 0; i < ln; i++) {
            spriteArr[i][0].setAttributes(spriteArr[i][1]);
        }
        this.target.redraw();
    }
});

/**
 * This class provides a container DD instance that allows dropping on multiple child target nodes.
 *
 * By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.
 * However a simpler way to allow a DropZone to manage any number of target elements is to configure the
 * DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed
 * mouse event to see if it has taken place within an element, or class of elements. This is easily done
 * by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
 * {@link Ext.DomQuery} selector.
 *
 * Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
 * a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},
 * {@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations
 * of these methods to provide application-specific behaviour for these events to update both
 * application state, and UI state.
 *
 * For example to make a GridPanel a cooperating target with the example illustrated in
 * {@link Ext.dd.DragZone DragZone}, the following technique might be used:
 *
 *     myGridPanel.on('render', function() {
 *         myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
 *
 *             // If the mouse is over a grid row, return that node. This is
 *             // provided as the "target" parameter in all "onNodeXXXX" node event handling functions
 *             getTargetFromEvent: function(e) {
 *                 return e.getTarget(myGridPanel.getView().rowSelector);
 *             },
 *
 *             // On entry into a target node, highlight that node.
 *             onNodeEnter : function(target, dd, e, data){
 *                 Ext.fly(target).addCls('my-row-highlight-class');
 *             },
 *
 *             // On exit from a target node, unhighlight that node.
 *             onNodeOut : function(target, dd, e, data){
 *                 Ext.fly(target).removeCls('my-row-highlight-class');
 *             },
 *
 *             // While over a target node, return the default drop allowed class which
 *             // places a "tick" icon into the drag proxy.
 *             onNodeOver : function(target, dd, e, data){
 *                 return Ext.dd.DropZone.prototype.dropAllowed;
 *             },
 *
 *             // On node drop we can interrogate the target to find the underlying
 *             // application object that is the real target of the dragged data.
 *             // In this case, it is a Record in the GridPanel's Store.
 *             // We can use the data set up by the DragZone's getDragData method to read
 *             // any data we decided to attach in the DragZone's getDragData method.
 *             onNodeDrop : function(target, dd, e, data){
 *                 var rowIndex = myGridPanel.getView().findRowIndex(target);
 *                 var r = myGridPanel.getStore().getAt(rowIndex);
 *                 Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +
 *                     ' on Record id ' + r.id);
 *                 return true;
 *             }
 *         });
 *     }
 *
 * See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which
 * cooperates with this DropZone.
 */
Ext.define('Ext.dd.DropZone', {
    extend: 'Ext.dd.DropTarget',
    requires: ['Ext.dd.Registry'],

    /**
     * Returns a custom data object associated with the DOM node that is the target of the event.  By default
     * this looks up the event target in the {@link Ext.dd.Registry}, although you can override this method to
     * provide your own custom lookup.
     * @param {Event} e The event
     * @return {Object} data The custom data
     */
    getTargetFromEvent : function(e){
        return Ext.dd.Registry.getTargetFromEvent(e);
    },

    /**
     * Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node
     * that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.
     * This method has no default implementation and should be overridden to provide
     * node-specific processing if necessary.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from 
     * {@link #getTargetFromEvent} for this node)
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     */
    onNodeEnter : function(n, dd, e, data){
        
    },

    /**
     * Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node
     * that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.
     * The default implementation returns this.dropAllowed, so it should be
     * overridden to provide the proper feedback.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from
     * {@link #getTargetFromEvent} for this node)
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Ext.dd.StatusProxy} can be updated
     * @template
     */
    onNodeOver : function(n, dd, e, data){
        return this.dropAllowed;
    },

    /**
     * Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of
     * the drop node without dropping.  This method has no default implementation and should be overridden to provide
     * node-specific processing if necessary.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from
     * {@link #getTargetFromEvent} for this node)
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @template
     */
    onNodeOut : function(n, dd, e, data){
        
    },

    /**
     * Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto
     * the drop node.  The default implementation returns false, so it should be overridden to provide the
     * appropriate processing of the drop event and return true so that the drag source's repair action does not run.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from
     * {@link #getTargetFromEvent} for this node)
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {Boolean} True if the drop was valid, else false
     * @template
     */
    onNodeDrop : function(n, dd, e, data){
        return false;
    },

    /**
     * Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,
     * but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so
     * it should be overridden to provide the proper feedback if necessary.
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Ext.dd.StatusProxy} can be updated
     * @template
     */
    onContainerOver : function(dd, e, data){
        return this.dropNotAllowed;
    },

    /**
     * Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,
     * but not on any of its registered drop nodes.  The default implementation returns false, so it should be
     * overridden to provide the appropriate processing of the drop event if you need the drop zone itself to
     * be able to accept drops.  It should return true when valid so that the drag source's repair action does not run.
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {Boolean} True if the drop was valid, else false
     * @template
     */
    onContainerDrop : function(dd, e, data){
        return false;
    },

    /**
     * The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over
     * the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop
     * nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops
     * you should override this method and provide a custom implementation.
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Ext.dd.StatusProxy} can be updated
     * @template
     */
    notifyEnter : function(dd, e, data){
        return this.dropNotAllowed;
    },

    /**
     * The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.
     * This method will be called on every mouse movement while the drag source is over the drop zone.
     * It will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically
     * delegate to the appropriate node-specific methods as necessary when the drag source enters and exits
     * registered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a
     * registered node, it will call {@link #onContainerOver}.
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Ext.dd.StatusProxy} can be updated
     * @template
     */
    notifyOver : function(dd, e, data){
        var n = this.getTargetFromEvent(e);
        if(!n) { // not over valid drop target
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
                this.lastOverNode = null;
            }
            return this.onContainerOver(dd, e, data);
        }
        if(this.lastOverNode != n){
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
            }
            this.onNodeEnter(n, dd, e, data);
            this.lastOverNode = n;
        }
        return this.onNodeOver(n, dd, e, data);
    },

    /**
     * The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged
     * out of the zone without dropping.  If the drag source is currently over a registered node, the notification
     * will be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored.
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag zone
     * @template
     */
    notifyOut : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode = null;
        }
    },

    /**
     * The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has
     * been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there
     * is a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,
     * otherwise it will call {@link #onContainerDrop}.
     * @param {Ext.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {Boolean} False if the drop was invalid.
     * @template
     */
    notifyDrop : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode = null;
        }
        var n = this.getTargetFromEvent(e);
        return n ?
            this.onNodeDrop(n, dd, e, data) :
            this.onContainerDrop(dd, e, data);
    },

    // private
    triggerCacheRefresh : function() {
        Ext.dd.DDM.refreshCache(this.groups);
    }
});
/**
 * This class provides a container DD instance that allows dragging of multiple child source nodes.
 *
 * This class does not move the drag target nodes, but a proxy element which may contain any DOM structure you wish. The
 * DOM element to show in the proxy is provided by either a provided implementation of {@link #getDragData}, or by
 * registered draggables registered with {@link Ext.dd.Registry}
 *
 * If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some application
 * object (For example nodes in a {@link Ext.view.View DataView}) then use of this class is the most efficient way to
 * "activate" those nodes.
 *
 * By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}. However a
 * simpler way to allow a DragZone to manage any number of draggable elements is to configure the DragZone with an
 * implementation of the {@link #getDragData} method which interrogates the passed mouse event to see if it has taken
 * place within an element, or class of elements. This is easily done by using the event's {@link
 * Ext.EventObject#getTarget getTarget} method to identify a node based on a {@link Ext.DomQuery} selector. For example,
 * to make the nodes of a DataView draggable, use the following technique. Knowledge of the use of the DataView is
 * required:
 *
 *     myDataView.on('render', function(v) {
 *         myDataView.dragZone = new Ext.dd.DragZone(v.getEl(), {
 *
 *     //      On receipt of a mousedown event, see if it is within a DataView node.
 *     //      Return a drag data object if so.
 *             getDragData: function(e) {
 *
 *     //          Use the DataView's own itemSelector (a mandatory property) to
 *     //          test if the mousedown is within one of the DataView's nodes.
 *                 var sourceEl = e.getTarget(v.itemSelector, 10);
 *
 *     //          If the mousedown is within a DataView node, clone the node to produce
 *     //          a ddel element for use by the drag proxy. Also add application data
 *     //          to the returned data object.
 *                 if (sourceEl) {
 *                     d = sourceEl.cloneNode(true);
 *                     d.id = Ext.id();
 *                     return {
 *                         ddel: d,
 *                         sourceEl: sourceEl,
 *                         repairXY: Ext.fly(sourceEl).getXY(),
 *                         sourceStore: v.store,
 *                         draggedRecord: v.{@link Ext.view.View#getRecord getRecord}(sourceEl)
 *                     }
 *                 }
 *             },
 *
 *     //      Provide coordinates for the proxy to slide back to on failed drag.
 *     //      This is the original XY coordinates of the draggable element captured
 *     //      in the getDragData method.
 *             getRepairXY: function() {
 *                 return this.dragData.repairXY;
 *             }
 *         });
 *     });
 *
 * See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which cooperates with
 * this DragZone.
 */
Ext.define('Ext.dd.DragZone', {
    extend: 'Ext.dd.DragSource',

    /**
     * Creates new DragZone.
     * @param {String/HTMLElement/Ext.Element} el The container element or ID of it.
     * @param {Object} config
     */
    constructor : function(el, config){
        this.callParent([el, config]);
        if (this.containerScroll) {
            Ext.dd.ScrollManager.register(this.el);
        }
    },

    /**
     * @property {Object} dragData
     * This property contains the data representing the dragged object. This data is set up by the implementation of the
     * {@link #getDragData} method. It must contain a ddel property, but can contain any other data according to the
     * application's needs.
     */

    /**
     * @cfg {Boolean} containerScroll
     * True to register this container with the Scrollmanager for auto scrolling during drag operations.
     */

    /**
     * Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry} for a valid target to drag
     * based on the mouse down. Override this method to provide your own lookup logic (e.g. finding a child by class
     * name). Make sure your returned object has a "ddel" attribute (with an HTML Element) for other functions to work.
     * @param {Event} e The mouse down event
     * @return {Object} The dragData
     */
    getDragData : function(e){
        return Ext.dd.Registry.getHandleFromEvent(e);
    },

    /**
     * Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
     * this.dragData.ddel
     * @param {Number} x The x position of the click on the dragged object
     * @param {Number} y The y position of the click on the dragged object
     * @return {Boolean} true to continue the drag, false to cancel
     * @template
     */
    onInitDrag : function(x, y){
        this.proxy.update(this.dragData.ddel.cloneNode(true));
        this.onStartDrag(x, y);
        return true;
    },

    /**
     * Called after a repair of an invalid drop. By default, highlights this.dragData.ddel
     * @template
     */
    afterRepair : function(){
        var me = this;
        if (Ext.enableFx) {
            Ext.fly(me.dragData.ddel).highlight(me.repairHighlightColor);
        }
        me.dragging = false;
    },

    /**
     * Called before a repair of an invalid drop to get the XY to animate to. By default returns the XY of
     * this.dragData.ddel
     * @param {Event} e The mouse up event
     * @return {Number[]} The xy location (e.g. `[100, 200]`)
     * @template
     */
    getRepairXY : function(e){
        return Ext.fly(this.dragData.ddel).getXY();
    },

    destroy : function(){
        this.callParent();
        if (this.containerScroll) {
            Ext.dd.ScrollManager.unregister(this.el);
        }
    }
});

/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 11/1/11
 * Time: 12:37 PM
 */
Ext.define('App.classes.form.fields.Help', {
    extend       : 'Ext.Img',
    alias        : 'widget.helpbutton',
    src          : 'resources/images/icons/icohelp.png',
    height       : 16,
    width        : 16,
    margin       : '3 10',
    helpMsg      : i18n['help_message'],
    initComponent: function() {
        var me = this;
        me.listeners = {
            render: function(c) {
                me.setToolTip(c.getEl());
            }
        };
        me.callParent();
    },

    setToolTip: function(el) {
        Ext.create('Ext.tip.ToolTip', {
            target      : el,
            dismissDelay: 0,
            html        : this.helpMsg
        });
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 11/1/11
 * Time: 12:37 PM
 */
Ext.define('App.classes.form.fields.Checkbox', {
	extend        : 'Ext.form.field.Checkbox',
	alias         : 'widget.mitos.checkbox',
	inputValue    : '1',
	uncheckedValue: '0'
});
/**
 * Created by JetBrains PhpStorm.
 * User: GaiaEHR
 * Date: 3/18/12
 * Time: 10:02 PM
 * To change this template use File | Settings | File Templates.
 */
/*
 * GNU General Public License Usage
 * This file may be used under the terms of the GNU General Public License version 3.0 as published by the Free Software Foundation and appearing in the file LICENSE included in the packaging of this file.  Please review the following information to ensure the GNU General Public License version 3.0 requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 *
 * http://www.gnu.org/licenses/lgpl.html
 *
 * @description: This class provide aditional format to numbers by extending Ext.form.field.Number
 *
 * @author: Greivin Britton
 * @email: brittongr@gmail.com
 * @version: 2 compatible with ExtJS 4
 */
Ext.define('App.classes.form.fields.Currency',
    {
        extend:'Ext.form.field.Number', //Extending the NumberField
        alias:'widget.mitos.currency', //Defining the xtype,
        currencySymbol:'$',
        useThousandSeparator:true,
        thousandSeparator:',',
        alwaysDisplayDecimals:true,
        fieldStyle:'text-align: right;',
        initComponent:function () {
            if (this.useThousandSeparator && this.decimalSeparator == ',' && this.thousandSeparator == ',')
                this.thousandSeparator = '.';
            else
            if (this.allowDecimals && this.thousandSeparator == '.' && this.decimalSeparator == '.')
                this.decimalSeparator = ',';

            this.callParent(arguments);
        },
        setValue:function (value) {
            App.classes.form.fields.Currency.superclass.setValue.call(this, value != null ? value.toString().replace('.', this.decimalSeparator) : value);

            this.setRawValue(this.getFormattedValue(this.getValue()));
        },
        getFormattedValue:function (value) {
            if (Ext.isEmpty(value) || !this.hasFormat())
                return value;
            else {
                var neg = null;

                value = (neg = value < 0) ? value * -1 : value;
                value = this.allowDecimals && this.alwaysDisplayDecimals ? value.toFixed(this.decimalPrecision) : value;

                if (this.useThousandSeparator) {
                    if (this.useThousandSeparator && Ext.isEmpty(this.thousandSeparator))
                        throw ('NumberFormatException: invalid thousandSeparator, property must has a valid character.');

                    if (this.thousandSeparator == this.decimalSeparator)
                        throw ('NumberFormatException: invalid thousandSeparator, thousand separator must be different from decimalSeparator.');

                    value = value.toString();

                    var ps = value.split('.');
                    ps[1] = ps[1] ? ps[1] : null;

                    var whole = ps[0];

                    var r = /(\d+)(\d{3})/;

                    var ts = this.thousandSeparator;

                    while (r.test(whole))
                        whole = whole.replace(r, '$1' + ts + '$2');

                    value = whole + (ps[1] ? this.decimalSeparator + ps[1] : '');
                }

                return Ext.String.format('{0}{1}{2}', (neg ? '-' : ''), (Ext.isEmpty(this.currencySymbol) ? '' : this.currencySymbol + ' '), value);
            }
        },
        /**
         * overrides parseValue to remove the format applied by this class
         */
        parseValue:function (value) {
            //Replace the currency symbol and thousand separator
            return App.classes.form.fields.Currency.superclass.parseValue.call(this, this.removeFormat(value));
        },
        /**
         * Remove only the format added by this class to let the superclass validate with it's rules.
         * @param {Object} value
         */
        removeFormat:function (value) {
            if (Ext.isEmpty(value) || !this.hasFormat())
                return value;
            else {
                value = value.toString().replace(this.currencySymbol + ' ', '');

                value = this.useThousandSeparator ? value.replace(new RegExp('[' + this.thousandSeparator + ']', 'g'), '') : value;

                return value;
            }
        },
        /**
         * Remove the format before validating the the value.
         * @param {Number} value
         */
        getErrors:function (value) {
            return App.classes.form.fields.Currency.superclass.getErrors.call(this, this.removeFormat(value));
        },
        hasFormat:function () {
            return this.decimalSeparator != '.' || (this.useThousandSeparator == true && this.getRawValue() != null) || !Ext.isEmpty(this.currencySymbol) || this.alwaysDisplayDecimals;
        },
        /**
         * Display the numeric value with the fixed decimal precision and without the format using the setRawValue, don't need to do a setValue because we don't want a double
         * formatting and process of the value because beforeBlur perform a getRawValue and then a setValue.
         */
        onFocus:function () {
            this.setRawValue(this.removeFormat(this.getRawValue()));

            this.callParent(arguments);
        }
    });
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 1/22/12
 * Time: 11:46 AM
 */
/**
 * @class Ext.ux.form.field.DateTime
 * @extends Ext.form.FieldContainer
 * @author atian25 (http://www.sencha.com/forum/member.php?51682-atian25)
 * @author ontho (http://www.sencha.com/forum/member.php?285806-ontho)
 * @author jakob.ketterl (http://www.sencha.com/forum/member.php?25102-jakob.ketterl)
 */
Ext.define('App.classes.form.fields.DateTime', {
	extend: 'Ext.form.FieldContainer',
	mixins: {
		field: 'Ext.form.field.Field'
	},
	alias : 'widget.mitos.datetime',

	//configurables

	combineErrors: true,
	msgTarget    : 'under',
	layout       : 'hbox',
	readOnly     : false,

	/**
	 * @cfg {String} dateFormat
	 * The default is 'Y-m-d'
	 */
	dateFormat    : 'Y-m-d',
	/**
	 * @cfg {String} timeFormat
	 * The default is 'H:i:s'
	 */
	timeFormat    : 'g:i:s a',
	/**
	 * @cfg {String} dateTimeFormat
	 * The format used when submitting the combined value.
	 * Defaults to 'Y-m-d H:i:s'
	 */
	dateTimeFormat: 'Y-m-d H:i:s',
	/**
	 * @cfg {Object} dateConfig
	 * Additional config options for the date field.
	 */
	dateConfig    : {},
	/**
	 * @cfg {Object} timeConfig
	 * Additional config options for the time field.
	 */
	timeConfig    : {},


	// properties

	dateValue: null, // Holds the actual date
	/**
	 * @property dateField
	 * @type Ext.form.field.Date
	 */
	dateField: null,
	/**
	 * @property timeField
	 * @type Ext.form.field.Time
	 */
	timeField: null,

	initComponent: function() {
		var me = this;
		me.items = me.items || [];

		me.dateField = Ext.create('Ext.form.field.Date', Ext.apply({
			format     : me.dateFormat,
			flex       : 1,
			submitValue: false
		}, me.dateConfig, null));
		me.items.push(me.dateField);

		me.timeField = Ext.create('Ext.form.field.Time', Ext.apply({
			format     : me.timeFormat,
			flex       : 1,
			submitValue: false
		}, me.timeConfig, null));
		me.items.push(me.timeField);

		for(var i = 0; i < me.items.length; i++) {
			me.items[i].on('focus', Ext.bind(me.onItemFocus, me));
			me.items[i].on('blur', Ext.bind(me.onItemBlur, me));
			me.items[i].on('specialkey', function(field, event) {
				var key = event.getKey(),
					tab = key == event.TAB;

				if(tab && me.focussedItem == me.dateField) {
					event.stopEvent();
					me.timeField.focus();
					return;
				}

				me.fireEvent('specialkey', field, event);
			});
		}

		if(me.layout == 'vbox') me.height = 44;

		me.callParent();

		// this dummy is necessary because Ext.Editor will not check whether an inputEl is present or not
		this.inputEl = {
			dom         : {},
			swallowEvent: function() {
			}
		};

		me.initField();
	},

	focus: function() {
		this.callParent();
		this.dateField.focus();
	},

	onItemFocus: function(item) {
		if(this.blurTask) this.blurTask.cancel();
		this.focussedItem = item;
	},

	onItemBlur: function(item) {
		var me = this;
		if(item != me.focussedItem) return;
		// 100ms to focus a new item that belongs to us, otherwise we will assume the user left the field
		me.blurTask = new Ext.util.DelayedTask(function() {
			me.fireEvent('blur', me);
		});
		me.blurTask.delay(100);
	},

	getValue: function() {
		var value = null,
			date = this.dateField.getSubmitValue(),
			time = this.timeField.getSubmitValue();

		if(date) {
			if(time) {
				var format = this.getFormat();
				value = Ext.Date.parse(date + ' ' + time, format);
			}
			else {
				value = this.dateField.getValue();
			}
		}
		return value;
	},

	getSubmitValue: function() {
		var value = this.getValue();
		return value ? Ext.Date.format(value, this.dateTimeFormat) : null;
	},

	setValue: function(value) {
		if(Ext.isString(value)) {
			value = Ext.Date.parse(value, this.dateTimeFormat);
		}
		this.dateField.setValue(value);
		this.timeField.setValue(value);
	},

	getFormat    : function() {
		return (this.dateField.submitFormat || this.dateField.format) + " " + (this.timeField.submitFormat || this.timeField.format);
	},

	// Bug? A field-mixin submits the data from getValue, not getSubmitValue
	getSubmitData: function() {
		var me = this,
			data = null;
		if(!me.disabled && me.submitValue && !me.isFileUpload()) {
			data = {};
			data[me.getName()] = '' + me.getSubmitValue();
		}
		return data;
	},

    setReadOnly:function(value){
        this.dateField.setReadOnly(value);
        this.timeField.setReadOnly(value);
    }
});

//eo file
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/31/11
 * Time: 3:24 PM
 */
Ext.define('App.classes.form.Panel', {
	extend   : 'Ext.form.Panel',
	alias    : 'widget.mitos.form',
	bodyStyle: 'padding: 10px;',
	autoWidth: true,
	border   : false
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 3/14/12
 * Time: 9:07 PM
 */
Ext.define('App.classes.grid.EventHistory',{
    extend: 'Ext.grid.Panel',
    alias : 'widget.mitos.eventhistorygrid',
    initComponent:function(){
        Ext.apply(this,{
            columns: [
                { header: i18n['date'],  dataIndex: 'date', width: 140, renderer: Ext.util.Format.dateRenderer('Y-m-d g:i:s a') },
                { header: i18n['user'],  dataIndex: 'user', width: 150 },
                { header: i18n['event'], dataIndex: 'event', flex: 1 }
            ]
        },null);

        this.callParent(arguments);
    }
});
/*

This file is part of Ext JS 4

Copyright (c) 2011 Sencha Inc

Contact:  http://www.sencha.com/contact

GNU General Public License Usage
This file may be used under the terms of the GNU General Public License version 3.0 as published by the Free Software Foundation and appearing in the file LICENSE included in the packaging of this file.  Please review the following information to ensure the GNU General Public License version 3.0 requirements will be met: http://www.gnu.org/copyleft/gpl.html.

If you are unsure which license is appropriate for your use, please contact the sales department at http://www.sencha.com/contact.

*/
/**
 * The Ext.grid.plugin.RowEditing plugin injects editing at a row level for a Grid. When editing begins,
 * a small floating dialog will be shown for the appropriate row. Each editable column will show a field
 * for editing. There is a button to save or cancel all changes for the edit.
 *
 * The field that will be used for the editor is defined at the
 * {@link Ext.grid.column.Column#editor editor}. The editor can be a field instance or a field configuration.
 * If an editor is not specified for a particular column then that column won't be editable and the value of
 * the column will be displayed.
 *
 * The editor may be shared for each column in the grid, or a different one may be specified for each column.
 * An appropriate field type should be chosen to match the data structure that it will be editing. For example,
 * to edit a date, it would be useful to specify {@link Ext.form.field.Date} as the editor.
 *
 *     @example
 *     Ext.create('Ext.data.Store', {
 *         storeId:'simpsonsStore',
 *         fields:['name', 'email', 'phone'],
 *         data: [
 *             {"name":"Lisa", "email":"lisa@simpsons.com", "phone":"555-111-1224"},
 *             {"name":"Bart", "email":"bart@simpsons.com", "phone":"555--222-1234"},
 *             {"name":"Homer", "email":"home@simpsons.com", "phone":"555-222-1244"},
 *             {"name":"Marge", "email":"marge@simpsons.com", "phone":"555-222-1254"}
 *         ]
 *     });
 *
 *     Ext.create('Ext.grid.Panel', {
 *         title: 'Simpsons',
 *         store: Ext.data.StoreManager.lookup('simpsonsStore'),
 *         columns: [
 *             {header: 'Name',  dataIndex: 'name', editor: 'textfield'},
 *             {header: 'Email', dataIndex: 'email', flex:1,
 *                 editor: {
 *                     xtype: 'textfield',
 *                     allowBlank: false
 *                 }
 *             },
 *             {header: 'Phone', dataIndex: 'phone'}
 *         ],
 *         selType: 'rowmodel',
 *         plugins: [
 *             Ext.create('Ext.grid.plugin.RowEditing', {
 *                 clicksToEdit: 1
 *             })
 *         ],
 *         height: 200,
 *         width: 400,
 *         renderTo: Ext.getBody()
 *     });
 */
Ext.define('App.classes.grid.RowFormEditing', {
    extend: 'Ext.grid.plugin.Editing',
    alias: 'plugin.rowformediting',

    requires: [
        'App.classes.grid.RowFormEditor'
    ],

    editStyle: 'row',

    /**
     * @cfg {Boolean} autoCancel
     * True to automatically cancel any pending changes when the row editor begins editing a new row.
     * False to force the user to explicitly cancel the pending changes. Defaults to true.
     */
    autoCancel: true,

    /**
     * @cfg {Number} clicksToMoveEditor
     * The number of clicks to move the row editor to a new row while it is visible and actively editing another row.
     * This will default to the same value as {@link Ext.grid.plugin.Editing#clicksToEdit clicksToEdit}.
     */

    /**
     * @cfg {Boolean} errorSummary
     * True to show a {@link Ext.tip.ToolTip tooltip} that summarizes all validation errors present
     * in the row editor. Set to false to prevent the tooltip from showing. Defaults to true.
     */
    errorSummary: true,

    /**
     * @event beforeedit
     * Fires before row editing is triggered.
     *
     * @param {Ext.grid.plugin.Editing} editor
     * @param {Object} e An edit event with the following properties:
     *
     * - grid - The grid this editor is on
     * - view - The grid view
     * - store - The grid store
     * - record - The record being edited
     * - row - The grid table row
     * - column - The grid {@link Ext.grid.column.Column Column} defining the column that initiated the edit
     * - rowIdx - The row index that is being edited
     * - colIdx - The column index that initiated the edit
     * - cancel - Set this to true to cancel the edit or return false from your handler.
     */
    
    /**
     * @event canceledit
     * Fires when the user has started editing a row but then cancelled the edit
     * @param {Object} grid The grid
     */
    
    /**
     * @event edit
     * Fires after a row is edited. Usage example:
     *
     *     grid.on('edit', function(editor, e) {
     *         // commit the changes right after editing finished
     *         e.record.commit();
     *     };
     *
     * @param {Ext.grid.plugin.Editing} editor
     * @param {Object} e An edit event with the following properties:
     *
     * - grid - The grid this editor is on
     * - view - The grid view
     * - store - The grid store
     * - record - The record being edited
     * - row - The grid table row
     * - column - The grid {@link Ext.grid.column.Column Column} defining the column that initiated the edit
     * - rowIdx - The row index that is being edited
     * - colIdx - The column index that initiated the edit
     */
    /**
     * @event validateedit
     * Fires after a cell is edited, but before the value is set in the record. Return false to cancel the change. The
     * edit event object has the following properties
     *
     * Usage example showing how to remove the red triangle (dirty record indicator) from some records (not all). By
     * observing the grid's validateedit event, it can be cancelled if the edit occurs on a targeted row (for example)
     * and then setting the field's new value in the Record directly:
     *
     *     grid.on('validateedit', function(editor, e) {
     *       var myTargetRow = 6;
     *
     *       if (e.rowIdx == myTargetRow) {
     *         e.cancel = true;
     *         e.record.data[e.field] = e.value;
     *       }
     *     });
     *
     * @param {Ext.grid.plugin.Editing} editor
     * @param {Object} e An edit event with the following properties:
     *
     * - grid - The grid this editor is on
     * - view - The grid view
     * - store - The grid store
     * - record - The record being edited
     * - row - The grid table row
     * - column - The grid {@link Ext.grid.column.Column Column} defining the column that initiated the edit
     * - rowIdx - The row index that is being edited
     * - colIdx - The column index that initiated the edit
     * - cancel - Set this to true to cancel the edit or return false from your handler.
     */

    constructor: function() {
        var me = this;
        me.callParent(arguments);

        if (!me.clicksToMoveEditor) {
            me.clicksToMoveEditor = me.clicksToEdit;
        }

        me.autoCancel = !!me.autoCancel;
    },

    init: function(grid) {
        this.callParent([grid]);
    },

    /**
     * @private
     * AbstractComponent calls destroy on all its plugins at destroy time.
     */
    destroy: function() {
        var me = this;
        Ext.destroy(me.editor);
        me.callParent(arguments);
    },

    /**
     * Starts editing the specified record, using the specified Column definition to define which field is being edited.
     * @param {Ext.data.Model} record The Store data record which backs the row to be edited.
     * @param {Ext.data.Model} columnHeader The Column object defining the column to be edited. @override
     */
    startEdit: function(record, columnHeader) {
        var me = this,
            editor = me.getEditor();

        if (me.callParent(arguments) === false) {
            return false;
        }

        // Fire off our editor
        if (editor.beforeEdit() !== false) {
            editor.startEdit(me.context.record, me.context.column);
        }
    },

    // private
    cancelEdit: function() {
        var me = this;

        if (me.editing) {
            me.getEditor().cancelEdit();
            me.callParent(arguments);
            
            me.fireEvent('canceledit', me.context);
        }
    },

    // private
    completeEdit: function() {
        var me = this;

        if (me.editing && me.validateEdit()) {
            me.editing = false;
            me.fireEvent('edit', me, me.context);
        }
    },

    completeRemove:function(){
        var me = this;

        if (me.editing) {
            me.getEditor().completeRemove();
            //me.callParent(arguments);

            me.fireEvent('completeremove', me, me.context);
        }

    },

    // private
    validateEdit: function() {
        var me             = this,
            editor         = me.editor,
            context        = me.context,
            record         = context.record,
            newValues      = {},
            originalValues = {},
            editors        = editor.getForm().getFields().items,
            e,
            eLen           = editors.length,
            name, item;

        for (e = 0; e < eLen; e++) {
            item = editors[e];
            name = item.name;

            newValues[name]      = item.getValue();
            originalValues[name] = record.get(name);
        }

        Ext.apply(context, {
            newValues      : newValues,
            originalValues : originalValues
        });

        return me.callParent(arguments) && me.getEditor().completeEdit();
    },

    // private
    getEditor: function() {
        var me = this;

        if (!me.editor) {
            me.editor = me.initEditor();
        }
        return me.editor;
    },

    // private
    initEditor: function() {
        var me       = this,
            grid     = me.grid,
            view     = me.view,
            headerCt = grid.headerCt,
            btns     = ['saveBtnText', 'cancelBtnText', 'errorsText', 'dirtyText'],
            b,
            bLen     = btns.length,
            cfg      = {
                autoCancel: me.autoCancel,
                errorSummary: me.errorSummary,
                fields: headerCt.getGridColumns(),
                hidden: true,

                // keep a reference..
                editingPlugin: me,
                renderTo: view.el
            },
            item;

        for (b = 0; b < bLen; b++) {
            item = btns[b];

            if (Ext.isDefined(me[item])) {
                cfg[item] = me[item];
            }
        }
        return Ext.create('App.classes.grid.RowFormEditor', cfg);
    },

    // private
    initEditTriggers: function() {
        var me = this,
            moveEditorEvent = me.clicksToMoveEditor === 1 ? 'click' : 'dblclick';

        me.callParent(arguments);

        if (me.clicksToMoveEditor !== me.clicksToEdit) {
            me.mon(me.view, 'cell' + moveEditorEvent, me.moveEditorByClick, me);
        }
    },

    addHeaderEvents: function(){
        var me = this;
        me.callParent();

        me.mon(me.grid.headerCt, {
            scope: me,
            columnresize: me.onColumnResize,
            columnhide: me.onColumnHide,
            columnshow: me.onColumnShow,
            columnmove: me.onColumnMove
        });
    },

    startEditByClick: function() {
        var me = this;
        if (!me.editing || me.clicksToMoveEditor === me.clicksToEdit) {
            me.callParent(arguments);
        }
    },

    moveEditorByClick: function() {
        var me = this;
        if (me.editing) {
            me.superclass.startEditByClick.apply(me, arguments);
        }
    },

    // private
    onColumnAdd: function(ct, column) {
        if (column.isHeader) {
            var me = this,
                editor;

            me.initFieldAccessors(column);
            editor = me.getEditor();

            if (editor && editor.onColumnAdd) {
                editor.onColumnAdd(column);
            }
        }
    },

    // private
    onColumnRemove: function(ct, column) {
        if (column.isHeader) {
            var me = this,
                editor = me.getEditor();

            if (editor && editor.onColumnRemove) {
                editor.onColumnRemove(column);
            }
            me.removeFieldAccessors(column);
        }
    },

    // private
    onColumnResize: function(ct, column, width) {
        if (column.isHeader) {
            var me = this,
                editor = me.getEditor();

            if (editor && editor.onColumnResize) {
                editor.onColumnResize(column, width);
            }
        }
    },

    // private
    onColumnHide: function(ct, column) {
        // no isHeader check here since its already a columnhide event.
        var me = this,
            editor = me.getEditor();

        if (editor && editor.onColumnHide) {
            editor.onColumnHide(column);
        }
    },

    // private
    onColumnShow: function(ct, column) {
        // no isHeader check here since its already a columnshow event.
        var me = this,
            editor = me.getEditor();

        if (editor && editor.onColumnShow) {
            editor.onColumnShow(column);
        }
    },

    // private
    onColumnMove: function(ct, column, fromIdx, toIdx) {
        // no isHeader check here since its already a columnmove event.
        var me = this,
            editor = me.getEditor();

        if (editor && editor.onColumnMove) {
            editor.onColumnMove(column, fromIdx, toIdx);
        }
    },

    // private
    setColumnField: function(column, field) {
        var me = this;
        me.callParent(arguments);
        me.getEditor().setField(column.field, column);
    }
});


/*

This file is part of Ext JS 4

Copyright (c) 2011 Sencha Inc

Contact:  http://www.sencha.com/contact

GNU General Public License Usage
This file may be used under the terms of the GNU General Public License version 3.0 as published by the Free Software Foundation and appearing in the file LICENSE included in the packaging of this file.  Please review the following information to ensure the GNU General Public License version 3.0 requirements will be met: http://www.gnu.org/copyleft/gpl.html.

If you are unsure which license is appropriate for your use, please contact the sales department at http://www.sencha.com/contact.

*/
// Currently has the following issues:
// - Does not handle postEditValue
// - Fields without editors need to sync with their values in Store
// - starting to edit another record while already editing and dirty should probably prevent it
// - aggregating validation messages
// - tabIndex is not managed bc we leave elements in dom, and simply move via positioning
// - layout issues when changing sizes/width while hidden (layout bug)

/**
 * @class Ext.grid.RowEditor
 * @extends Ext.form.Panel
 *
 * Internal utility class used to provide row editing functionality. For developers, they should use
 * the RowEditing plugin to use this functionality with a grid.
 *
 * @ignore
 */
Ext.define('App.classes.grid.RowFormEditor', {
    extend: 'Ext.form.Panel',
    requires: [
        'Ext.tip.ToolTip',
        'Ext.util.HashMap',
        'Ext.util.KeyNav'
    ],

    saveBtnText  : i18n['update'],
    cancelBtnText: i18n['cancel'],
    removeBtnText: i18n['remove'],
    errorsText: i18n['errors'],
    dirtyText: i18n['commit_cancel_your_changes'],
    lastScrollLeft: 0,
    lastScrollTop: 0,
    bodyPadding: 5,
    padding:'0 0 5 0',
    border: false,
    buttonAlign:'center',
    // Change the hideMode to offsets so that we get accurate measurements when
    // the roweditor is hidden for laying out things like a TriggerField.
    hideMode: 'offsets',

    initComponent: function() {
        var me = this,
            form, plugin;

        me.cls = Ext.baseCSSPrefix + 'grid-row-editor grid-row-form-editor';
        me.currRowH = null;
        plugin = me.editingPlugin;
        me.items = plugin.formItems;

        me.buttons = [{
            action: 'update',
            xtype: 'button',
            handler: plugin.completeEdit,
            scope: plugin,
            text: me.saveBtnText,
            disabled: !me.isValid,
            minWidth: Ext.panel.Panel.prototype.minButtonWidth
        },
        {
            xtype: 'button',
            handler: plugin.cancelEdit,
            scope: plugin,
            text: me.cancelBtnText,
            minWidth: Ext.panel.Panel.prototype.minButtonWidth
        }];
        if(plugin.enableRemove){
            me.buttons.push({
                xtype: 'button',
                handler: plugin.completeRemove,
                scope: plugin,
                text: me.removeBtnText,
                minWidth: Ext.panel.Panel.prototype.minButtonWidth
            });
        }

        me.callParent(arguments);
        form = me.getForm();
        me.setFields();
        form.trackResetOnLoad = true;
    },

    onFieldValueChange: function() {
        var me = this,
            form = me.getForm(),
            valid = form.isValid(), btn;
        if (me.errorSummary && me.isVisible()) {
            me[valid ? 'hideToolTip' : 'showToolTip']();
        }
        btn = me.query('button[action="update"]')[0];
        if (btn){
            btn.setDisabled(!valid);
        }
        me.isValid = valid;
    },

    afterRender: function() {
        var me = this,
            plugin = me.editingPlugin;

        me.callParent(arguments);
        me.mon(me.renderTo, 'scroll', me.onCtScroll, me, { buffer: 100 });

        // Prevent from bubbling click events to the grid view
        me.mon(me.el, {
            click: Ext.emptyFn,
            stopPropagation: true
        });

        me.el.swallowEvent([
            'keypress',
            'keydown'
        ]);

        me.keyNav = new Ext.util.KeyNav(me.el, {
            //enter: plugin.completeEdit,
            esc: plugin.onEscKey,
            scope: plugin
        });

        me.mon(plugin.view, {
            beforerefresh: me.onBeforeViewRefresh,
            refresh: me.onViewRefresh,
            scope: me
        });
    },

    onBeforeViewRefresh: function(view) {
        var me = this,
            viewDom = view.el.dom;

        if (me.el.dom.parentNode === viewDom) {
            viewDom.removeChild(me.el.dom);
        }
    },

    onViewRefresh: function(view) {
        var me = this,
            viewDom = view.el.dom,
            context = me.context,
            idx;

        viewDom.appendChild(me.el.dom);

        // Recover our row node after a view refresh
        if (context && (idx = context.store.indexOf(context.record)) >= 0) {
            context.row = view.getNode(idx);
            me.reposition();
            if (me.tooltip && me.tooltip.isVisible()) {
                me.tooltip.setTarget(context.row);
            }
        } else {
            me.editingPlugin.cancelEdit();
        }
    },

    onCtScroll: function(e, target) {
        var me = this,
            scrollTop  = target.scrollTop,
            scrollLeft = target.scrollLeft;

        if (scrollTop !== me.lastScrollTop) {
            me.lastScrollTop = scrollTop;
            if ((me.tooltip && me.tooltip.isVisible()) || me.hiddenTip) {
                me.repositionTip();
            }
        }
        if (scrollLeft !== me.lastScrollLeft) {
            me.lastScrollLeft = scrollLeft;
            me.reposition();
        }
    },

    reposition: function(animateConfig) {
        if(this.currRowH) this.currRow.setHeight(this.currRowH);

        var me = this,
            context = me.context,
            row = context && Ext.get(context.row),
            //btns = me.getFloatingButtons(),
            //btnEl = btns.el,
            grid = me.editingPlugin.grid,
            viewEl = grid.view.el,
            scroller = grid.verticalScroller,


            // always get data from ColumnModel as its what drives
            // the GridView's sizing
            mainBodyWidth = grid.headerCt.getFullWidth(),
            scrollerWidth = grid.getWidth(),

            // use the minimum as the columns may not fill up the entire grid
            // width
            width = Math.min(mainBodyWidth, scrollerWidth),
            scrollLeft = grid.view.el.dom.scrollLeft,
            //btnWidth = btns.getWidth(),
            //left = (width - btnWidth) / 2 + scrollLeft,
            y, rowH, newHeight,

            invalidateScroller = function() {
                if (scroller) {
                    scroller.invalidate();
                    btnEl.scrollIntoView(viewEl, false);
                }
                if (animateConfig && animateConfig.callback) {
                    animateConfig.callback.call(animateConfig.scope || me);
                }
            };

        // need to set both top/left
        if (row && Ext.isElement(row.dom)) {
            // Bring our row into view if necessary, so a row editor that's already
            // visible and animated to the row will appear smooth
            row.scrollIntoView(viewEl, false);

            // Get the y position of the row relative to its top-most static parent.
            // offsetTop will be relative to the table, and is incorrect
            // when mixed with certain grid features (e.g., grouping).
            y = row.getXY()[1] + 19;


            me.currRowH = row.getHeight();
            me.currRow = row;

            row.setHeight(me.getHeight() + 19);

            // IE doesn't set the height quite right.
            // This isn't a border-box issue, it even happens
            // in IE8 and IE7 quirks.
            // TODO: Test in IE9!
            if (Ext.isIE) {
                newHeight += 2;
            }

            if (animateConfig) {
                var animObj = {
                    to: {
                        y: y
                    },
                    duration: animateConfig.duration || 125,
                    listeners: {
                        afteranimate: function() {
                            invalidateScroller();
                            y = row.getXY()[1] + 19;
                            me.el.setY(y);
                        }
                    }
                };
                me.animate(animObj);
            } else {
                me.el.setY(y);
                invalidateScroller();
            }
        }
        if (me.getWidth() != mainBodyWidth) {
            me.setWidth(mainBodyWidth);
        }
        //btnEl.setLeft(left);
    },

    resizeEditor:function(){

        if(this.currRowH) this.currRow.setHeight(this.currRowH);

        var me = this,
            context = me.context,
            row = context && Ext.get(context.row),
            //btns = me.getFloatingButtons(),
            //btnEl = btns.el,
            grid = me.editingPlugin.grid,
            viewEl = grid.view.el,
            scroller = grid.verticalScroller,


            // always get data from ColumnModel as its what drives
            // the GridView's sizing
            mainBodyWidth = grid.headerCt.getFullWidth(),
            scrollerWidth = grid.getWidth(),

            // use the minimum as the columns may not fill up the entire grid
            // width
            width = Math.min(mainBodyWidth, scrollerWidth),
            scrollLeft = grid.view.el.dom.scrollLeft,
            //btnWidth = btns.getWidth(),
            //left = (width - btnWidth) / 2 + scrollLeft,
            y, rowH, newHeight;


        // need to set both top/left
        if (row && Ext.isElement(row.dom)) {
            // Bring our row into view if necessary, so a row editor that's already
            // visible and animated to the row will appear smooth
            row.scrollIntoView(viewEl, false);

            // Get the y position of the row relative to its top-most static parent.
            // offsetTop will be relative to the table, and is incorrect
            // when mixed with certain grid features (e.g., grouping).
            y = row.getXY()[1] + 19;


            me.currRowH = row.getHeight();
            me.currRow = row;

            row.setHeight(me.getHeight() + 19);

            // IE doesn't set the height quite right.
            // This isn't a border-box issue, it even happens
            // in IE8 and IE7 quirks.
            // TODO: Test in IE9!
            if (Ext.isIE) {
                newHeight += 2;
            }

        }
        if (me.getWidth() != mainBodyWidth) {
            me.setWidth(mainBodyWidth);
        }
    },

    getGridStores:function(){
        var me = this,
            grids = me.query('grid'),
            stores = [];
        for(var i=0; i < grids.length; i++){
            stores.push(grids[i].store);
        }
        return stores;
    },

    syncChildStoresChanges:function(){
        var me = this,
            stores = me.getGridStores();
        for(var i=0; i < stores.length; i++){
            stores[i].sync();
        }
    },

    rejectChildStoresChanges:function(){
        var me = this,
            stores = me.getGridStores();
        for(var i=0; i < stores.length; i++){
            stores[i].rejectChanges();
        }
    },

    getEditor: function(fieldInfo) {
        var me = this;

        if (Ext.isNumber(fieldInfo)) {
            // Query only form fields. This just future-proofs us in case we add
            // other components to RowEditor later on.  Don't want to mess with
            // indices.
            return me.query('>[isFormField]')[fieldInfo];
        } else if (fieldInfo instanceof Ext.grid.column.Column) {
            return fieldInfo.getEditor();
        }
        return false;
    },

    setFields: function(column) {
        var me = this,
            form = me.getForm(),
            fields = form.getFields().items,
            containers = me.query('container');
        for(var i=0; i < fields.length; i++){
            me.mon(fields[i], 'change', me.onFieldValueChange, me);
        }
        for(var k=0; k < containers.length; k++){
            me.mon(containers[k], 'resize', me.resizeEditor, me);
        }
    },

    loadRecord: function(record) {
        var me = this,
            form = me.getForm();
        form.loadRecord(record);
        if (form.isValid()) {
            me.hideToolTip();
        } else {
            me.showToolTip();
        }

        // render display fields so they honor the column renderer/template
        Ext.Array.forEach(me.query('>displayfield'), function(field) {
            me.renderColumnData(field, record);
        }, me);
    },

    renderColumnData: function(field, record) {
        var me = this,
            grid = me.editingPlugin.grid,
            headerCt = grid.headerCt,
            view = grid.view,
            store = view.store,
            form = me.getForm();

        form.loadRecord(record);
    },

    beforeEdit: function() {
        var me = this;

        me.getGridStores();

        if (me.isVisible() && !me.autoCancel && me.isDirty()) {
            me.showToolTip();
            return false;
        }
    },

    /**
     * Start editing the specified grid at the specified position.
     * @param {Ext.data.Model} record The Store data record which backs the row to be edited.
     * @param {Ext.data.Model} columnHeader The Column object defining the column to be edited.
     */
    startEdit: function(record, columnHeader) {
        var me = this,
            grid = me.editingPlugin.grid,
            view = grid.getView(),
            store = grid.store,
            context = me.context = Ext.apply(me.editingPlugin.context, {
                view: grid.getView(),
                store: store
            });

        // make sure our row is selected before editing
        context.grid.getSelectionModel().select(record);

        // Reload the record data
        me.loadRecord(record);

        if (!me.isVisible()) {
            me.show();
            me.focusContextCell();
        } else {
            me.reposition({
                callback: this.focusContextCell
            });
        }
    },

    // Focus the cell on start edit based upon the current context
    focusContextCell: function() {
        var field = this.getEditor(this.context.colIdx);
        if (field && field.focus) {
            field.focus();
        }
    },

    cancelEdit: function() {
        var me = this,
            form = me.getForm();
        me.rejectChildStoresChanges();
        me.hide();
        form.clearInvalid();
        form.reset();
    },

    completeEdit: function() {
        var me = this,
            form = me.getForm();

        if (!form.isValid()) {
            return;
        }
        me.syncChildStoresChanges();
        form.updateRecord(me.context.record);
        me.hide();
        return true;
    },

    completeRemove:function(){
        var me = this,
            form = me.getForm(),
            view = me.context.view,
            store = me.context.store,
            record = view.getSelectionModel().getLastSelected();

        store.remove(record);
        me.hide();
        form.clearInvalid();
        form.reset();
        me.editingPlugin.fireEvent('afterremove', me.context);
    },

    onShow: function() {
        var me = this;
        me.callParent(arguments);
        me.reposition();
    },

    onHide: function() {
        var me = this;
        me.callParent(arguments);
        me.hideToolTip();
        me.invalidateScroller();
        if (me.context) {
            me.context.view.focus();
            me.context = null;
        }
        me.currRow.setHeight(me.currRowH);
        me.currRowH = null;
    },

    isDirty: function() {
        var me = this,
            form = me.getForm();
        return form.isDirty();
    },

    getToolTip: function() {
        var me = this,
            tip;

        if (!me.tooltip) {
            me.tooltip = Ext.createWidget('tooltip', {
                cls: Ext.baseCSSPrefix + 'grid-row-editor-errors',
                title: me.errorsText,
                autoHide: false,
                closable: true,
                closeAction: 'disable',
                anchor: 'left'
            });
        }
        return me.tooltip;
    },

    hideToolTip: function() {
        var me = this,
            tip = me.getToolTip();
        if (tip.rendered) {
            tip.disable();
        }
        me.hiddenTip = false;
    },

    showToolTip: function() {
        var me = this,
            tip = me.getToolTip(),
            context = me.context,
            row = Ext.get(context.row),
            viewEl = context.grid.view.el;

        tip.setTarget(row);
        tip.showAt([-10000, -10000]);
        tip.body.update(me.getErrors());
        tip.mouseOffset = [viewEl.getWidth() - row.getWidth() + me.lastScrollLeft + 15, 0];
        me.repositionTip();
        tip.doLayout();
        tip.enable();
    },

    repositionTip: function() {
        var me = this,
            tip = me.getToolTip(),
            context = me.context,
            row = Ext.get(context.row),
            viewEl = context.grid.view.el,
            viewHeight = viewEl.getHeight(),
            viewTop = me.lastScrollTop,
            viewBottom = viewTop + viewHeight,
            rowHeight = row.getHeight(),
            rowTop = row.dom.offsetTop,
            rowBottom = rowTop + rowHeight;

        if (rowBottom > viewTop && rowTop < viewBottom) {
            tip.show();
            me.hiddenTip = false;
        } else {
            tip.hide();
            me.hiddenTip = true;
        }
    },

    getErrors: function() {
        var me = this,
            dirtyText = !me.autoCancel && me.isDirty() ? me.dirtyText + '<br />' : '',
            errors = [];

        Ext.Array.forEach(me.query('>[isFormField]'), function(field) {
            errors = errors.concat(
                Ext.Array.map(field.getErrors(), function(e) {
                    return '<li>' + e + '</li>';
                })
            );
        }, me);

        return dirtyText + '<ul>' + errors.join('') + '</ul>';
    },

    invalidateScroller: function() {
        var me = this,
            context = me.context,
            scroller = context.grid.verticalScroller;

        if (scroller) {
            scroller.invalidate();
        }
    }
});

Ext.define('App.classes.combo.ActiveFacilities', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.activefacilitiescombo',
	initComponent: function() {
		var me = this;

		Ext.define('ActiveFacilitiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'int' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getActiveFacilities
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ActiveFacilitiesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.ActiveInsurances', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.activeinsurancescombo',
	initComponent: function() {
		var me = this;

		// *************************************************************************************
		// Structure, data for Insurance Payer Types
		// AJAX -> component_data.ejs.php
		// *************************************************************************************

        Ext.define('ActiveInsurancesComboModel', {
      			extend: 'Ext.data.Model',
      			fields: [
      				{name: 'option_name', type: 'string' },
      				{name: 'option_value', type: 'string' }
      			],
      			proxy : {
      				type: 'direct',
      				api : {
      					read: CombosData.getActiveInsurances
      				}
      			}
      		});

      		me.store = Ext.create('Ext.data.Store', {
      			model   : 'ActiveInsurancesComboModel'
      		});

		Ext.apply(this, {
			editable    : false,
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	}
});
Ext.define('App.classes.combo.Allergies', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiescombo',
	initComponent: function() {
		var me = this;

		Ext.define('AllergiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int' },
				{name: 'allergy_name' },
				{name: 'allergy_type', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getAllergiesByType
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'AllergiesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'allergy_name',
			valueField  : 'allergy_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesAbdominal', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiesabdominalcombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergiesabdominalModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 82
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergiesabdominalModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesLocal', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergieslocalcombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergieslocalModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 81
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergieslocalModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesLocation', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergieslocationcombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergieslocationModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 79
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergieslocationModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesSeverity', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiesseveritycombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergiesseverityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 84
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergiesseverityModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesSkin', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiesskincombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergiesskinModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 80
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergiesskinModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesSystemic', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiessystemiccombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergiessystemicModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 83
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergiessystemicModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.AllergiesTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiestypescombo',
	initComponent: function() {
		var me = this;

		Ext.define('AllergiesTypesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'allergy_type', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getAllergieTypes
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'AllergiesTypesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			//queryMode   : 'local',
			displayField: 'allergy_type',
			valueField  : 'allergy_type',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Authorizations', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.authorizationscombo',
	initComponent: function() {
		var me = this;

		Ext.define('AuthorizationsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getAuthorizations
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'AuthorizationsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);

		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.BillingFacilities', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.billingfacilitiescombo',
	initComponent: function() {
		var me = this;

		Ext.define('BillingFacilitiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'int' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getBillingFacilities
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'BillingFacilitiesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.CalendarCategories', {
	extend      : 'Ext.form.ComboBox',
	alias       : 'widget.mitos.calcategoriescombobox',
	editable    : false,
	displayField: 'catname',
	valueField  : 'catid',
	emptyText   : i18n['select'],

	initComponent: function() {
		var me = this;

		Ext.define('CalendarCategoriesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'catid', type: 'int'},
				{name: 'catname', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getCalendarCategories
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'CalendarCategoriesModel',
			autoLoad: true
		});


		Ext.apply(this, {
			store: me.store
		}, null);
		me.callParent();
	}
}); 
Ext.define('App.classes.combo.CalendarStatus', {
	extend: 'Ext.form.ComboBox',
	alias : 'widget.mitos.calstatuscombobox',
	name  : 'status',

	initComponent: function() {
		var me = this;

		Ext.define('CalendarStatusModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 30
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'CalendarStatusModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
}); 
Ext.define('App.classes.combo.CodesTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.codestypescombo',
	initComponent: function() {
		var me = this;

		Ext.define('CodesTypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 56
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'CodesTypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.EncounterPriority', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.encounterprioritycombo',
	initComponent: function() {
		var me = this;

		Ext.define('EncounterPriorityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 94
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'EncounterPriorityModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['priority'],
			store       : me.store,
			listConfig  : {
				getInnerTpl: function() {
					return '<span class="{option_name}">{option_name}</span></div>';
				}
			}
		}, null);

		me.on('change', function(cmb ,newValue){
			var bgColor, color;
			if(newValue == 'Minimal'){
				bgColor = '#008000';
				color = '#ffffff';
			}else if(newValue == 'Delayed'){
				bgColor = '#ffff00';
				color = '#000000';
			}else if(newValue == 'Immediate'){
				bgColor = '#ff0000';
				color = '#ffffff';
			}else if(newValue == 'Expectant'){
				bgColor = '#808080';
				color = '#ffffff';
			}else if(newValue == 'Deceased'){
				bgColor = '#000000';
				color = '#ffffff';
			}

			this.inputEl.setStyle({
				'background-color':bgColor,
				'background-image':'none',
				'color':color
			})
		}, me);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Facilities', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.facilitiescombo',
	initComponent: function() {
		var me = this;

		Ext.define('FacilitiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getFacilities
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'FacilitiesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.FloorPlanAreas', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.floorplanareascombo',
	initComponent: function() {
		var me = this;

		Ext.define('FloorPlanAreasModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'title', type: 'string' },
				{name: 'id', type: 'int' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getFloorPlanAreas
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'FloorPlanAreasModel',
			autoLoad:true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode: 'local',
			displayField: 'title',
			valueField  : 'id',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.FollowUp', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.followupcombo',
	initComponent: function() {
		var me = this;

		Ext.define('FollowUpModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 90
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'FollowUpModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.InsurancePayerType', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.insurancepayertypecombo',
	initComponent: function() {
		var me = this;

		// *************************************************************************************
		// Structure, data for Insurance Payer Types
		// AJAX -> component_data.ejs.php
		// *************************************************************************************
		me.store = Ext.create('Ext.data.Store', {
			fields: ['id', 'name'],
			data  : [
				{"id": "1", "name": i18n['all']},
				{"id": "16", "name": i18n['other_hcfa']},
				{"id": "MB", "name": i18n['medicare_part_b']},
				{"id": "MC", "name": i18n['medicaid']},
				{"id": "CH", "name": i18n['champusva']},
				{"id": "CH", "name": i18n['champus']},
				{"id": "BL", "name": i18n['blue_cross_blue_shield']},
				{"id": "16", "name": i18n['feca']},
				{"id": "09", "name": i18n['self_pay']},
				{"id": "10", "name": i18n['central_certification']},
				{"id": "11", "name": i18n['other_nonfederal_programs']},
				{"id": "12", "name": i18n['ppo']},
				{"id": "13", "name": i18n['pos']},
				{"id": "14", "name": i18n['epo']},
				{"id": "15", "name": i18n['indemnity_insurance']},
				{"id": "16", "name": i18n['hmo']},
				{"id": "AM", "name": i18n['automobile_medical']},
				{"id": "CI", "name": i18n['commercial_insurance']},
				{"id": "DS", "name": i18n['disability']},
				{"id": "HM", "name": i18n['health_maintenance_organization']},
				{"id": "LI", "name": i18n['liability']},
				{"id": "LM", "name": i18n['liability_medical']},
				{"id": "OF", "name": i18n['other_federal_program']},
				{"id": "TV", "name": i18n['title_v']},
				{"id": "VA", "name": i18n['veterans_administration_plan']},
				{"id": "WC", "name": i18n['workers_compensation_health_plan']},
				{"id": "ZZ", "name": i18n['mutually_defined']}
			]
		});

		Ext.apply(this, {
			name        : 'freeb_type',
			editable    : false,
			displayField: 'name',
			valueField  : 'id',
			queryMode   : 'local',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 6/27/11
 * Time: 8:43 AM
 * To change this template use File | Settings | File Templates.
 *
 *
 * @namespace Patient.patientLiveSearch
 */
Ext.define('App.classes.combo.LabObservations', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.labobservationscombo',
	initComponent: function() {
		var me = this;

		Ext.define('labObservationsComboModel', {
			extend: 'Ext.data.Model',
			fields: [
              		{name: 'label' },
              		{name: 'name' },
              		{name: 'unit' },
              		{name: 'range_start' },
              		{name: 'range_end' },
              		{name: 'threshold' },
              		{name: 'notes' }
			],
			proxy : {
				type  : 'direct',
				api   : {
					read: Services.getAllLabObservations
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'labObservationsComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'label',
			valueField  : 'id',
			emptyText   : i18n['select_existing_observation'],
            editable    : false,
            width: 810,
			listConfig  : {
				getInnerTpl: function() {
					return '<div>' +
                        '<span style="width:200px;display:inline-block;"><span style="font-weight:bold;">' + i18n['Label'] + ':</span> {label},</span>' +
                        '<span style="width:90px;display:inline-block;"><span style="font-weight:bold;">' + i18n['unit'] + ':</span> {unit},</span>' +
                        '<span style="width:150px;display:inline-block;"><span style="font-weight:bold;">' + i18n['range_start'] + ':</span> {range_start},</span>' +
                        '<span style="width:130px;display:inline-block;"><span style="font-weight:bold;">' + i18n['range_end'] + ':</span> {range_end},</span>' +
                        '<span style="width:100px;display:inline-block;"><span style="font-weight:bold;">' + i18n['threshold'] + ':</span> {threshold}</span>' +
                        '</div>';
				}
			}
		}, null);

		me.callParent();
	}

});
Ext.define('App.classes.combo.LabsTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.labstypescombo',
	initComponent: function() {
		var me = this;

		Ext.define('LabsTypesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'code_text_short' },
				{name: 'parent_name', type: 'string' },
				{name: 'loinc_name', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: Services.getActiveLaboratoryTypes
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'LabsTypesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			//queryMode   : 'local',
			displayField: 'loinc_name',
			valueField  : 'loinc_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.Languages', 
{
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.languagescombo',
	initComponent: function() 
	{
		var me = this;

		Ext.define('LanguagesComboModel', 
		{
			extend: 'Ext.data.Model',
			fields: 
			[
				{ name: 'code', type: 'string' },
				{ name: 'description', type: 'string' }
			],
			proxy : 
			{
				type: 'direct',
				api :  
				{
					read: i18nRouter.getAvailableLanguages
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', 
		{
			model   : 'LanguagesComboModel',
			autoLoad: true
		});

		Ext.apply(this, 
		{
			editable    : false,
			queryMode   : 'local',
			valueField  : 'code',
			displayField: 'description',
			store       : me.store
		}, null);
		
		me.callParent();
	}
});

Ext.define('App.classes.combo.Lists', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.listscombo',
	width        : 250,
	iconCls      : 'icoListOptions',
	initComponent: function() {
		var me = this;

		Ext.define('ListComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'title', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getLists
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ListComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'title',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.MedicalIssues', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.medicalissuescombo',
	initComponent: function() {
		var me = this;

		Ext.define('MedicalIssuesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 75
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MedicalIssuesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Medications', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.medicationscombo',
	initComponent: function() {
		var me = this;

		Ext.define('MedicationsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 74
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MedicationsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.MsgNoteType', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.msgnotetypecombo',
	initComponent: function() {
		var me = this;

		Ext.define('MsgNoteTypeModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 28
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MsgNoteTypeModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.MsgStatus', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.msgstatuscombo',
	initComponent: function() {
		var me = this;

		Ext.define('MsgStatusModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 45
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MsgStatusModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.classes.combo.Occurrence', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.occurrencecombo',
	initComponent: function() {
		var me = this;

		Ext.define('OccurrenceModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 26
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'OccurrenceModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Outcome', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.outcomecombo',
	initComponent: function() {
		var me = this;

		Ext.define('OutcomeModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 27
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'OutcomeModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Outcome2', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.outcome2combo',
	initComponent: function() {
		var me = this;

		Ext.define('Outcome2model', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 74
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'Outcome2model',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.PayingEntity', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.payingentitycombo',
	initComponent: function() {
		var me = this;

		Ext.define('PayingEntityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 54
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PayingEntityModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});

Ext.define('App.classes.combo.PaymentCategory', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.paymentcategorycombo',
	initComponent: function() {
		var me = this;

		Ext.define('PaymentCategoryModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 49
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PaymentCategoryModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.PaymentMethod', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.paymentmethodcombo',
	initComponent: function() {
		var me = this;

		Ext.define('PaymentMethodModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 51
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PaymentMethodModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Pharmacies', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.pharmaciescombo',
	initComponent: function() {
		var me = this;

		Ext.define('PharmaciesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name' },
				{name: 'option_value' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getActivePharmacies
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PharmaciesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			//queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.posCodes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.poscodescombo',
	initComponent: function() {
		var me = this;

		Ext.define('PosCodesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'code', type: 'string' },
				{name: 'title', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getPosCodes
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PosCodesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'code',
			displayField: 'title',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.classes.combo.PrescriptionHowTo', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.prescriptionhowto',
	initComponent: function() {
		var me = this;

		Ext.define('PrescriptionHowTomodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 88
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PrescriptionHowTomodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.PrescriptionOften', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.prescriptionoften',
	initComponent: function() {
		var me = this;

		Ext.define('PrescriptionOftenmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 86
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PrescriptionOftenmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.PrescriptionTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.prescriptiontypes',
	initComponent: function() {
		var me = this;

		Ext.define('PrescriptionTypesmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 89
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PrescriptionTypesmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.PrescriptionWhen', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.prescriptionwhen',
	initComponent: function() {
		var me = this;

		Ext.define('PrescriptionWhenmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 87
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PrescriptionWhenmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.PreventiveCareTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.preventivecaretypescombo',
	initComponent: function() {
		var me = this;

		Ext.define('PreventiveCareTypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 78
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PreventiveCareTypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/*
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 3/21/12
 * Time: 11:24 PM
 */
Ext.define('App.classes.combo.ProceduresBodySites', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.proceduresbodysitescombo',
	initComponent: function() {
		var me = this;

		Ext.define('ProceduresBodySitesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 34
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ProceduresBodySitesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Providers', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.providerscombo',
	initComponent: function() {
		var me = this;

		Ext.define('Providersmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'string' },
				{name: 'name', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: User.getProviders
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'Providersmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'name',
			valueField  : 'id',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Roles', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.rolescombo',
	initComponent: function() {
		var me = this;

		Ext.define('RolesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'role_name', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getRoles
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'RolesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'role_name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Sex', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.sexcombo',
	initComponent: function() {
		var me = this;

		Ext.define('Sexmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 19
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'Sexmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.SmokingStatus', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.smokingstatuscombo',
	initComponent: function() {
		var me = this;

		Ext.define('smokingstatusModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 58
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'smokingstatusModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Surgery', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.surgerycombo',
	initComponent: function() {
		var me = this;

		Ext.define('SurgeryModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 76
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'SurgeryModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.TaxId', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.taxidcombo',
	initComponent: function() {
		var me = this;

		Ext.define('TaxIdsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_id', type: 'string' },
				{name: 'title', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getTaxIds
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TaxIdsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'title',
			valueField  : 'option_id',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.classes.combo.Templates', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.templatescombo',
	initComponent: function() {
		var me = this;

		Ext.define('TemplatesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'title', type: 'string' },
				{name: 'body'}
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getTemplatesTypes
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TemplatesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			//queryMode   : 'local',
			displayField: 'title',
			valueField  : 'title',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.Themes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.themescombo',
	initComponent: function() {
		var me = this;

		Ext.define('ThemesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'name', type: 'string' },
				{ name: 'value', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getThemes
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ThemesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'value',
			displayField: 'name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	}
});
Ext.define('App.classes.combo.Time', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.timecombo',
	initComponent: function() {
		var me = this;

		Ext.define('Timemodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 77
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'Timemodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Titles', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.titlescombo',
	initComponent: function() {
		var me = this;

		Ext.define('TitlesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 22
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TitlesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.TransmitMethod', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.transmitmethodcombo',
	initComponent: function() {
		var me = this;


		me.storeTrsmit = Ext.create('Ext.data.Store', {
			fields: ['id', 'name'],
			data  : [
				{"id": "1", "name": "Print"},
				{"id": "2", "name": "Email"},
				{"id": "3", "name": "Email"}
			]
		});

		Ext.apply(this, {
			name        : 'transmit_method',
			editable    : false,
			displayField: 'name',
			valueField  : 'id',
			queryMode   : 'local',
			emptyText   : i18n['select'],
			store       : me.storeTrsmit
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.classes.combo.Types', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.typescombobox',
	initComponent: function() {
		var me = this;

		// *************************************************************************************
		// Structure, data for Types
		// AJAX -> component_data.ejs.php
		// *************************************************************************************


		Ext.define('TypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 32
				}

			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			name        : 'abook_type',
			editable    : false,
			displayField: 'option_name',
			valueField  : 'option_value',
			queryMode   : 'local',
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.Units', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.unitscombo',
	initComponent: function() {
		var me = this;

		Ext.define('UnitsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 38
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'UnitsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			//editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			//emptyText   : 'Select',
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/29/11
 * Time: 4:45 PM
 */
Ext.define('App.classes.combo.Users', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.userscombo',
	initComponent: function() {
		var me = this;

		Ext.define('UsersComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int' },
				{name: 'name', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getUsers
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'UsersComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'name',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.classes.combo.YesNoNa', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.yesnonacombo',
	initComponent: function() {
		var me = this;

		Ext.define('yesnonaModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 93
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'yesnonaModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.classes.combo.YesNo', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.yesnocombo',
	initComponent: function() {
		var me = this;

		Ext.define('yesnoModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 23
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'yesnoModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : i18n['select'],
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 10/31/11
 * Time: 3:21 PM
 */
Ext.define('App.classes.window.Window', {
	extend       : 'Ext.window.Window',
	autoHeight   : true,
	modal        : true,
	border       : true,
	autoScroll   : true,
	resizable    : false,
	closeAction  : 'hide',
	initComponent: function() {
		this.callParent(arguments);
	},

	updateTitle: function(pageTitle, readOnly) {
		this.setTitle(pageTitle + (readOnly ? '[ Read Only ]' : ''));
	},

	setReadOnly: function() {
		var forms = this.query('form'),
			readOnly = app.patient.readOnly;
		for(var j = 0; j < forms.length; j++) {
			var form = forms[j], items;
			if(form.readOnly != readOnly){
				form.readOnly = readOnly;
				items = form.getForm().getFields().items;
				for(var k = 0; k < items.length; k++) {
					items[k].setReadOnly(readOnly);
				}
			}
		}
		return readOnly;
	},

	setButtonsDisabled:function(buttons){
		var disable = app.patient.readOnly;
		for(var i = 0; i < buttons.length; i++) {
			var btn = buttons[i];
			if(btn.disabled != disable){
				btn.disabled = disable;
				btn.setDisabled(disable)
			}
		}
	},

	checkIfCurrPatient: function() {
		return app.getCurrPatient();
	},

	patientInfoAlert: function() {
		var patient = app.getCurrPatient();

		Ext.Msg.alert(i18n['status'], i18n['patient'] + ': ' + patient.name + ' (' + patient.pid + ')');
	},

	currPatientError: function() {
		Ext.Msg.show({
			title  : 'Oops! ' + i18n['no_patient_selected'],
			msg    : i18n['select_patient_patient_live_search'],
			scope  : this,
			buttons: Ext.Msg.OK,
			icon   : Ext.Msg.ERROR,
			fn     : function() {
				this.goBack();
			}
		});
	},

	getFormItems: function(formPanel, formToRender, callback) {
		formPanel.removeAll();

		FormLayoutEngine.getFields({formToRender: formToRender}, function(provider, response) {
			var items = eval(response.result);
			formPanel.add(items);
			if(typeof callback == 'function') {
				callback(formPanel, items, true);
			}
		});
	},

	boolRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		}
		return val;
	},

	alertRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		}
		return val;
	},

	warnRenderer:function(val, metaData, record){
        var toolTip = record.data.warningMsg ? ' data-qtip="'+record.data.warningMsg+'" ' : '';
        if(val == '1' || val == true || val == 'true') {
            return '<img src="resources/images/icons/icoImportant.png" ' + toolTip + ' />';
        }
    },

	onExpandRemoveMask: function(cmb) {
		cmb.picker.loadMask.destroy()
	},

	strToLowerUnderscores: function(str) {
		return str.toLowerCase().replace(/ /gi, "_");
	},
	getCurrPatient: function() {
		return app.getCurrPatient();
	},

	getApp: function() {
		return app.getApp();
	},

	msg: function(title, format) {
		app.msg(title, format)
	},

	passwordVerificationWin: function(callback) {
		var msg = Ext.Msg.prompt(i18n['password_verification'], i18n['please_enter_your_password'] + ':', function(btn, password) {
			callback(btn, password);
		});
		var f = msg.textField.getInputId();
		document.getElementById(f).type = 'password';
		return msg;
	}
});
/**
 * A plugin that provides the ability to visually indicate to the user that a node is disabled.
 *
 * Notes:
 * - Compatible with Ext 4.x
 * - If the view already defines a getRowClass function, the original function will be called before this plugin.
 *
 var tree = Ext.create('Ext.tree.Panel',{
 plugins: [{
 ptype: 'nodedisabled'
 }]
 ...
 });
 *
 * @class Ext.ux.tree.plugin.NodeDisabled
 * @extends Ext.AbstractPlugin
 * @author Phil Crawford
 * @license Licensed under the terms of the Open Source <a href="http://www.gnu.org/licenses/lgpl.html">LGPL 3.0 license</a>.  Commercial use is permitted to the extent that the code/component(s) do NOT become part of another Open Source or Commercially licensed development library or toolkit without explicit permission.
 * @version 0.1 (July 1, 2011)
 * @constructor
 * @param {Object} config
 */
Ext.define('App.classes.NodeDisabled', {
    alias:'plugin.nodedisabled', extend:'Ext.AbstractPlugin'


    //configurables
    /**
     * @cfg {String} disabledCls
     * The CSS class applied when the {@link Ext.data.Model} of the node has a 'disabled' field with a true value.
     */, disabledCls:'tree-node-disabled'
    /**
     * @cfg {Boolean} preventSelection
     * True to prevent selection of a node that is disabled. Default true.
     */, preventSelection:true

    /**
     * @cfg {Boolean} preventChecking
     * True to prevent checking of a node that is disabled. Default true.
     */, preventChecking:true

    //properties


    /**
     * @private
     * @param {Ext.tree.Panel} tree
     */, init:function (tree) {
        var me = this
            , view = tree.getView()
            , origFn
            , origScope;

        me.callParent(arguments);

        origFn = view.getRowClass;
        if (origFn) {
            origScope = view.scope || me;
            Ext.apply(view, {
                getRowClass:function () {
                    var v1, v2;
                    v1 = origFn.apply(origScope, arguments) || '';
                    v2 = me.getRowClass.apply(me, arguments) || '';
                    return (v1 && v2) ? v1 + ' ' + v2 : v1 + v2;
                }
            }, null);
        } else {
            Ext.apply(view, {
                getRowClass:Ext.Function.bind(me.getRowClass, me)
            }, null);
        }

        if (me.preventSelection) {
            tree.getSelectionModel().on('beforeselect', me.onBeforeNodeSelect, me);
        }

        if (me.preventChecking) {
            tree.on('checkchange', me.checkchange, me);
        }
    } // eof init


    /**
     * Returns a properly typed result.
     * @return {Ext.tree.Panel}
     */, getCmp:function () {
        return this.callParent(arguments);
    } //eof getCmp

    /**
     * @private
     * @param {Ext.data.Model} record
     * @param {Number} index
     * @param {Object} rowParams
     * @param {Ext.data.Store} ds
     * @return {String}
     */, getRowClass:function (record, index, rowParams, ds) {
        return record.get('disabled') ? this.disabledCls : '';
    }//eof getRowClass

    /**
     * @private
     * @param {Ext.selection.TreeModel} sm
     * @param {Ext.data.Model} node
     * @return {Boolean}
     */, onBeforeNodeSelect:function (sm, node) {
        if (node.get('disabled')) {
            return false;
        }
    }//eof onBeforeNodeSelect

    /**
     * @event checkchange
     * Fires when a node with a checkbox's checked property changes
     * @param {Ext.data.Model} node The node who's checked property was changed
     * @param {Boolean} checked The node's new checked state
     */, checkchange:function (node, checked) {
        if (node.get('disabled')) {
            node.set('checked', !checked);
        }
    }//eof checkchange

});//eo class

//end of file
//******************************************************************************
// ofice_notes.ejs.php
// office Notes Page
// v0.0.1
// 
// Author: Ernest Rodriguez
// Modified:
// 
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.search.PatientSearch', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelPatientSearch',
	pageTitle    : i18n['advance_patient_search'],
	pageLayout   : 'border',
	uses         : [
		'App.classes.GridPanel'
	],
	initComponent: function() {
		var me = this;


		me.form = Ext.create('Ext.form.FormPanel', {
			region     : 'north',
			height     : 200,
			bodyPadding: 10,
			margin     : '0 0 3 0',
			buttonAlign: 'left',
			items      : [
				{
					xtype     : 'fieldcontainer',
					fieldLabel: i18n['name'],
					layout    : 'hbox',
					defaults  : { margin: '0 5 0 0' },
					items     : [
						{
							xtype    : 'textfield',
							emptyText: i18n['first_name'],
							name     : 'fname'
						},
						{
							xtype    : 'textfield',
							emptyText: i18n['middle_name'],
							name     : 'mname'
						},
						{
							xtype    : 'textfield',
							emptyText: i18n['last_name'],
							name     : 'lname'
						}
					]
				}
			],

			buttons: [
				{
					text   : i18n['search'],
					iconCls: 'save',
					handler: function() {

					}
				},
				'-',
				{
					text   : i18n['reset'],
					iconCls: 'save',
					tooltip: i18n['hide_selected_office_note'],
					handler: function() {

					}
				}
			]
		});
		me.grid = Ext.create('App.classes.GridPanel', {
			region   : 'center',
			//store    : me.store,
			columns  : [
				{ header: 'id', sortable: false, dataIndex: 'id', hidden: true},
				{ width: 150, header: i18n['date'], sortable: true, dataIndex: 'date', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s') },
				{ width: 150, header: i18n['user'], sortable: true, dataIndex: 'user' },
				{ flex: 1, header: i18n['note'], sortable: true, dataIndex: 'body' }

			],
			tbar     : Ext.create('Ext.PagingToolbar', {
				store      : me.store,
				displayInfo: true,
				emptyMsg   : i18n['no_office_notes_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {})
			})
		}); // END GRID
		me.pageBody = [ me.form, me.grid ];
		me.callParent(arguments);
	}, // end of initComponent
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive     : function(callback) {
		callback(true);
	}
}); //ens oNotesPage class
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.patient.windows.Medical', {
	extend       : 'App.classes.window.Window',
	title        : i18n['medical_window'],
	id           : 'MedicalWindow',
	layout       : 'card',
	closeAction  : 'hide',
	height       : 750,
	width        : 1200,
	bodyStyle    : 'background-color:#fff',
	modal        : true,
	defaults     : {
		margin: 5
	},
	requires     : [ 'App.view.patient.LaboratoryResults' ],
	pid          : null,
	initComponent: function() {

		var me = this;


		me.patientImmuListStore = Ext.create('App.store.patient.PatientImmunization', {
			groupField: 'immunization_name',
			sorters   : ['immunization_name', 'administered_date'],
			listeners : {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync  : true
		});
		me.patientAllergiesListStore = Ext.create('App.store.patient.Allergies', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientMedicalIssuesStore = Ext.create('App.store.patient.MedicalIssues', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientSurgeryStore = Ext.create('App.store.patient.Surgery', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientDentalStore = Ext.create('App.store.patient.Dental', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientMedicationsStore = Ext.create('App.store.patient.Medications', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.labPanelsStore = Ext.create('App.store.patient.LaboratoryTypes', {
			autoSync: true
		});

		me.items = [
			{
				xtype   : 'grid',
				action  : 'patientImmuListGrid',
				itemId  : 'patientImmuListGrid',
				store   : me.patientImmuListStore,
				features: Ext.create('Ext.grid.feature.Grouping', {
					groupHeaderTpl   : i18n['immunization'] + ': {name} ({rows.length} Item{[values.rows.length > 1 ? "s" : ""]})',
					hideGroupedHeader: true
				}),
				columns : [
					{
						header   : i18n['immunization_name'],
						width    : 100,
						dataIndex: 'immunization_name'
					},
					{
						xtype    : 'datecolumn',
						header   : 'Date',
						format   : 'Y-m-d',
						width    : 100,
						dataIndex: 'administered_date'
					},
					{
						header   : i18n['lot_number'],
						width    : 100,
						dataIndex: 'lot_number'
					},
					{
						header   : 'Notes',
						flex     : 1,
						dataIndex: 'note'
					}
				],

				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [

						{

							title : 'general',
							xtype : 'container',
							layout: 'vbox',
							items : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 3 0', xtype: 'textfield'},
									items   : [

										{
											xtype          : 'immunizationlivesearch',
											fieldLabel     : i18n['name'],
											hideLabel      : false,
											allowBlank     : false,
											itemId         : 'immunization_name',
											name           : 'immunization_name',
											enableKeyEvents: true,
											action         : 'immunizations',
											width          : 570,
											listeners      : {
												scope : me,
												select: me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'immunization_id',
											action: 'idField'
										},
										{
											fieldLabel: i18n['administrator'],
											name      : 'administered_by',
											width     : 295,
											labelWidth: 160

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 3 0', xtype: 'textfield' },
									items   : [
										{
											fieldLabel: i18n['lot_number'],
											xtype     : 'textfield',
											width     : 300,
											name      : 'lot_number'

										},
										{

											xtype     : 'numberfield',
											fieldLabel: i18n['dosis_number'],
											width     : 260,
											name      : 'dosis'
										},

										{
											fieldLabel: i18n['info_statement_given'],
											width     : 295,
											labelWidth: 160,
											xtype     : 'datefield',
											format    : 'Y-m-d',
											name      : 'education_date'
										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 3 0', xtype: 'textfield' },
									items   : [

										{
											fieldLabel: i18n['notes'],
											xtype     : 'textfield',
											width     : 300,
											name      : 'note'

										},
										{
											fieldLabel: i18n['manufacturer'],
											xtype     : 'textfield',
											width     : 260,

											name: 'manufacturer'

										},

										{
											fieldLabel: i18n['date_administered'],
											xtype     : 'datefield',
											width     : 295,
											labelWidth: 160,
											format    : 'Y-m-d',
											name      : 'administered_date'
										}

									]

								}

							]

						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_immunizations',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},

			{
				/**
				 * Allergies Card panel
				 */
				xtype  : 'grid',
				action : 'patientAllergiesListGrid',
				store  : me.patientAllergiesListStore,
				columns: [
					{
						header   : i18n['type'],
						width    : 100,
						dataIndex: 'allergy_type'
					},
					{
						header   : i18n['name'],
						width    : 100,
						dataIndex: 'allergy'
					},
					{
						header   : i18n['location'],
						width    : 100,
						dataIndex: 'location'
					},
					{
						header   : i18n['severity'],
						flex     : 1,
						dataIndex: 'severity'
					},
					{
						text     : i18n['active'],
						width    : 55,
						dataIndex: 'alert',
						renderer : me.boolRenderer
					}
				],
				plugins: me.rowEditingAllergies = Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [

						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'mitos.allergiestypescombo',
											fieldLabel     : i18n['type'],
											name           : 'allergy_type',
											action         : 'allergy_type',
											allowBlank     : false,
											width          : 225,
											labelWidth     : 70,
											enableKeyEvents: true,
											listeners      : {
												scope   : me,
												'select': me.onAllergyTypeSelect
											}
										},
										{
											xtype     : 'mitos.allergieslocationcombo',
											fieldLabel: i18n['location'],
											name      : 'location',
											action    : 'location',
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope   : me,
												'select': me.onLocationSelect
											}

										},
										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											format    : 'Y-m-d',
											name      : 'begin_date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'mitos.allergiescombo',
											fieldLabel     : i18n['allergy'],
											action         : 'allergie_name',
											name           : 'allergy',
											enableKeyEvents: true,
											disabled       : true,
											width          : 225,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect,
												change  : me.disableFieldLogic
											}
										},
										{
											xtype          : 'medicationlivetsearch',
											fieldLabel     : i18n['allergy'],
											hideLabel      : false,
											action         : 'drug_name',
											name           : 'allergy',
											hidden         : true,
											disabled       : true,
											enableKeyEvents: true,
											width          : 225,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect,
												change  : me.disableFieldLogic
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'allergy_id',
											action: 'idField'
										},
										{
											xtype     : 'mitos.allergiesabdominalcombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											xtype     : 'mitos.allergieslocalcombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											hidden    : true,
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											xtype     : 'mitos.allergiesskincombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											hidden    : true,
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											xtype     : 'mitos.allergiessystemiccombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											hidden    : true,
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											format    : 'Y-m-d',
											name      : 'end_date'
										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype     : 'mitos.allergiesseveritycombo',
											fieldLabel: i18n['severity'],
											name      : 'severity',
											width     : 225,
											labelWidth: 70

										}


									]
								}
							]
						}
					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_allergies',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Active Problem Card panel
				 */

				xtype  : 'grid',
				action : 'patientMedicalListGrid',
				store  : me.patientMedicalIssuesStore,
				columns: [

					{
						header   : i18n['problem'],
						flex     : 1,
						dataIndex: 'code_text'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['begin_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'begin_date'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['end_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'end_date'
					}

				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,

					formItems: [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'liveicdxsearch',
											fieldLabel     : i18n['problem'],
											name           : 'code_text',
											allowBlank     : false,
											hideLabel      : false,
											itemId         : 'medicalissues',
											action         : 'medicalissues',
											enableKeyEvents: true,
											width          : 510,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'code',
											action: 'idField'
										},


										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'begin_date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											fieldLabel: i18n['ocurrence'],
											width     : 250,
											labelWidth: 70,
											xtype     : 'mitos.occurrencecombo',
											name      : 'ocurrence'

										},

										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 250,
											labelWidth: 70,
											name      : 'outcome'

										},
										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'end_date'

										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											xtype     : 'textfield',
											width     : 250,
											labelWidth: 70,
											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										}

									]
								}
							]
						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_active_problems',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Surgery Card panel
				 */

				xtype  : 'grid',
				action : 'patientSurgeryListGrid',
				store  : me.patientSurgeryStore,
				columns: [
					{
						header   : i18n['surgery'],
						width    : 100,
						flex     : 1,
						dataIndex: 'surgery'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'date'
					}

				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											fieldLabel     : i18n['surgery'],
											name           : 'surgery',
											hideLabel      : false,
											allowBlank     : false,
											width          : 510,
											labelWidth     : 70,
											xtype          : 'surgerieslivetsearch',
											itemId         : 'surgery',
											action         : 'surgery',
											enableKeyEvents: true,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'surgery_id',
											action: 'idField'
										},
										{
											fieldLabel: i18n['date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											fieldLabel: i18n['notes'],
											xtype     : 'textfield',
											width     : 510,
											labelWidth: 70,
											name      : 'notes'

										},
										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 200,
											labelWidth: 80,
											name      : 'outcome'

										}


									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype     : 'textfield',
											width     : 260,
											labelWidth: 70,

											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										}

									]
								}
							]
						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_surgery',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Dental Card panel
				 */

				xtype  : 'grid',
				action : 'patientDentalListGrid',
				store  : me.patientDentalStore,
				columns: [
					{
						header   : i18n['title'],
						width    : 100,
						dataIndex: 'title'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['begin_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'begin_date'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['end_date'],
						flex     : 1,
						format   : 'Y-m-d',
						dataIndex: 'end_date'
					}
				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{   xtype     : 'textfield',
											width     : 225,
											labelWidth: 70,
											fieldLabel: i18n['title'],
											action    : 'dental',
											name      : 'title'
										},
//                                        {
//   		                                    xtype:'textfield',
//   		                                    hidden:true,
//   		                                    name:'immunization_id',
//   		                                    action:'idField'
//   	                                    },
										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'begin_date'

										},
										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 250,
											labelWidth: 70,
											name      : 'outcome'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											xtype     : 'textfield',
											width     : 225,
											labelWidth: 70,
											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										},

										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'end_date'

										},
										{
											fieldLabel: i18n['ocurrence'],
											xtype     : 'mitos.occurrencecombo',
											width     : 250,
											labelWidth: 70,
											name      : 'ocurrence'

										}

									]

								}
							]
						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_dental',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Medications panel
				 */

				xtype  : 'grid',
				action : 'patientMedicationsListGrid',
				store  : me.patientMedicationsStore,
				columns: [
					{
						header   : i18n['medication'],
						flex     : 1,
						dataIndex: 'medication'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['begin_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'begin_date'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['end_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'end_date'
					}
				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,

					formItems: [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'medicationlivetsearch',
											fieldLabel     : i18n['medication'],
											hideLabel      : false,
											itemId         : 'medication',
											name           : 'medication',
											action         : 'medication',
											enableKeyEvents: true,
											width          : 520,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'medication_id',
											action: 'idField'
										},

										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'begin_date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 250,
											labelWidth: 70,
											name      : 'outcome'
										},
										{
											xtype     : 'textfield',
											width     : 260,
											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										},
										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'end_date'
										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											fieldLabel: i18n['ocurrence'],
											width     : 250,
											labelWidth: 70,
											xtype     : 'mitos.occurrencecombo',
											name      : 'ocurrence'

										}

									]
								}
							]
						}
					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_medications',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Lab panel
				 */
				xtype : 'container',
				action: 'patientLabs',
				layout: 'border',
				items : [
					{
						xtype     : 'panel',
						region    : 'north',
						layout    : 'border',
						bodyBorder: false,
						border    : false,
						height    : 350,
						split     : true,
						items     : [
							{
								xtype    : 'grid',
								region   : 'west',
								width    : 290,
								split    : true,
								store    : me.labPanelsStore,
								columns  : [
									{
										header   : i18n['laboratories'],
										dataIndex: 'label',
										flex     : 1
									}
								],
								listeners: {
									scope          : me,
									itemclick      : me.onLabPanelSelected,
									selectionchange: me.onLabPanelSelectionChange
								}
							},
							{
								xtype : 'panel',
								action: 'labPreviewPanel',
								title : i18n['laboratory_preview'],
								region: 'center',
								items : [
									me.uploadWin = Ext.create('Ext.window.Window', {
										draggable  : false,
										closable   : false,
										closeAction: 'hide',
										items      : [
											{
												xtype      : 'form',
												bodyPadding: 10,
												width      : 400,
												items      : [
													{
														xtype     : 'filefield',
														name      : 'filePath',
														buttonText: i18n['select_a_file'] + '...',
														anchor    : '100%'
													}
												],
												api        : {
													submit: DocumentHandler.uploadDocument
												}
											}
										],
										buttons    : [
											{
												text   : i18n['cancel'],
												handler: function() {
													me.uploadWin.close();
												}
											},
											{
												text   : i18n['upload'],
												scope  : me,
												handler: me.onLabUpload
											}
										]
									})
								]
							}
						],
						tbar      : [
							'->',
							{
								text: i18n['scan']
							},
							'-',
							{
								text    : i18n['upload'],
								disabled: true,
								action  : 'uploadBtn',
								scope   : me,
								handler : me.onLabUploadWind
							}
						]
					},
					{
						xtype : 'container',
						region: 'center',
						layout: 'border',
						split : true,
						items : [
							{
								xtype      : 'form',
								title      : i18n['laboratory_entry_form'],
								region     : 'west',
								width      : 290,
								split      : true,
								bodyPadding: 5,
								autoScroll : true,
								bbar       : [
									'->',
									{
										text   : i18n['reset'],
										scope  : me,
										handler: me.onLabResultsReset
									},
									'-',
									{
										text   : i18n['sign'],
										scope  : me,
										handler: me.onLabResultsSign
									},
									'-',
									{
										text   : i18n['save'],
										scope  : me,
										handler: me.onLabResultsSave
									}
								]
							},
							{
								xtype : 'panel',
								region: 'center',
								height: 300,
								split : true,
								items : [
									{
										xtype    : 'lalboratoryresultsdataview',
										action   : 'lalboratoryresultsdataview',
										store    : Ext.create('App.store.patient.PatientLabsResults'),
										listeners: {
											scope    : me,
											itemclick: me.onLabResultClick
										}
									}
								]
							}
						]
					}
				]
			}
		];

		me.dockedItems = [
			{
				xtype: 'toolbar',
				items: [
					{

						text        : i18n['immunization'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						pressed     : true,
						itemId      : 'immunization',
						action      : 'immunization',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['allergies'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'allergies',
						action      : 'allergies',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['active_problems'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'issues',
						action      : 'issues',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['surgeries'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'surgery',
						action      : 'surgery',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['dental'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'dental',
						action      : 'dental',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['medications'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'medications',
						action      : 'medications',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['laboratories'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'laboratories',
						action      : 'laboratories',
						scope       : me,
						handler     : me.cardSwitch
					},
					'->',
					{
						text   : i18n['add_new'],
						action : 'AddRecord',
						scope  : me,
						handler: me.onAddItem
					}
				]
			}
		];
		me.listeners = {
			scope: me,
			show : me.onMedicalWinShow,
			close : me.onMedicalWinClose
		};
		me.callParent(arguments);
	},

	//*******************************************************

	onLabPanelSelected: function(grid, model) {
		var me = this,
			formPanel = me.query('[action="patientLabs"]')[0].down('form'),
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			fields = model.data.fields;

		me.currLabPanelId = model.data.id;
		me.removeLabDocument();
		formPanel.removeAll();

		formPanel.add({
			xtype : 'textfield',
			name  : 'id',
			hidden: true
		});
		for(var i = 0; i < fields.length; i++) {
			formPanel.add({
				xtype     : 'fieldcontainer',
				layout    : 'hbox',
				margin    : 0,
				anchor    : '100%',
				fieldLabel: fields[i].code_text_short || fields[i].loinc_name,
				labelWidth: 130,
				items     : [
					{
						xtype     : 'textfield',
						name      : fields[i].loinc_number,
						flex      : 1,
						allowBlank: fields[i].required_in_panel != 'R'
					},
					{
						xtype: 'mitos.unitscombo',
						value: fields[i].default_unit,
						name : fields[i].loinc_number + '_unit',
						width: 90
					}
				]
			});
		}

		store.load({params: {parent_id: model.data.id}});
	},

	onLabPanelSelectionChange: function(model, record) {
		this.query('[action="uploadBtn"]')[0].setDisabled(record.length == 0);
	},

	onLabUploadWind: function() {
		var me = this,
			previewPanel = me.query('[action="labPreviewPanel"]')[0];
		me.uploadWin.show();
		me.uploadWin.alignTo(previewPanel.el.dom, 'tr-tr', [-5, 30])
	},

	onLabUpload: function(btn) {
		var me = this,
            formPanel = me.uploadWin.down('form'),
			form = formPanel.getForm(),
			win = btn.up('window');

		if(form.isValid()) {
            formPanel.el.mask(i18n['uploading_laboratory'] + '...');
			form.submit({
				//waitMsg: i18n['uploading_laboratory'] + '...',
				params : {
					pid    : app.patient.pid,
					docType: 'laboratory',
					eid : app.patient.eid
				},
				success: function(fp, o) {
                    formPanel.el.unmask();
                    say(o.result);
					win.close();
					me.getLabDocument(o.result.doc.url);
					me.addNewLabResults(o.result.doc.id);
				},
				failure: function(fp, o) {
                    formPanel.el.unmask();
                    say(o.result);
					win.close();
				}
			});
		}
	},

	onLabResultClick: function(view, model) {
		var me = this,
			form = me.query('[action="patientLabs"]')[0].down('form').getForm();

		if(me.currDocUrl != model.data.document_url) {
			form.reset();
			model.data.data.id = model.data.id;
			form.setValues(model.data.data);
			me.getLabDocument(model.data.document_url);
			me.currDocUrl = model.data.document_url;
		}

	},

	onLabResultsSign: function() {
		var me = this,
			form = me.query('[action="patientLabs"]')[0].down('form').getForm(),
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			values = form.getValues(),
			record = dataView.getSelectionModel().getLastSelected();

		if(form.isValid()) {
			if(values.id) {
				me.passwordVerificationWin(function(btn, password) {
					if(btn == 'ok') {
						User.verifyUserPass(password, function(provider, response) {
							if(response.result) {
								say(record);
								Medical.signPatientLabsResultById(record.data.id, function(provider, response) {
									store.load({params: {parent_id: me.currLabPanelId}});
								});
							} else {
								Ext.Msg.show({
									title  : 'Oops!',
									msg    : i18n['incorrect_password'],
									//buttons:Ext.Msg.OKCANCEL,
									buttons: Ext.Msg.OK,
									icon   : Ext.Msg.ERROR,
									fn     : function(btn) {
										if(btn == 'ok') {
											//me.onLabResultsSign();
										}
									}
								});
							}
						});
					}
				});
			} else {
				Ext.Msg.show({
					title  : 'Oops!',
					msg    : i18n['nothing_to_sign'],
					//buttons:Ext.Msg.OKCANCEL,
					buttons: Ext.Msg.OK,
					icon   : Ext.Msg.ERROR,
					fn     : function(btn) {
						if(btn == 'ok') {
							//me.onLabResultsSign();
						}
					}
				});
			}

		}
	},

	onLabResultsSave: function(btn) {
		var me = this,
			form = btn.up('form').getForm(),
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			values = form.getValues(),
			record = dataView.getSelectionModel().getLastSelected();

		if(form.isValid()) {
			Medical.updatePatientLabsResult(values, function() {
				store.load({params: {parent_id: record.data.parent_id}});
				form.reset();
			});
		}
	},


	addNewLabResults: function(docId) {
		var me = this,
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			params = {
				parent_id  : me.currLabPanelId,
				document_id: docId
			};
		Medical.addPatientLabsResult(params, function(provider, response) {
			store.load({params: {parent_id: me.currLabPanelId}});

		});
	},

	onReviewed: function(btn) {
		var me = this,
			BtnId = btn.itemId,
			params = {
				eid : app.patient.eid,
				area: BtnId
			};

		Medical.reviewMedicalWindowEncounter(params, function(provider, response) {
			me.msg('Sweet!', i18n['succefully_reviewed']);
		});
	},

	onLabResultsReset: function(btn) {
		var form = btn.up('form').getForm();
		form.reset();
	},

	getLabDocument: function(src) {
		var panel = this.query('[action="labPreviewPanel"]')[0];
		panel.remove(this.doc);
		panel.add(this.doc = Ext.create('App.classes.ManagedIframe', {src: src}));
	},

	removeLabDocument: function(src) {
		var panel = this.query('[action="labPreviewPanel"]')[0];
		panel.remove(this.doc);
	},

	//*********************************************************

	onLiveSearchSelect: function(combo, model) {

		var me = this,
			field, field2, id;
		if(combo.action == 'immunizations') {
			id = model[0].data.id;
			field = combo.up('container').query('[action="idField"]')[0];
			field.setValue(id);
		}
		else if(combo.id == 'allergie_name' || combo.id == 'drug_name') {
			id = model[0].data.id;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field.setValue(id);

		}
		else if(combo.action == 'medicalissues') {
			id = model[0].data.code;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field2 = combo.up('fieldcontainer').query('[action="medicalissues"]')[0];
			field.setValue(id);
			field2.setValue(model[0].data.code_text);
		}
		else if(combo.action == 'surgery') {
			id = model[0].data.id;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field.setValue(id);

		}
		else if(combo.action == 'medication') {
			id = model[0].data.id;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field.setValue(id);
		}

	},

	onAddItem       : function() {

		var me = this, grid = this.getLayout().getActiveItem(), store = grid.store,
			params;

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			created_uid: app.user.id,
			pid        : app.patient.pid,
			create_date: new Date(),
			eid        : app.patient.eid,
			begin_date : new Date()

		});
		grid.editingPlugin.startEdit(0, 0);
		if(app.patient.eid != null) {
			if(grid.action == 'patientImmuListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_immunizations'
				};
			} else if(grid.action == 'patientAllergiesListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_allergies'
				};
			} else if(grid.action == 'patientMedicalListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_active_problems'
				};
			} else if(grid.action == 'patientSurgeryListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_surgery'
				};
			} else if(grid.action == 'patientDentalListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_dental'
				};
			} else if(grid.action == 'patientMedicationsListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_medications'
				};
			}
			Medical.reviewMedicalWindowEncounter(params);
		}


	},
	hideall         : function(combo, skinCombo, localCombo, abdominalCombo, systemicCombo) {

		skinCombo.hide(true);
		skinCombo.setDisabled(true);
		skinCombo.reset();
		localCombo.hide(true);
		localCombo.setDisabled(true);
		localCombo.reset();
		abdominalCombo.hide(true);
		abdominalCombo.setDisabled(true);
		abdominalCombo.reset();
		systemicCombo.hide(true);
		systemicCombo.setDisabled(true);
		systemicCombo.reset();

	},
	onLocationSelect: function(combo, record) {
		var me = this,
			skinCombo = combo.up('form').getForm().findField('skinreaction'),
			localCombo = combo.up('form').getForm().findField('localreaction'),
			abdominalCombo = combo.up('form').getForm().findField('abdominalreaction'),
			systemicCombo = combo.up('form').getForm().findField('systemicreaction'),
			value = combo.getValue();

		me.hideall(combo, skinCombo, localCombo, abdominalCombo, systemicCombo);
		if(value == 'Skin') {
			skinCombo.show(true);
			skinCombo.setDisabled(false);
		} else if(value == 'Local') {
			localCombo.show(true);
			localCombo.setDisabled(false);
		} else if(value == 'Abdominal') {
			abdominalCombo.show(true);
			abdominalCombo.setDisabled(false);
		} else if(value == 'Systemic / Anaphylactic') {
			systemicCombo.show(true);
			systemicCombo.setDisabled(false);

		}
	},


	disableFieldLogic: function(field, newValue) {
		field.setDisabled((newValue == '' || newValue == null));
	},

	onAllergyTypeSelect: function(combo, record) {
		var me = this,
			allergyCombo = combo.up('form').getForm().findField('allergie_name'),
			drugLiveSearch = combo.up('form').getForm().findField('drug_name');

		if(record[0].data.allergy_type == 'Drug'){
			allergyCombo.hide(true);
			allergyCombo.setDisabled(true);
			allergyCombo.reset();
			drugLiveSearch.show(true);
			drugLiveSearch.setDisabled(false);
		}
		else if(record[0].data.allergy_type == '' || record[0].data.allergy_type == null) {
			allergyCombo.setDisabled(true);
			drugLiveSearch.hide(true);
			drugLiveSearch.setDisabled(true);
			allergyCombo.show(true);
		}
		else {
			drugLiveSearch.hide(true);
			drugLiveSearch.setDisabled(true);
			allergyCombo.show(true);
			allergyCombo.setDisabled(false);
			allergyCombo.reset();
			allergyCombo.store.load({params: {allergy_type: record[0].data.allergy_type}})
		}


	},
	setDefaults: function(options) {
		var data;

		if(options.update) {
			data = options.update[0].data;
			data.updated_uid = app.user.id;
		} else if(options.create) {

		}
	},

	cardSwitch: function(btn) {
		var me = this,
			layout = me.getLayout(),
			addBtn = me.down('toolbar').query('[action="AddRecord"]')[0],
			p = app.patient,
			title;

		me.pid = p.pid;
		addBtn.show();

		if(btn.action == 'immunization') {
			layout.setActiveItem(0);
			title = 'Immunizations';

		} else if(btn.action == 'allergies') {
			layout.setActiveItem(1);
			title = 'Allergies';

		} else if(btn.action == 'issues') {
			layout.setActiveItem(2);
			title = 'Medical Issues';

		} else if(btn.action == 'surgery') {
			layout.setActiveItem(3);
			title = 'Surgeries';

		} else if(btn.action == 'dental') {
			layout.setActiveItem(4);
			title = 'Dentals';

		} else if(btn.action == 'medications') {
			layout.setActiveItem(5);
			title = 'Medications';

		} else if(btn.action == 'laboratories') {
			layout.setActiveItem(6);
			title = 'Laboratories';
			addBtn.hide();
		}

		me.setTitle(p.name + ' (' + title + ') ' + (p.readOnly ? '-  <span style="color:red">[Read Mode]</span>' : ''));

	},

	onMedicalWinShow: function() {
		var me = this,
			reviewBts = me.query('button[action="review"]'),
			p = app.patient;

		me.pid = p.pid;
		me.setTitle(p.name + (p.readOnly ? ' <span style="color:red">[' + i18n['read_mode'] + ']</span>' : ''));
		me.setReadOnly(app.patient.readOnly);
		for(var i = 0; i < reviewBts.length; i++) {
			reviewBts[i].setVisible((app.patient.eid != null));
		}
		me.labPanelsStore.load();
		me.patientImmuListStore.load({params: {pid: app.patient.pid}});
		me.patientAllergiesListStore.load({params: {pid: app.patient.pid}});
		me.patientMedicalIssuesStore.load({params: {pid: app.patient.pid}});
		me.patientSurgeryStore.load({params: {pid: app.patient.pid}});
		me.patientDentalStore.load({params: {pid: app.patient.pid}});
		me.patientMedicationsStore.load({params: {pid: app.patient.pid}});

    },

    onMedicalWinClose:function(){
        if(app.currCardCmp.id == 'panelSummary'){

            app.currCardCmp.loadStores();

        }

    }


});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 10:46 PM
 */
Ext.define('App.view.patient.windows.Charts', {
    extend       : 'Ext.window.Window',
    requires     : [
        'App.store.patient.Vitals'
    ],
    title        : i18n['vector_charts'],
    layout       : 'card',
    closeAction  : 'hide',
    modal        : true,
    width        : window.innerWidth - 200,
    height       : window.innerHeight - 200,
    maximizable  : true,
    //maximized  : true,
    initComponent: function() {
        var me = this;

        me.vitalsStore = Ext.create('App.store.patient.Vitals');
        me.graphStore = Ext.create('App.store.patient.VectorGraph');

        me.WeightForAgeInfStore = Ext.create('App.store.patient.charts.WeightForAgeInf');
        me.LengthForAgeInfStore = Ext.create('App.store.patient.charts.LengthForAgeInf');
        me.WeightForRecumbentInfStore = Ext.create('App.store.patient.charts.WeightForRecumbentInf');
        me.HeadCircumferenceInfStore = Ext.create('App.store.patient.charts.HeadCircumferenceInf');
        me.WeightForStatureStore = Ext.create('App.store.patient.charts.WeightForStature');
        me.WeightForAgeStore = Ext.create('App.store.patient.charts.WeightForAge');
        me.StatureForAgeStore = Ext.create('App.store.patient.charts.StatureForAge');
        me.BMIForAgeStore = Ext.create('App.store.patient.charts.BMIForAge');

        me.tbar = ['->', {
            text        : i18n['bp_pulse_temp'],
            action      : 'bpPulseTemp',
            pressed     : true,
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['weight_for_age'],
            action      : 'WeightForAgeInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['length_for_age'],
            action      : 'LengthForAgeInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['weight_for_recumbent'],
            action      : 'WeightForRecumbentInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['head_circumference'],
            action      : 'HeadCircumferenceInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['weight_for_stature'],
            action      : 'WeightForStature',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['weight_for_age'],
            action      : 'WeightForAge',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['stature_for_age'],
            action      : 'StatureForAge',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : i18n['bmi_for_age'],
            action      : 'BMIForAge',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-'];

        me.tools = [
            {
                type   : 'print',
                tooltip: i18n['print_chart'],
                handler: function() {
                    console.log(this.up('window').down('chart'));
                }
            }
        ];

        me.items = [
            Ext.create('App.view.patient.charts.BPPulseTemp', {
                store: me.vitalsStore
            }),

            me.WeightForAgeInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['weight_for_age_0_3_mos'],
                xTitle  : i18n['weight_kg'],
                yTitle  : i18n['age_months'],
                xMinimum: 1,
                xMaximum: 19,
                yMinimum: 0,
                yMaximum: 36,
                store   : me.WeightForAgeInfStore
            }),

            me.LengthForAgeInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['length_for_age_0_3_mos'],
                xTitle  : i18n['length_cm'],
                yTitle  : i18n['age_months'],
                xMinimum: 40,
                xMaximum: 110,
                yMinimum: 0,
                yMaximum: 36,
                store   : me.LengthForAgeInfStore
            }),

            me.WeightForRecumbentInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['weight_for_recumbent_0_3_mos'],
                xTitle  : i18n['weight_kg'],
                yTitle  : i18n['length_cm'],
                xMinimum: 1,
                xMaximum: 20,
                yMinimum: 45,
                yMaximum: 103.5,
                store   : me.WeightForRecumbentInfStore
            }),

            me.HeadCircumferenceInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['head_circumference_0_3_mos'],
                xTitle  : i18n['circumference_cm'],
                yTitle  : i18n['age_months'],
                xMinimum: 30,
                xMaximum: 55,
                yMinimum: 0,
                yMaximum: 36,
                store   : me.HeadCircumferenceInfStore
            }),

            me.WeightForStature = Ext.create('App.view.patient.charts.HeightForStature', {
                store: me.WeightForStatureStore
            }),

            me.WeightForAge = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['weight_for_age_2_20_years'],
                xTitle  : i18n['weight_kg'],
                yTitle  : i18n['age_years'],
                xMinimum: 10,
                xMaximum: 110,
                yMinimum: 2,
                yMaximum: 20,
                store   : me.WeightForAgeStore
            }),

            me.StatureForAge = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['stature_for_age_2_20_years'],
                xTitle  : i18n['stature_cm'],
                yTitle  : i18n['age_years'],
                xMinimum: 60,
                xMaximum: 200,
                yMinimum: 2,
                yMaximum: 20,
                store   : me.StatureForAgeStore
            }),

            me.BMIForAge = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : i18n['bmi_for_age_2_20_years'],
                xTitle  : i18n['bmi_kg'],
                yTitle  : i18n['age_years'],
                xMinimum: 10,
                xMaximum: 35,
                yMinimum: 2,
                yMaximum: 20,
                store   : me.BMIForAgeStore
            })
        ];

        me.listeners = {
            scope: me,
            show : me.onWinShow
        };

        me.callParent(arguments);
    },

    onWinShow: function() {
        var me = this, layout = me.getLayout(), btns = me.down('toolbar').items.items, btn;
        layout.setActiveItem(0);
        me.vitalsStore.load({params: {pid: app.patient.pid}});
        for(var i = 0; i < btns.length; i++) {
            btn = btns[i];
            if(btn.type == 'button' && (
                btn.action == 'WeightForAgeInf' || btn.action == 'LengthForAgeInf' || btn.action == 'WeightForRecumbentInf' || btn.action == 'HeadCircumferenceInf')) {
                btn.setVisible(app.patient.age.DMY.years < 2);
            } else if(btn.type == 'button') {
                btn.setVisible(app.patient.age.DMY.years >= 2);
            }
        }
    },

    onChartSwitch: function(btn) {
        var me = this, layout = me.getLayout(), card, chart, x, y;
        if(btn.action == 'bpPulseTemp') {
            layout.setActiveItem(0);
        } else if(btn.action == 'WeightForAgeInf') {
            layout.setActiveItem(1);
            me.WeightForAgeInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'LengthForAgeInf') {
            layout.setActiveItem(2);
            me.LengthForAgeInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'WeightForRecumbentInf') {
            layout.setActiveItem(3);
            me.WeightForRecumbentInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'HeadCircumferenceInf') {
            layout.setActiveItem(4);
            me.HeadCircumferenceInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'WeightForStature') {
            layout.setActiveItem(5);
            me.WeightForStatureStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'WeightForAge') {
            layout.setActiveItem(6);
            me.WeightForAgeStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'StatureForAge') {
            layout.setActiveItem(7);
            me.StatureForAgeStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'BMIForAge') {
            layout.setActiveItem(8);
            me.BMIForAgeStore.load({params: {pid: app.patient.pid}});
        }
    }
});

/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.patient.windows.PreventiveCare', {
	extend       : 'App.classes.window.Window',
	title        : i18n['preventive_care_window'],
	closeAction  : 'hide',
    height       : 750,
   	width        : 1200,
	bodyStyle    : 'background-color:#fff',
	modal        : true,
    layout       : 'fit',
	defaults     : {
		margin: 5
	},
	initComponent: function() {
		var me = this;

		me.patientPreventiveCare = Ext.create('App.store.patient.PreventiveCare', {
			groupField: 'type',
			sorters   : ['type'],
			autoSync  : true
		});

		me.grid  = Ext.create('App.classes.GridPanel', {
            store      : me.patientPreventiveCare,
			features: Ext.create('Ext.grid.feature.Grouping', {
					groupHeaderTpl   : i18n['type'] + ': {name} ({rows.length} ' + i18n['item'] + '{[values.rows.length > 1 ? "s" : ""]})',
					hideGroupedHeader: true,
				    startCollapsed: true
			}),
            columns    : [
	            {
		            header     : i18n['type'],
		            dataIndex: 'type',
		            width:200
	            },
                {
	                header     : i18n['description'],
                    dataIndex: 'description',
	                width: 200
                },
                {
	                header     : i18n['reason'],
	                dataIndex: 'reason',
	                flex:1

                }


            ],
			plugins: Ext.create('App.classes.grid.RowFormEditing', {
				autoCancel  : false,
				errorSummary: false,
				clicksToEdit: 1,

				formItems: [
					{
						title  : i18n['general'],
						xtype  : 'container',
						padding: 10,
						layout : 'vbox',
						items  : [
							{
								/**
								 * Line one
								 */
								xtype   : 'fieldcontainer',
								layout  : 'hbox',
								defaults: { margin: '0 10 5 0' },
								items   : [
									{
										xtype:'textfield',
										name:'reason',
										fieldLabel: i18n['reason'],
										width:585,
										labelWidth: 70,
										disabled:true,
										allowBlank:false,
										action:'reason'
									}

								]

							},
							{
								/**
								 * Line two
								 */
								xtype   : 'fieldcontainer',
								layout  : 'hbox',
								defaults: { margin: '0 10 5 0' },
								items   : [

									{
										xtype:'textfield',
										fieldLabel: i18n['observation'],
										name      : 'observation',
										width     : 250,
										labelWidth: 70,
										disabled:true,
										action:'observation'
									},
									{
										fieldLabel: i18n['date'],
										xtype:'datefield',
										disabled:true,
										action:'date',
										width     : 200,
										labelWidth: 40,
										format    : 'Y-m-d',
										name      : 'date'

									},
									{
										xtype:'checkboxfield',
										name : 'dismiss',
										fieldLabel : i18n['dismiss_alert'],
										enableKeyEvents: true,
										listeners:{
											scope:me,
											change:me.onChangeOption

										}
									},
									{
                                        xtype:'textfield',
                                        hidden:true,
                                        name:'eid',
                                        action:'eid'
                                    }

								]

							}
						]
					}

				]
			})


		});

		me.items = [ me.grid ];

//		me.listeners = {
//			scope: me,
//			show: me.onPreventiveCareWindowShow
//		};


		this.callParent(arguments);

	},
	onChangeOption: function(field,newValue){
		var me=this,
			reason=field.up('form').query('[action="reason"]')[0],
			date=field.up('form').query('[action="date"]')[0],
			eid=field.up('form').query('[action="eid"]')[0],
			observation=field.up('form').query('[action="observation"]')[0];
		eid.setValue(app.patient.eid);
		if(newValue){
			reason.setDisabled(false);
			date.setDisabled(false);
			observation.setDisabled(false);
		}else if(!newValue){
			reason.setDisabled(true);
			date.setDisabled(true);
			observation.setDisabled(true);

		}else{
			reason.setDisabled(true);
			date.setDisabled(true);
			observation.setDisabled(true);
		}



	},

    loadPatientPreventiveCare:function(){
        var me = this;
        this.patientPreventiveCare.load({
            scope:me,
            params: {
                pid: app.patient.pid
            },
            callback:function(records, operation, success){
                if(records.length > 0){
                    me.show();
                    return true;
                }else{
                    return false;
                }
            }
        });
    }

//	onPreventiveCareWindowShow: function() {
//	    this.patientPreventiveCare.load({params: {pid: app.patient.pid }});
//
//    }

});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.patient.windows.NewDocuments', {
	extend     : 'App.classes.window.Window',
	title      : i18n['order_window'],
	layout     : 'fit',
	closeAction: 'hide',
    height       : 750,
   	width        : 1200,
	bodyStyle  : 'background-color:#fff',
	modal      : true,
	defaults   : {
		margin: 5
	},
	pid:null,
    eid:null,
	initComponent: function() {
		var me = this;
		me.patientPrescriptionStore = Ext.create('App.store.patient.PatientsPrescription');
		me.patientsLabsOrdersStore = Ext.create('App.store.patient.PatientsLabsOrders');
		
		me.items = [
			me.tabPanel = Ext.create('Ext.tab.Panel', {

				items: [
					{
						title: i18n['new_lab_order'],
						items: [

							{

								xtype  : 'grid',
								margin : 10,
								store  : me.patientsLabsOrdersStore,
								height : 640,
								columns: [

									{
										xtype: 'actioncolumn',
										width: 20,
										items: [
											{
												icon   : 'resources/images/icons/delete.png',
												tooltip: i18n['remove'],
												scope  : me,
												handler: me.onRemoveLabs
											}
										]
									},
									{
										header   : i18n['lab'],
										flex    : 1,
										dataIndex: 'laboratories'
									}

								],

								bbar:{
									xtype     : 'mitos.labstypescombo',
									margin:5,
									fieldLabel: i18n['add'],
									hideLabel:false,
									listeners:{
										scope:me,
										select:me.onAddLabs
									}
								}
							}
						],


						bbar : [
							'->', {
								text   : i18n['create'],
								scope  : me,
								handler: me.onCreateLabs
							}, {
								text   : i18n['cancel'],
								scope  : me,
								handler: me.onCancel
							}
						]
					},
					{
						title: i18n['new_xray_order'],
						items: [

							{

								xtype  : 'grid',
								margin : 10,
								store  : me.patientPrescriptionStore,
								height : 640,
								columns: [

									{
										xtype: 'actioncolumn',
										width: 20,
										items: [
											{
												icon   : 'resources/images/icons/delete.png',
												tooltip: i18n['remove'],
												scope  : me,
												handler: me.onRemove
											}
										]
									},
									{
										header   : i18n['medication'],
										width    : 100,
										dataIndex: 'medication'
									},
									{
										header   : i18n['dispense'],
										width    : 100,
										dataIndex: 'dispense'
									},
									{
										header   : i18n['refill'],
										flex     : 1,
										dataIndex: 'refill'
									}

								],

								bbar:{
								xtype:'textfield',
								margin:5,
								fieldLabel: i18n['add'],
								hideLabel:false,
								listeners:{
									scope:me,
									select:me.addMedications
								}
							}

							}
						],
						bbar : [
							'->', {
								text   : i18n['create'],
								scope  : me,
								handler: me.Create
							}, {
								text   : i18n['cancel'],
								scope  : me,
								handler: me.onCancel
							}
						]
					},
					{
						title: i18n['new_prescription'],
						items: [
							{
								xtype     : 'mitos.pharmaciescombo',
								fieldLabel: i18n['pharmacies'],
								width     : 250,
								labelWidth: 75,
								margin    : '10 0 0 10'

							},
							{

								xtype  : 'grid',
								margin : 10,
								store  : me.patientPrescriptionStore,
								height : 605,
								columns: [

									{
										xtype: 'actioncolumn',
										width: 20,
										items: [
											{
												icon   : 'resources/images/icons/delete.png',
												tooltip: i18n['remove'],
												scope  : me,
												handler: me.onRemove
											}
										]
									},
									{
										header   : i18n['medication'],
										width    : 100,
										dataIndex: 'medication'
									},
									{
										header   : i18n['dispense'],
										width    : 100,
										dataIndex: 'dispense'
									},
									{
										header   : i18n['refill'],
										flex     : 1,
										dataIndex: 'refill'
									}

								],

								plugins: Ext.create('App.classes.grid.RowFormEditing', {
									autoCancel  : false,
									errorSummary: false,
									clicksToEdit: 1,
									listeners   :{
										scope   : me,
										edit    : me.onEditPrescription

									},
									formItems   : [

										{
											title : i18n['general'],
											xtype : 'container',
											layout: 'vbox',
											items : [
												{
													/**
													 * Line one
													 */
													xtype   : 'fieldcontainer',
													layout  : 'hbox',
													defaults: { margin: '5 0 5 5' },
													items   : [
														{
															xtype     : 'medicationlivetsearch',
															fieldLabel: i18n['medication'],
															hideLabel : false,
															action    : 'medication',
															name      : 'medication',
															width     : 350,
															labelWidth: 80,
															listeners : {
																scope : me,
																select: me.addPrescription
															}
														},
														{
															xtype:'textfield',
															hidden:true,
															name:'medication_id',
															action:'idField'
														},
														{
															xtype     : 'numberfield',
															fieldLabel: i18n['dose'],
															labelWidth: 40,
															action    : 'dose',
															name      : 'dose',
															width     : 100,
															value     : 0,
															minValue  : 0
														},
														{
															xtype     : 'textfield',
															fieldLabel: i18n['dose_mg'],
															action    :'dose_mg',
															name      : 'dose_mg',
															hideLabel : true,
															width     : 150
														}
													]

												},
												{
													/**
													 * Line two
													 */
													xtype   : 'fieldcontainer',
													layout  : 'hbox',
													defaults: { margin: '5 0 5 3'},

													items: [
														{
															xtype     : 'numberfield',
															fieldLabel: i18n['take'],
															margin    : '5 0 5 5',
															name      : 'take_pills',
															width     : 130,
															labelWidth: 80,
															value     : 0,
															minValue  : 0
														},
														{
															xtype     : 'mitos.prescriptiontypes',
															fieldLabel: i18n['type'],
															hideLabel : true,
															name      : 'type',
															width     : 120
														},
														{
															xtype     : 'mitos.prescriptionhowto',
															fieldLabel: i18n['route'],
															name      : 'route',
															hideLabel : true,
															width     : 100
														},
														{
															xtype: 'mitos.prescriptionoften',
															name : 'prescription_often',
															width: 120
														},
														{
															xtype: 'mitos.prescriptionwhen',
															name : 'prescription_when',
															width: 100
														}
													]

												},
												{
													/**
													 * Line three
													 */
													xtype   : 'fieldcontainer',
													layout  : 'hbox',
													defaults: { margin: '5 0 5 5'},
													items   : [
														{

															fieldLabel: i18n['dispense'],
															xtype     : 'numberfield',
															name      : 'dispense',
															width     : 130,
															labelWidth: 80,
															value     : 0,
															minValue  : 0
														},
														{
															fieldLabel: i18n['refill'],
															xtype     : 'numberfield',
															name      : 'refill',
															labelWidth: 35,
															width     : 140,
															value     : 0,
															minValue  : 0
														},
														{
															fieldLabel: i18n['begin_date'],
															xtype     : 'datefield',
															width     : 190,
															labelWidth: 70,
															format    : 'Y-m-d',
															name      : 'begin_date'

														},
														{
															fieldLabel: i18n['end_date'],
															xtype     : 'datefield',
															width     : 180,
															labelWidth: 60,
															format    : 'Y-m-d',
															name      : 'end_date'
														}
													]

												}

											]

										}


									]
								}),
								tbar   : [
									'->',
									{
										text   : i18n['new_medication'],
										scope  : me,
										handler: me.onAddNewPrescription

									}
								]

							}

						],
						bbar : [
							'->', {
								text   : i18n['create'],
								scope  : me,
								handler: me.onCreatePrescription
							}, {
								text   : i18n['cancel'],
								scope  : me,
								handler: me.onCancel
							}
						]

					},
					{
						title: i18n['new_doctors_note'],
						items: [
							{
								xtype     : 'mitos.templatescombo',
								fieldLabel: i18n['template'],
								action: 'template',
								width     : 250,
								labelWidth: 75,
								margin    : '10 0 0 10',
								enableKeyEvents: true,
								listeners      : {
									scope   : me,
									select: me.onTemplateTypeSelect
								}
							},
							{

								xtype: 'htmleditor',
								name:'body',
								action:'body',
								itemId:'body',
								enableFontSize: false,
								height : 605,
								width  : 1170,
								margin:5

							}
						],
						bbar : [
							'->', {
								text   : i18n['create'],
								scope  : me,
								handler: me.onCreateDoctorsNote
							}, {
								text   : i18n['cancel'],
								scope  : me,
								handler: me.onCancel
							}
						]
					}
				]

			})
		];
		me.listeners = {
			scope: me,
			show : me.onDocumentsWinShow,
            hide : me.onDocumentsWinHide
		};
		me.callParent(arguments);
	},

	onTemplateTypeSelect:function(combo,record){
		var me          = this,
			htmlEditor  = combo.up('panel').getComponent('body'),
			value       = record[0].data.body;
		htmlEditor.setValue(value);
	},

	cardSwitch          : function(action) {

		var layout = this.tabPanel.getLayout();

		if(action == 'lab') {
			layout.setActiveItem(0);
		} else if(action == 'xRay') {
			layout.setActiveItem(1);
		} else if(action == 'prescription') {
			layout.setActiveItem(2);
		} else if(action == 'notes') {
			layout.setActiveItem(3);
		}
	},
	onAddNewPrescription: function(btn) {
		var grid = btn.up('grid');
		grid.editingPlugin.cancelEdit();

		this.patientPrescriptionStore.insert(0,{});
		grid.editingPlugin.startEdit(0, 0);
	},

	onRemove: function(grid, rowIndex){
		var me = this,
			store = grid.getStore(),
			record = store.getAt(rowIndex);
			grid.editingPlugin.cancelEdit();
			store.remove(record);
	},
	onRemoveLabs: function(grid, rowIndex){
		var me = this,
			store = grid.getStore(),
			record = store.getAt(rowIndex);
			store.remove(record);
	},
	addPrescription     : function(combo, model) {
		var me      = this,
			field   = combo.up('fieldcontainer').query('[action="dose"]')[0],
			field2  = combo.up('fieldcontainer').query('[action="dose_mg"]')[0],
			field3  = combo.up('fieldcontainer').query('[action="idField"]')[0],
			dose    = model[0].data.ACTIVE_NUMERATOR_STRENGTH,
			dose_mg = model[0].data.ACTIVE_INGRED_UNIT,
			id      = model[0].data.id;
		field.setValue(dose);
		field2.setValue(dose_mg);
		field3.setValue(id);
	},
	onEditPrescription: function(editor,e){
		say(editor);
		say(e.record.commit());

	},
	onCreatePrescription: function (){
		var records =this.patientPrescriptionStore.data.items,
			data = [];
        for(var i=0; i < records.length; i++ ){
            data.push(records[i].data);
        }
		DocumentHandler.createDocument({medications:data, pid:app.patient.pid, docType:'Rx', documentId:5, eid: app.patient.eid}, function(provider, response){
			say(response.result);
		});
		this.close();

	},
	onCreateLabs: function (){
		var records = this.patientsLabsOrdersStore.data.items,
			data = [];
        for(var i=0; i < records.length; i++ ){
            data.push(records[i].data);
        }
		DocumentHandler.createDocument({labs:data, pid:app.patient.pid, docType:'Orders', documentId:4, eid: app.patient.eid}, function(provider, response){
			say(response.result);
		});
		this.close();

	},
	onCreateDoctorsNote: function (bbar){
		var me = this,
			htmlEditor  = bbar.up('toolbar').up('panel').getComponent('body'),
			value = htmlEditor.getValue();
		DocumentHandler.createDocument({DoctorsNote:value, pid:app.patient.pid, docType:'DoctorsNotes', eid: app.patient.eid}, function(provider, response){

			say(response.result);
		});
		this.close();

	},
	onCancel: function(){
			this.close();
	},

	addMedications: function(){

	},
	onAddLabs: function(field, model){

		this.patientsLabsOrdersStore.add({
			laboratories:model[0].data.loinc_name
		});
		field.reset();
	},
	onDocumentsWinShow  : function() {
        var me = this,
	        doctorsNoteBody = me.query('[action="body"]')[0],
            template = me.query('[action="template"]')[0],
	        p = app.patient;
		me.pid = p.pid;
        me.setTitle(p.name + (p.readOnly ? ' - <span style="color:red">[' + i18n['read_mode'] + ']</span>' : ''));
		me.setReadOnly(app.patient.readOnly);
		me.patientPrescriptionStore.removeAll();
		me.patientsLabsOrdersStore.removeAll();
		doctorsNoteBody.reset();
		template.reset();


        var dock = this.tabPanel.getDockedItems()[0],
            visible = this.eid != null;
        dock.items.items[0].setVisible(visible);
        dock.items.items[1].setVisible(visible);
        dock.items.items[2].setVisible(visible);
        if(!visible) me.cardSwitch('notes');
	},
    onDocumentsWinHide : function(){
        if(app.currCardCmp.id == 'panelSummary'){
           app.currCardCmp.patientDocumentsStore.load({params: {pid: this.pid}});
        }
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.patient.windows.DocumentViewer', {
	extend     : 'App.classes.window.Window',
	title      : i18n['documents_viewer_window'],
	layout     : 'fit',
	height     : 650,
	width      : 700,
	closeAction: 'hide',
	bodyStyle  : 'background-color:#fff',
	modal      : true,
	defaults   : {
		margin: 5
	},
	initComponent: function() {
		var me = this;

		me.listeners = {
			scope: me,
			show : me.onViewerDocumentsWinShow
		};
		me.callParent(arguments);
	},


	onViewerDocumentsWinShow  : function() {



	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/18/12
 * Time: 10:46 PM
 */
Ext.define('App.view.patient.windows.ArrivalLog', {
	extend: 'App.classes.window.Window',
	title      : i18n['patient_arrival_log'],
	closeAction: 'hide',
    layout     : 'fit',
	modal      : true,
	width      : 900,
	height     : 600,
	maximizable: true,
	initComponent: function() {
		var me = this;


        me.store = Ext.create('App.store.patient.PatientArrivalLog',{
            autoSync:true
        });

		me.tbar = [
            {
                xtype       : 'patienlivetsearch',
                fieldLabel  : i18n['look_for_patient'],
                width       : 400,
                hideLabel:false,
                enableKeyEvents:true,
                listeners:{
                    scope:me,
                    select:me.onPatientSearchSelect,
                    keyup:me.onPatientSearchKeyUp

                }
		    },
            '-',
            {
                text: i18n['add_new_patient'],
                iconCls:'icoAddRecord',
                action:'newPatientBtn',
                disabled:true,
                scope:me,
                handler:me.onNewPatient
		    },
            '->',
            {
                xtype:'tool',
                type: 'refresh',
                scope:me,
                handler:me.onGridReload
            }
        ];

		me.items = [
            me.ckGrid = Ext.create('Ext.grid.Panel',{
                store:me.store,
                margin:5,
                columns:[
                    {
                        xtype:'actioncolumn',
                        width:25,
                        items: [
                            {
                                icon: 'resources/images/icons/delete.png',  // Use a URL in the icon config
                                tooltip: i18n['remove'],
                                scope:me,
                                handler: me.onPatientRemove
                            }
                        ]
                    },
                    {
                        header: i18n['time'],
                        dataIndex:'time',
	                    width:130
                    },
                    {
                        header: i18n['record'] + ' #',
                        dataIndex:'pid'
                    },
                    {
                        header: i18n['patient_name'],
                        dataIndex:'name',
                        flex:1
                    },
                    {
                        header: i18n['insurance'],
                        dataIndex:'insurance'
                    },
                    {
                        header: i18n['area'],
                        dataIndex:'area'
                    },
                    {
                        width:25,
                        dataIndex:'warning',
                        renderer:me.warnRenderer
                    }
                ],
                listeners:{
                    scope:me,
                    itemdblclick:me.onPatientDlbClick
                }

            })
		];

		me.listeners = {
			scope:me,
			show:me.onWinShow
		};

		me.callParent(arguments);
	},

    onPatientSearchSelect:function(field, record){
        var me = this,
            store = me.query('grid')[0].getStore(),
            btn = me.query('button[action="newPatientBtn"]')[0];
        store.add({
            pid:record[0].data.pid,
            name:record[0].data.fullname,
            time: Ext.Date.format(new Date(), 'Y-m-d H:i:s'),
            isNew:false
        });
        field.reset();
        btn.setDisabled(true);
    },

    onPatientSearchKeyUp:function(field){
        this.query('button[action="newPatientBtn"]')[0].setDisabled(field.getValue() == null);
    },

    onNewPatient:function(btn){
        var me = this,
            field = me.query('patienlivetsearch')[0],
            name = field.getValue(),
            store = me.query('grid')[0].getStore();
        field.reset();
        btn.disable();
        store.add({
            name:name,
            time: Ext.Date.format(new Date(), 'Y-m-d H:i:s'),
            isNew:true
        });
    },

    onPatientRemove:function(grid, rowIndex){
        var store = grid.getStore(),
	        me = this,
            record = store.getAt(rowIndex);
	    Encounter.checkForAnOpenedEncounterByPid({pid:record.data.pid,date:Ext.Date.format(new Date(), 'Y-m-d H:i:s')}, function(provider, response){
		    if(response.result) {
			    me.msg('Oops!', i18n['patient_have_a_opened_encounter']);
		    } else {
			    me.msg('Sweet!', i18n['patient_have_been_removed']);
			    store.remove(record);
		    }
	    });




    },

    onPatientDlbClick:function(grid, record){
        var me = this,
            data = record.data;
	    // TODO: pass priority!
        app.setPatient(data.pid, data.name, function(){
            app.openPatientSummary();
        });
        me.close();
    },

    onGridReload:function(){
        this.store.load();
    },

	onWinShow:function(){
        var me = this;
        me.onGridReload();
        new Ext.util.DelayedTask(function(){
            me.query('patienlivetsearch')[0].focus();
        }).delay(1000);

	}

});

/**
 * @class Ext.ux.PortalColumn
 * @extends Ext.container.Container
 * A layout column class used internally be {@link Ext.app.PortalPanel}.
 */
Ext.define('App.view.dashboard.panel.PortalColumn', {
	extend     : 'Ext.container.Container',
	alias      : 'widget.portalcolumn',

    requires: [
        'Ext.layout.container.Anchor',
        'App.view.dashboard.panel.Portlet'
    ],

    layout: 'anchor',
    defaultType: 'portlet',
    cls: 'x-portal-column'
	//
	// This is a class so that it could be easily extended
	// if necessary to provide additional behavior.
	//
});
/**
 * @class Ext.app.PortalDropZone
 * @extends Ext.dd.DropTarget
 * Internal class that manages drag/drop for {@link Ext.app.PortalPanel}.
 */
Ext.define('App.view.dashboard.panel.PortalDropZone', {
	extend: 'Ext.dd.DropTarget',

	constructor: function(portal, cfg) {
		this.portal = portal;
		Ext.dd.ScrollManager.register(portal.body);
        App.view.dashboard.panel.PortalDropZone.superclass.constructor.call(this, portal.body, cfg);
		portal.body.ddScrollConfig = this.ddScrollConfig;
	},

	ddScrollConfig: {
		vthresh  : 50,
		hthresh  : -1,
		animate  : true,
		increment: 200
	},

    createEvent: function(dd, e, data, col, c, pos) {
        return {
            portal: this.portal,
            panel: data.panel,
            columnIndex: col,
            column: c,
            position: pos,
            data: data,
            source: dd,
            rawEvent: e,
            status: this.dropAllowed
        };
    },

    notifyOver: function(dd, e, data) {
        var xy = e.getXY(),
            portal = this.portal,
            proxy = dd.proxy;

        // case column widths
        if (!this.grid) {
            this.grid = this.getGrid();
        }

        // handle case scroll where scrollbars appear during drag
        var cw = portal.body.dom.clientWidth;
        if (!this.lastCW) {
            // set initial client width
            this.lastCW = cw;
        } else if (this.lastCW != cw) {
            // client width has changed, so refresh layout & grid calcs
            this.lastCW = cw;
            //portal.doLayout();
            this.grid = this.getGrid();
        }

        // determine column
        var colIndex = 0,
            colRight = 0,
            cols = this.grid.columnX,
            len = cols.length,
            cmatch = false;

        for (len; colIndex < len; colIndex++) {
            colRight = cols[colIndex].x + cols[colIndex].w;
            if (xy[0] < colRight) {
                cmatch = true;
                break;
            }
        }
        // no match, fix last index
        if (!cmatch) {
            colIndex--;
        }

        // find insert position
        var overPortlet, pos = 0,
            h = 0,
            match = false,
            overColumn = portal.items.getAt(colIndex),
            portlets = overColumn.items.items,
            overSelf = false;

        len = portlets.length;

        for (len; pos < len; pos++) {
            overPortlet = portlets[pos];
            h = overPortlet.el.getHeight();
            if (h === 0) {
                overSelf = true;
            } else if ((overPortlet.el.getY() + (h / 2)) > xy[1]) {
                match = true;
                break;
            }
        }

        pos = (match && overPortlet ? pos : overColumn.items.getCount()) + (overSelf ? -1 : 0);
        var overEvent = this.createEvent(dd, e, data, colIndex, overColumn, pos);

        if (portal.fireEvent('validatedrop', overEvent) !== false && portal.fireEvent('beforedragover', overEvent) !== false) {

            // make sure proxy width is fluid in different width columns
            proxy.getProxy().setWidth('auto');
            if (overPortlet) {
                dd.panelProxy.moveProxy(overPortlet.el.dom.parentNode, match ? overPortlet.el.dom : null);
            } else {
                dd.panelProxy.moveProxy(overColumn.el.dom, null);
            }

            this.lastPos = {
                c: overColumn,
                col: colIndex,
                p: overSelf || (match && overPortlet) ? pos : false
            };
            this.scrollPos = portal.body.getScroll();

            portal.fireEvent('dragover', overEvent);
            return overEvent.status;
        } else {
            return overEvent.status;
        }

    },

	notifyOut: function() {
		delete this.grid;
	},

    notifyDrop: function(dd, e, data) {
            delete this.grid;
            if (!this.lastPos) {
                return;
            }
            var c = this.lastPos.c,
                col = this.lastPos.col,
                pos = this.lastPos.p,
                panel = dd.panel,
                dropEvent = this.createEvent(dd, e, data, col, c, pos !== false ? pos : c.items.getCount());

            if (this.portal.fireEvent('validatedrop', dropEvent) !== false &&
                this.portal.fireEvent('beforedrop', dropEvent) !== false) {

                Ext.suspendLayouts();

                // make sure panel is visible prior to inserting so that the layout doesn't ignore it
                panel.el.dom.style.display = '';
                dd.panelProxy.hide();
                dd.proxy.hide();

                if (pos !== false) {
                    c.insert(pos, panel);
                } else {
                    c.add(panel);
                }

                Ext.resumeLayouts(true);

                this.portal.fireEvent('drop', dropEvent);

                // scroll position is lost on drop, fix it
                var st = this.scrollPos.top;
                if (st) {
                    var d = this.portal.body.dom;
                    setTimeout(function() {
                        d.scrollTop = st;
                    },
                    10);
                }
            }

            delete this.lastPos;
            return true;
        },

	// internal cache of body and column coords
	getGrid   : function() {
		var box = this.portal.body.getBox();
		box.columnX = [];
		this.portal.items.each(function(c) {
			box.columnX.push({
				x: c.el.getX(),
				w: c.el.getWidth()
			});
		});
		return box;
	},

	// unregister the dropzone from ScrollManager
	unreg     : function() {
		Ext.dd.ScrollManager.unregister(this.portal.body);
        App.view.dashboard.panel.PortalDropZone.superclass.unreg.call(this);
	}
});

/**
 * @class Ext.app.PortalPanel
 * @extends Ext.Panel
 * A {@link Ext.Panel Panel} class used for providing drag-drop-enabled portal layouts.
 */
Ext.define('App.view.dashboard.panel.PortalPanel', {
	extend  : 'Ext.panel.Panel',
	alias   : 'widget.portalpanel',
	requires: [
        'Ext.layout.container.Column',

        'App.view.dashboard.panel.PortalDropZone',
        'App.view.dashboard.panel.PortalColumn'
	],

	cls            : 'x-portal',
	bodyCls        : 'x-portal-body',
	defaultType    : 'portalcolumn',
	componentLayout: 'body',
	autoScroll     : true,

    manageHeight: false,

    initComponent: function() {
		var me = this;

		// Implement a Container beforeLayout call from the layout to this Container
		this.layout = {
			type: 'column'
		};
		this.callParent();

		this.addEvents({
			validatedrop  : true,
			beforedragover: true,
			dragover      : true,
			beforedrop    : true,
			drop          : true
		});
	},

	// Set columnWidth, and set first and last column classes to allow exact CSS targeting.
    beforeLayout: function() {
        var items = this.layout.getLayoutItems(),
            len = items.length,
            firstAndLast = ['x-portal-column-first', 'x-portal-column-last'],
            i, item, last;

        for (i = 0; i < len; i++) {
            item = items[i];
            item.columnWidth = 1 / len;
            last = (i == len-1);

            if (!i) { // if (first)
                if (last) {
                    item.addCls(firstAndLast);
                } else {
                    item.addCls('x-portal-column-first');
                    item.removeCls('x-portal-column-last');
                }
            } else if (last) {
                item.addCls('x-portal-column-last');
                item.removeCls('x-portal-column-first');
            } else {
                item.removeCls(firstAndLast);
            }
        }

        return this.callParent(arguments);
    },

	// private
	initEvents   : function() {
		this.callParent();
		this.dd = Ext.create('App.view.dashboard.panel.PortalDropZone', this, this.dropConfig);
	},

	// private
    beforeDestroy : function() {
        if (this.dd) {
            this.dd.unreg();
        }
        this.callParent();
    }
});

Ext.define('App.view.dashboard.panel.OnotesPortlet', {

	extend       : 'Ext.grid.Panel',
	alias        : 'widget.onotesportlet',
	height       : 250,
	initComponent: function() {
		var me = this;
		Ext.define('OnotesPortletModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'date', type: 'date', dateFormat: 'c'},
				{name: 'body', type: 'string'},
				{name: 'user', type: 'string'},
				{name: 'facility_id', type: 'string'},
				{name: 'activity', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: OfficeNotes.getOfficeNotes
				}
			}
		});
		me.store = Ext.create('Ext.data.Store', {
			model   : 'OnotesPortletModel',
			autoLoad: true
		});

		Ext.apply(this, {
			height     : this.height,
			store      : this.store,
			stripeRows : true,
			columnLines: true,
			columns    : [
				{
					id       : 'user',
					text     : 'From',
					sortable : true,
					dataIndex: 'user'
				},
				{
					text     : 'Note',
					sortable : true,
					dataIndex: 'body',
					flex     : 1
				}
			]
		}, null);

		this.callParent(arguments);
	}
});

Ext.define('App.view.dashboard.panel.VisitsPortlet', {
    extend: 'Ext.panel.Panel',
    initComponent: function() {
        Ext.apply(this, {
            layout: 'fit',
            width : 300,
            height: 250,
            items : {
                xtype  : 'chart',
                animate: false,
                shadow : false,
                store  : Ext.create('App.store.patient.Encounters'),
                axes   : [
                    {
                        type    : 'Numeric',
                        position: 'left',
                        fields  : ['djia'],
                        title   : 'Visits',
                        label   : {
                            font: '11px Arial'
                        }
                    },
                    {
                        type    : 'Numeric',
                        position: 'bottom',
                        grid    : false,
                        fields  : ['sp500'],
                        title   : 'Day',
                        label   : {
                            font: '11px Arial'
                        }
                    }
                ],
                series : [
                    {
                        type: 'column',
                        axis: 'left',
                        highlight: true,
                        tips: {
                          trackMouse: true,
                          width: 140,
                          height: 28,
                          renderer: function(storeItem, item) {
                            this.setTitle(storeItem.get('name') + ': ' + storeItem.get('data1') + ' $');
                          }
                        },
                        label: {
                          display: 'insideEnd',
                          'text-anchor': 'middle',
                            field: 'data1',
                            renderer: Ext.util.Format.numberRenderer('0'),
                            orientation: 'vertical',
                            color: '#333'
                        },
                        xField: 'name',
                        yField: 'data1'
                    }
                ]
            }
        }, null);

        this.callParent(arguments);
    }
});

//******************************************************************************
// Users.ejs.php
// Description: Users Screen
// v0.0.4
// 
// Author: Ernesto J Rodriguez
// Modified: n/a
// 
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.dashboard.Dashboard',
{
	extend        : 'App.classes.RenderPanel',
	id            : 'panelDashboard',
	pageTitle     : i18n['dashboard'],
	getTools      : function() 
	{
		return [
		{
			xtype  : 'tool',
			type   : 'gear',
			handler: function(e, target, panelHeader) 
			{
				var portlet = panelHeader.ownerCt;
				portlet.setLoading( i18n['working'] + '...');
				Ext.defer(function() 
				{
					portlet.setLoading(false);
				}, 2000);
			}
		}];
	},
	initComponent : function() 
	{
		var content = '<div class="portlet-content">HELLO WORLD!</div>';
		Ext.apply(this, 
		{
			pageBody: [
			{
				xtype : 'portalpanel',
				layout: 'fit',
				region: 'center',
				items : [
				{
					id   : 'col-1',
					items: 
					[
                        {
//                            id       : 'portlet-onotes',
                            title    : i18n['office_notes'],
                            tools    : this.getTools(),
                            items    : Ext.create('App.view.dashboard.panel.OnotesPortlet'),
                            listeners:
                            {
                                close: Ext.bind(this.onPortletClose, this)
                            }
                        }
                            //,
                            //{
                            //	id       : 'portlet-2',
                            //	title    : 'Portlet 2',
                            //	tools    : this.getTools(),
                            //	html     : content,
                            //	listeners: {
                            //		'close': Ext.bind(this.onPortletClose, this)
                            //	}
                            //}
                        ]
					},
                    {
//                        id   : 'col-2',
                        items: [
                            {
                                title    : 'Office Visits',
                                tools    : this.getTools(),
                                items    : Ext.create('App.view.dashboard.panel.VisitsPortlet'),
                                listeners: {
                                    close: Ext.bind(this.onPortletClose, this)
                                }
                            }
                        ]
                    }
//                    ,
//                    {
//                        id   : 'col-3',
//                        items: [
//                            {
//                                id       : 'portlet-4',
//                                title    : 'Portlet 4',
//                                tools    : this.getTools(),
//                                items    : Ext.create('App.view.dashboard.panel.ChartPortlet'),
//                                listeners: {
//                                    'close': Ext.bind(this.onPortletClose, this)
//                                }
//                            }
//                        ]
//                    }
					]
				}
			]
		}, null);
		this.callParent();
	},
	
	onPortletClose: function(portlet) 
	{
		this.msg(i18n['message'] + '!', portlet.title + ' ' + i18n['was_removed']);
	},
	
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive      : function(callback) 
	{
		callback(true);
	}
}); //ens UserPage class

/*
Extensible 1.5.1
Copyright(c) 2010-2012 Extensible, LLC
licensing@ext.ensible.com
http://ext.ensible.com
*/
/**
 * @class Extensible
 * Extensible core utilities and functions.
 * @singleton
 */
Ext.define('Extensible', {
    
    singleton: true,
    
    /**
     * The version of the Extensible framework
     * @type String
     */
    version: '1.5.1',
    /**
     * The version of the framework, broken out into its numeric parts. This returns an
     * object that contains the following integer properties: major, minor and patch.
     * @type Object
     */
    versionDetails: {
        major: 1,
        minor: 5,
        patch: 1
    },
    /**
     * The minimum version of Ext required to work with this version of Extensible, currently
     * 4.0.1. Note that the 4.0.0 Ext JS release is not compatible.
     * @type String
     */
    extVersion: '4.0.1',
    
    // private
    hasBorderRadius: Ext.supports.CSS3BorderRadius,
    
    // private
    log: function(s){
        //console.log(s);
    },
    
    // private
    getScrollWidth: function() {
        return Ext.getScrollbarSize ? Ext.getScrollbarSize().width : Ext.getScrollBarWidth();
    },
    
    // private
    constructor: function() {
        Ext.onReady(function() {
            if (Extensible.getScrollWidth() < 3) {
                // OSX Lion introduced dynamic scrollbars that do not take up space in the
                // body. Since certain aspects of the layout are calculated and rely on
                // scrollbar width, we add this class if needed so that we can apply
                // static style rules rather than recalculate sizes on each resize.
                // We check for less than 3 because the Ext scrollbar measurement gets
                // slightly padded (not sure the reason), so it's never returned as 0.
                Ext.getBody().addCls('x-no-scrollbar');
            }
            if (Ext.isWindows) {
                Ext.getBody().addCls('x-win');
            }
            
            var extVer = Ext.getVersion();
            if (extVer.isLessThan('4.1')) {
                // Unfortunately some styling changed in 4.1 that requires version-specific
                // CSS differences to handle properly across versions. Ugh.
                Ext.getBody().addCls('x-4-0');
            }
        });
    },

   /**
    * @class Extensible.Date
    * @extends Object
    * Contains utility date functions used by the calendar components.
    * @singleton
    */
    Date: {
        /**
         * Determines whether times used throughout all Extensible components should be displayed as
         * 12 hour times with am/pm (default) or 24 hour / military format. Note that some locale files
         * may override this value by default.
         * @type Boolean
         * @property use24HourTime
         */
        use24HourTime: false,
        
        /**
         * Returns the time duration between two dates in the specified units. For finding the number of
         * calendar days (ignoring time) between two dates use {@link Ext.ensible.Date.diffDays diffDays} instead.
         * @param {Date} start The start date
         * @param {Date} end The end date
         * @param {String} unit (optional) The time unit to return. Valid values are 'millis' (the default),
         * 'seconds', 'minutes' or 'hours'.
         * @return {Number} The time difference between the dates in the units specified by the unit param
         */
        diff: function(start, end, unit) {
            var denom = 1,
                diff = end.getTime() - start.getTime();
            
            if (unit === 's' || unit === 'seconds') {
                denom = 1000;
            }
            else if (unit === 'm' || unit === 'minutes') {
                denom = 1000*60;
            }
            else if (unit === 'h' || unit === 'hours') {
                denom = 1000*60*60;
            }
            return Math.round(diff / denom);
        },
        
        /**
         * Calculates the number of calendar days between two dates, ignoring time values.
         * A time span that starts at 11pm (23:00) on Monday and ends at 1am (01:00) on Wednesday is
         * only 26 total hours, but it spans 3 calendar days, so this function would return 3. For the
         * exact time difference, use {@link Ext.ensible.Date.diff diff} instead.
         * @param {Date} start The start date
         * @param {Date} end The end date
         * @return {Number} The number of calendar days difference between the dates
         */
        diffDays: function(start, end) {
            var day = 1000*60*60*24,
                clear = Ext.Date.clearTime,
                diff = clear(end, true).getTime() - clear(start, true).getTime();
            
            return Math.ceil(diff / day);
        },
        
        /**
         * Copies the time value from one date object into another without altering the target's
         * date value. This function returns a new Date instance without modifying either original value.
         * @param {Date} fromDt The original date from which to copy the time
         * @param {Date} toDt The target date to copy the time to
         * @return {Date} The new date/time value
         */
        copyTime: function(fromDt, toDt) {
            var dt = Ext.Date.clone(toDt);
            
            dt.setHours(
                fromDt.getHours(),
                fromDt.getMinutes(),
                fromDt.getSeconds(),
                fromDt.getMilliseconds());
            
            return dt;
        },
        
        /**
         * Compares two dates and returns a value indicating how they relate to each other.
         * @param {Date} dt1 The first date
         * @param {Date} dt2 The second date
         * @param {Boolean} precise (optional) If true, the milliseconds component is included in the comparison,
         * else it is ignored (the default).
         * @return {Number} The number of milliseconds difference between the two dates. If the dates are equal
         * this will be 0.  If the first date is earlier the return value will be positive, and if the second date
         * is earlier the value will be negative.
         */
        compare: function(dt1, dt2, precise) {
            var d1 = dt1, d2 = dt2;
            
            if (precise !== true) {
                d1 = Ext.Date.clone(dt1);
                d1.setMilliseconds(0);
                d2 = Ext.Date.clone(dt2);
                d2.setMilliseconds(0);
            }
            return d2.getTime() - d1.getTime();
        },

        // private helper fn
        maxOrMin: function(max) {
            var dt = max ? 0: Number.MAX_VALUE,
                i = 0,
                args = arguments[1],
                ln = args.length;
            
            for (; i < ln; i++) {
                dt = Math[max ? 'max': 'min'](dt, args[i].getTime());
            }
            return new Date(dt);
        },
        
        /**
         * Returns the maximum date value passed into the function. Any number of date
         * objects can be passed as separate params.
         * @param {Date} dt1 The first date
         * @param {Date} dt2 The second date
         * @param {Date} dtN (optional) The Nth date, etc.
         * @return {Date} A new date instance with the latest date value that was passed to the function
         */
		max: function() {
            return this.maxOrMin.apply(this, [true, arguments]);
        },
        
        /**
         * Returns the minimum date value passed into the function. Any number of date
         * objects can be passed as separate params.
         * @param {Date} dt1 The first date
         * @param {Date} dt2 The second date
         * @param {Date} dtN (optional) The Nth date, etc.
         * @return {Date} A new date instance with the earliest date value that was passed to the function
         */
		min: function() {
            return this.maxOrMin.apply(this, [false, arguments]);
        },
        
        isInRange: function(dt, rangeStart, rangeEnd) {
            return  (dt >= rangeStart && dt <= rangeEnd);
        },
        
        /**
         * Returns true if two date ranges overlap (either one starts or ends within the other, or one completely
         * overlaps the start and end of the other), else false if they do not.
         * @param {Date} start1 The start date of range 1
         * @param {Date} end1   The end date of range 1
         * @param {Date} start2 The start date of range 2
         * @param {Date} end2   The end date of range 2
         * @return {Booelan} True if the ranges overlap, else false
         */
        rangesOverlap: function(start1, end1, start2, end2) {
            var startsInRange = (start1 >= start2 && start1 <= end2),
                endsInRange = (end1 >= start2 && end1 <= end2),
                spansRange = (start1 <= start2 && end1 >= end2);
            
            return (startsInRange || endsInRange || spansRange);
        },
        
        /**
         * Returns true if the specified date is a Saturday or Sunday, else false.
         * @param {Date} dt The date to test
         * @return {Boolean} True if the date is a weekend day, else false
         */
        isWeekend: function(dt) {
            return dt.getDay() % 6 === 0;
        },
        
        /**
         * Returns true if the specified date falls on a Monday through Friday, else false.
         * @param {Date} dt The date to test
         * @return {Boolean} True if the date is a week day, else false
         */
        isWeekday: function(dt) {
            return dt.getDay() % 6 !== 0;
        },
        
        /**
         * Returns true if the specified date's time component equals 00:00, ignoring
         * seconds and milliseconds.
         * @param {Object} dt The date to test
         * @return {Boolean} True if the time is midnight, else false
         */
        isMidnight: function(dt) {
            return dt.getHours() === 0 && dt.getMinutes() === 0;
        },
        
        /**
         * Returns true if the specified date is the current browser-local date, else false.
         * @param {Object} dt The date to test
         * @return {Boolean} True if the date is today, else false
         */
        isToday: function(dt) {
            return this.diffDays(dt, this.today()) === 0;
        },
        
        /**
         * Convenience method to get the current browser-local date with no time value.
         * @return {Date} The current date, with time 00:00
         */
        today: function() {
            return Ext.Date.clearTime(new Date());
        },
        
        /**
         * Add time to the specified date and returns a new Date instance as the result (does not
         * alter the original date object). Time can be specified in any combination of milliseconds
         * to years, and the function automatically takes leap years and daylight savings into account.
         * Some syntax examples:<code><pre>
var now = new Date();

// Add 24 hours to the current date/time:
var tomorrow = Extensible.Date.add(now, { days: 1 });

// More complex, returning a date only with no time value:
var futureDate = Extensible.Date.add(now, {
    weeks: 1,
    days: 5,
    minutes: 30,
    clearTime: true
});
</pre></code>
         * @param {Date} dt The starting date to which to add time
         * @param {Object} o A config object that can contain one or more of the following
         * properties, each with an integer value: <ul>
         * <li>millis</li>
         * <li>seconds</li>
         * <li>minutes</li>
         * <li>hours</li>
         * <li>days</li>
         * <li>weeks</li>
         * <li>months</li>
         * <li>years</li></ul>
         * You can also optionally include the property "clearTime: true" which will perform all of the
         * date addition first, then clear the time value of the final date before returning it.
         * @return {Date} A new date instance containing the resulting date/time value
         */
        add: function(dt, o) {
            if (!o) {
                return dt;
            }
            var ExtDate = Ext.Date,
                dateAdd = ExtDate.add,
                newDt = ExtDate.clone(dt);
            
            if (o.years) {
                newDt = dateAdd(newDt, ExtDate.YEAR, o.years);
            }
            if (o.months) {
                newDt = dateAdd(newDt, ExtDate.MONTH, o.months);
            }
            if (o.weeks) {
                o.days = (o.days || 0) + (o.weeks * 7);
            }
            if (o.days) {
                newDt = dateAdd(newDt, ExtDate.DAY, o.days);
            }
            if (o.hours) {
                newDt = dateAdd(newDt, ExtDate.HOUR, o.hours);
            }
            if (o.minutes) {
                newDt = dateAdd(newDt, ExtDate.MINUTE, o.minutes);
            }
            if (o.seconds) {
                newDt = dateAdd(newDt, ExtDate.SECOND, o.seconds);
            }
            if (o.millis) {
                newDt = dateAdd(newDt, ExtDate.MILLI, o.millis);
            }
             
            return o.clearTime ? ExtDate.clearTime(newDt): newDt;
        },
        
        clearTime: function(dt, clone) {
            return Ext.Date.clearTime(dt, clone);
        }
    }
});


/* =========================================================
 * @private
 * Ext overrides required by Extensible components
 * =========================================================
 */
Ext.require([
    'Ext.picker.Color',
    'Ext.form.Basic',
    'Ext.data.proxy.Memory'
]);

Extensible.applyOverrides = function() {

    Ext.DomHelper = Ext.core.DomHelper;
    
    var extVersion = Ext.getVersion();
    
    // This was fixed in Ext 4.0.5:
    if (Ext.layout.container.AbstractCard) {
        Ext.layout.container.AbstractCard.override({
            renderChildren: function () {
                // added check to honor deferredRender when rendering children
                if (!this.deferredRender) {
                    this.getActiveItem();
                    this.callParent();
                }
            }
        });
    }
    
    // This was fixed in Ext 4.0.4?
    Ext.Component.override({
        getId: function() {
            var me = this,
                xtype;
            
            if (!me.id) {
                xtype = me.getXType();
                xtype = xtype ? xtype.replace(/[\.,\s]/g, '-'): 'ext-comp';
                me.id = xtype + '-' + me.getAutoId();
            }
            return me.id;
        }
    });
    
    if (Ext.picker && Ext.picker.Color) {
        Ext.picker.Color.override({
            constructor: function() {
                // use an existing renderTpl if specified
                this.renderTpl = this.renderTpl || Ext.create('Ext.XTemplate', '<tpl for="colors"><a href="#" ' +
                    'class="color-{.}" hidefocus="on"><em><span style="background:#{.}" ' +
                    'unselectable="on">&#160;</span></em></a></tpl>');
    
                this.callParent(arguments);
            }
        });
    }
    
    if (extVersion.isLessThan('4.1')) {
        if (Ext.data && Ext.data.reader && Ext.data.reader.Reader) {
            Ext.data.reader.Reader.override({
                extractData: function(root) {
                    var me = this,
                        values  = [],
                        records = [],
                        Model   = me.model,
                        i       = 0,
                        length  = root.length,
                        idProp  = me.getIdProperty(),
                        node, id, record;
                        
                    if (!root.length && Ext.isObject(root)) {
                        root = [root];
                        length = 1;
                    }
            
                    for (; i < length; i++) {
                        node   = root[i];
                        values = me.extractValues(node);
                        
                        // Assuming that the idProperty is intended to use the id mapping, if
                        // available, getId() should read from the mapped values not the raw values.
                        // Using the non-mapped id causes updates later to silently fail since
                        // the updated data is replaced by id.
                        //id = me.getId(node);
                        id = me.getId(values);
                        
                        record = new Model(values, id, node);
                        records.push(record);
                            
                        if (me.implicitIncludes) {
                            me.readAssociated(record, node);
                        }
                    }
            
                    return records;
                }
            });
        }
    }
    
    if (Ext.form && Ext.form.Basic) {
        Ext.form.Basic.override({
            reset: function() {
                var me = this;
                // This causes field events to be ignored. This is a problem for the
                // DateTimeField since it relies on handling the all-day checkbox state
                // changes to refresh its layout. In general, this batching is really not
                // needed -- it was an artifact of pre-4.0 performance issues and can be removed.
                //me.batchLayouts(function() {
                    me.getFields().each(function(f) {
                        f.reset();
                    });
                //});
                return me;
            }
        });
    }

    // Currently MemoryProxy really only functions for read-only data. Since we want
    // to simulate CRUD transactions we have to at the very least allow them to be
    // marked as completed and successful, otherwise they will never filter back to the
    // UI components correctly.
    if (Ext.data && Ext.data.proxy && Ext.data.proxy.Memory) {
        Ext.data.proxy.Memory.override({
            updateOperation: function(operation, callback, scope) {
                Ext.each(operation.records, function(rec) {
                    rec.commit();
                });
                operation.setCompleted();
                operation.setSuccessful();
                Ext.callback(callback, scope || this, [operation]);
            },
            create: function() {
                this.updateOperation.apply(this, arguments);
            },
            update: function() {
                this.updateOperation.apply(this, arguments);
            },
            destroy: function() {
                this.updateOperation.apply(this, arguments);
            }
        });
    }
    
    // In Ext 4.0.x, CheckboxGroup's resetOriginalValue uses a defer hack that was removed
    // in 4.1. Unfortunately that defer hack causes a runtime error in certain situations
    // and is not really needed, so we'll replace any 4.0.x version with the new fixed version.
    if (extVersion.isLessThan('4.1') && Ext.form && Ext.form.CheckboxGroup) {
        Ext.form.CheckboxGroup.override({
            resetOriginalValue: function(){
                var me = this;
                
                me.eachBox(function(box){
                    box.resetOriginalValue();
                });
                me.originalValue = me.getValue();
                me.checkDirty();
            }
        });
    }
};

Ext.onReady(Extensible.applyOverrides);
Ext.define('Extensible.lang.Number', {
    statics: {
        getOrdinalSuffix: function(num) {
            if (!Ext.isNumber(num)) {
                return '';
            }
            switch (num) {
                case 1:
                case 21:
                case 31:
                    return "st";
                case 2:
                case 22:
                    return "nd";
                case 3:
                case 23:
                    return "rd";
                default:
                    return "th";
            }
        }
    }
}, function() {
    Extensible.Number = Extensible.lang.Number;
});


Ext.define('Extensible.data.Model', {
    extend: 'Ext.data.Model',
    
    requires: [
        'Ext.util.MixedCollection'
    ],
    
    // *Must* be defined by subclasses
    mappingClass: null,
    
    // Should be defined by subclasses, or will default to the default Model id property
    mappingIdProperty: null,
    
    inheritableStatics: {
        /**
         * Reconfigures the default model definition based on the current
         * {@link #mappingClass Mappings} class.
         * @method reconfigure
         * @static
         * @return {Function} The updated constructor function
         */
        reconfigure: function() {
            var proto = this.prototype,
                mappings = Ext.ClassManager.get(proto.mappingClass || ''),
                idProperty = proto.mappingIdProperty,
                prop,
                fields = [],
                i = 0,
                len = 0;
            
            if (!mappings) {
                throw 'The mappingClass for ' + this.$className + ' is undefined or invalid';
            }
            // TODO: Add this as a compile-time warning:
            //if (!idProperty) {
                // idProperty should usually be defined at this point, so make sure it's not missing
            //}
            
            // It is critical that the id property mapping is updated in case it changed, since it
            // is used elsewhere in the data package to match records on CRUD actions:
            proto.idProperty = idProperty || proto.idProperty || 'id';
            
            for (prop in mappings) {
                if(mappings.hasOwnProperty(prop)){
                    fields.push(mappings[prop]);
                }
            }

            proto.fields.clear();
            len = fields.length;
            
            for (; i < len; i++) {
                proto.fields.add(Ext.create('Ext.data.Field', fields[i]));
            }
            return this;
        }
    },
    
    /**
     * Returns a new instance of this Model with the `data` property deep-copied from the
     * original record. By default the {@link #idProperty} value will be deleted to avoid returning
     * the cloned record with a duplicate id, but you can optionally preserve the id by passing `true`.
     * 
     * The behavior is different than the default {@link Ext.data.Model#copy} (which preserves the
     * existing id by default and performs a shallow copy of the data) and is better-suited
     * to the typical default desired behavior when duplicating a record.
     * 
     * @param {Boolean} (optional) preserveId True to preserve the record's data {@link idProperty id},
     * false to delete it in the returned clone (defaults to false)
     * @return {Extensible.data.Model} The cloned record
     */
    clone: function(preserveId) {
        var copy = Ext.create(this.$className),
            dataProp = this.persistenceProperty;
        
        copy[dataProp] = Ext.Object.merge({}, this[dataProp]);
        
        if (preserveId !== true) {
            delete copy[dataProp][this.idProperty];
        }
        return copy;
    }
});


/*
Extensible 1.5.1
Copyright(c) 2010-2012 Extensible, LLC
licensing@ext.ensible.com
http://ext.ensible.com
*/

// TODO: Create Extensible.form.recurrence.Parser and factor all
//       rrule value getting/setting out of these option classes
//       and into the parser.

Ext.define('Extensible.form.recurrence.AbstractOption', {
    extend: 'Ext.form.FieldContainer',
    
    mixins: {
        field: 'Ext.form.field.Field'
    },
    
    layout: 'hbox',
    
    defaults: {
        margins: '0 5 0 0'
    },
    
    key: undefined,
    
    /**
     * @cfg {String} dateValueFormat
     * The date string format to return in the RRULE. This is the standard ISO-style iCal
     * date format, e.g. January 31, 2012, 14:00 would be formatted as: "20120131T140000Z".
     */
    dateValueFormat: 'Ymd\\THis\\Z',
    
    optionDelimiter: ';',
    
    initComponent: function() {
        var me = this;
        
        me.addEvents(
            /**
             * @event change
             * Fires when a user-initiated change is detected in the value of the field.
             * @param {Extensible.form.recurrence.AbstractOption} this
             * @param {Mixed} newValue The new value
             * @param {Mixed} oldValue The old value
             */
            'change'
        );
        me.startDate = me.startDate || new Date();
        me.items = me.getItemConfigs();
        
        me.callParent(arguments);
        
        me.initRefs();
        me.initField();
    },
    
    formatDate: function(date) {
        return Ext.Date.format(date, this.dateValueFormat);
    },
    
    parseDate: function(dateString, options) {
        options = options || {};
        
        try {
            var date = Ext.Date.parse(dateString, options.format || this.dateValueFormat, options.strict);
            if (date) {
                return date;
            }
        }
        catch(ex) {}
        
        return options.defaultValue || new Date();
    },
    
    afterRender: function(){
        this.callParent(arguments);
        this.updateLabel();
    },
    
    initRefs: Ext.emptyFn,
    
    setFrequency: function(freq) {
        this.frequency = freq;
    },
    
    setStartDate: function(dt) {
        this.startDate = dt;
        return this;
    },
    
    getStartDate: function() {
        return this.startDate || Extensible.Date.today();
    },
    
    getDefaultValue: function() {
        return '';
    },
    
    preSetValue: function(v, readyField) {
        var me = this;
        
        if (!v) {
            v = me.getDefaultValue();
        }
        if (!readyField) {
            me.on('afterrender', function() {
                me.setValue(v);
            }, me, {single: true});
            return false;
        }
        
        me.value = v;
        
        return true;
    }
});
Ext.define('Extensible.form.recurrence.option.Duration', {
    extend: 'Extensible.form.recurrence.AbstractOption',
    alias: 'widget.extensible.recurrence-duration',
    
    requires: [
        'Ext.form.Label',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.form.field.Date'
    ],
    
    minOccurrences: 1,
    
    maxOccurrences: 999,
    
    /**
     * @cfg {Number} defaultEndDateOffset
     * The unit of time after the start date to set the end date field when no end date is specified in the
     * recurrence rule (defaults to 5). The specific date value depends on the recurrence frequency
     * (selected in the {@link Extensible.form.recurrence.FrequencyCombo FrequencyCombo}) which is the
     * unit by which this setting is multiplied to calculate the default date. For example, if recurrence
     * frequency is daily, then the resulting date would be 5 days after the start date. However, if
     * frequency is monthly, then the date would be 5 months after the start date.
     */
    defaultEndDateOffset: 5,
    
    /**
     * @cfg {Number} minDateOffset
     * The number of days after the start date to set as the minimum allowable end date
     * (defaults to 1).
     */
    minDateOffset: 1,
    
    maxEndDate: new Date('12/31/9999'),
    
    endDateWidth: 120,
    
    cls: 'extensible-recur-duration',
    
    //endDateFormat: null, // inherit by default
    
    getItemConfigs: function() {
        var me = this,
            startDate = me.getStartDate();
        
        return [{
            xtype: 'label',
            text: 'and continuing'
        },{
            xtype: 'combo',
            itemId: me.id + '-duration-combo',
            mode: 'local',
            width: 85,
            triggerAction: 'all',
            forceSelection: true,
            value: 'forever',
            store: ['forever', 'for', 'until'],
            listeners: {
                'change': Ext.bind(me.onComboChange, me)
            }
        },{
            xtype: 'datefield',
            itemId: me.id + '-duration-date',
            showToday: false,
            width: me.endDateWidth,
            format: me.endDateFormat || Ext.form.field.Date.prototype.format,
            maxValue: me.maxEndDate,
            allowBlank: false,
            hidden: true,
            minValue: Ext.Date.add(startDate, Ext.Date.DAY, me.minDateOffset),
            value: me.getDefaultEndDate(startDate),
            listeners: {
                'change': Ext.bind(me.onEndDateChange, me)
            }
        },{
            xtype: 'numberfield',
            itemId: me.id + '-duration-num',
            value: 5,
            width: 55,
            minValue: me.minOccurrences,
            maxValue: me.maxOccurrences,
            allowBlank: false,
            hidden: true,
            listeners: {
                'change': Ext.bind(me.onOccurrenceCountChange, me)
            }
        },{
            xtype: 'label',
            itemId: me.id + '-duration-num-label',
            text: 'occurrences',
            hidden: true
        }];
    },
    
    initRefs: function() {
        var me = this;
        me.untilCombo = me.down('#' + me.id + '-duration-combo');
        me.untilDateField = me.down('#' + me.id + '-duration-date');
        me.untilNumberField = me.down('#' + me.id + '-duration-num');
        me.untilNumberLabel = me.down('#' + me.id + '-duration-num-label');
    },
    
    onComboChange: function(combo, value) {
        this.toggleFields(value);
        this.checkChange();
    },
    
    toggleFields: function(toShow) {
        var me = this;
        
        me.untilCombo.setValue(toShow);
        
        if (toShow === 'until') {
            if (!me.untilDateField.getValue()) {
                me.initUntilDate();
            }
            me.untilDateField.show();
        }
        else {
            me.untilDateField.hide();
            me.untilDateIsSet = false;
        }
        
        if (toShow === 'for') {
            me.untilNumberField.show();
            me.untilNumberLabel.show();
        }
        else {
            // recur forever
            me.untilNumberField.hide();
            me.untilNumberLabel.hide();
        }
    },
    
    onOccurrenceCountChange: function(field, value, oldValue) {
        this.checkChange();
    },
    
    onEndDateChange: function(field, value, oldValue) {
        this.checkChange();
    },
    
    setStartDate: function(dt) {
        var me = this,
            value = me.getValue();
        
        if (dt.getTime() !== me.startDate.getTime()) {
            me.callParent(arguments);
            me.untilDateField.setMinValue(dt);
            
            if (!value || me.untilDateField.getValue() < dt) {
                me.initUntilDate(dt);
            }
        }
        return me;
    },
    
    setFrequency: function() {
        this.callParent(arguments);
        this.initUntilDate();
        
        return this;
    },
    
    initUntilDate: function(startDate) {
        if (!this.untilDateIsSet) {
            this.untilDateIsSet = true;
            var endDate = this.getDefaultEndDate(startDate || this.getStartDate());
            this.untilDateField.setValue(endDate);
        }
        return this;
    },
    
    getDefaultEndDate: function(startDate) {
        var options = {},
            unit;
        
        switch (this.frequency) {
            case 'WEEKLY':
            case 'WEEKDAYS':
                unit = 'weeks';
                break;
            
            case 'MONTHLY':
                unit = 'months';
                break;
            
            case 'YEARLY':
                unit = 'years';
                break;
            
            default:
                unit = 'days';
        }
        
        options[unit] = this.defaultEndDateOffset;
        
        return Extensible.Date.add(startDate, options);
    },
    
    getValue: function() {
        var me = this;
        
        // sanity check that child fields are available first
        if (me.untilCombo) {
            if (me.untilNumberField.isVisible()) {
                return 'COUNT=' + me.untilNumberField.getValue();
            }
            else if (me.untilDateField.isVisible()) {
                return 'UNTIL=' + me.formatDate(this.adjustUntilDateValue(me.untilDateField.getValue()));
            }
        }
        return '';
    },
    
    /**
     * If a recurrence UNTIL date is specified, it must be inclusive of all times on that date. By default
     * the returned date value is incremented by one day minus one second to ensure that.
     * @param {Object} untilDate The raw UNTIL date value returned from the untilDateField
     * @return {Date} The adjusted Date object
     */
    adjustUntilDateValue: function(untilDate) {
        return Extensible.Date.add(untilDate, {days: 1, seconds: -1});
    },
    
    setValue: function(v) {
        var me = this;
        
        if (!me.preSetValue(v, me.untilCombo)) {
            return me;
        }
        if (!v) {
            me.toggleFields('forever');
            return me;
        }
        var options = Ext.isArray(v) ? v : v.split(me.optionDelimiter),
            didSetValue = false,
            parts;

        Ext.each(options, function(option) {
            parts = option.split('=');
            
            if (parts[0] === 'COUNT') {
                me.untilNumberField.setValue(parts[1]);
                me.toggleFields('for');
                didSetValue = true;
                return;
            }
            else if (parts[0] === 'UNTIL') {
                me.untilDateField.setValue(me.parseDate(parts[1]));
                // If the min date is updated before this new value gets set it can sometimes
                // lead to a false validation error showing even though the value is valid. This
                // is a simple hack to essentially refresh the min value validation now:
                me.untilDateField.validate();
                me.toggleFields('until');
                didSetValue = true;
                return;
            }
        }, me);
        
        if (!didSetValue) {
            me.toggleFields('forever');
        }
        
        return me;
    }
});

Ext.define('Extensible.form.recurrence.option.Interval', {
    extend: 'Extensible.form.recurrence.AbstractOption',
    alias: 'widget.extensible.recurrence-interval',
    
    dateLabelFormat: 'l, F j',
    
    unit: 'day',
    
    minValue: 1,
    
    maxValue: 999,
    
    cls: 'extensible-recur-interval',
    
    getItemConfigs: function() {
        var me = this;
        
        return [{
            xtype: 'label',
            text: 'Repeat every'
        },{
            xtype: 'numberfield',
            itemId: me.id + '-interval',
            value: 1,
            width: 55,
            minValue: me.minValue,
            maxValue: me.maxValue,
            allowBlank: false,
            enableKeyEvents: true,
            listeners: {
                'change': Ext.bind(me.onIntervalChange, me)
            }
        },{
            xtype: 'label',
            itemId: me.id + '-date-label'
        }];
    },
    
    initRefs: function() {
        var me = this;
        me.intervalField = me.down('#' + me.id + '-interval');
        me.dateLabel = me.down('#' + me.id + '-date-label');
    },
    
    onIntervalChange: function(field, value, oldValue) {
        this.checkChange();
        this.updateLabel();
    },
    
    getValue: function() {
        if (this.intervalField) {
            return 'INTERVAL=' + this.intervalField.getValue();
        }
        return '';
    },
    
    setValue: function(v) {
        var me = this;
        
        if (!me.preSetValue(v, me.intervalField)) {
            return me;
        }
        if (!v) {
            me.intervalField.setValue(me.minValue);
            return me;
        }
        var options = Ext.isArray(v) ? v : v.split(me.optionDelimiter),
            parts;

        Ext.each(options, function(option) {
            parts = option.split('=');
            
            if (parts[0] === 'INTERVAL') {
                me.intervalField.setValue(parts[1]);
                me.updateLabel();
                return;
            }
        }, me);
        
        return me;
    },
    
    setStartDate: function(dt) {
        this.startDate = dt;
        this.updateLabel();
        return this;
    },
    
    setUnit: function(unit) {
        this.unit = unit;
        this.updateLabel();
        return this;
    },
    
    updateLabel: function(unit){
        var me = this;
        
        if (me.intervalField) {
            //TODO: Refactor for localization
            var s = me.intervalField.getValue() === 1 ? '' : 's';
            me.unit = unit ? unit.toLowerCase() : me.unit || 'day';
            
            if (me.dateLabel) {
                me.dateLabel.update(me.unit + s + ' beginning ' +
                    Ext.Date.format(me.getStartDate(), me.dateLabelFormat));
            }
        }
        return me;
    }
});

Ext.define('Extensible.form.recurrence.option.Monthly', {
    extend: 'Extensible.form.recurrence.AbstractOption',
    alias: 'widget.extensible.recurrence-monthly',
    
    requires: [
        'Ext.form.field.ComboBox',
        'Extensible.lang.Number'
    ],
    
    cls: 'extensible-recur-monthly',
    
    nthComboWidth: 150,
    
    unit: 'month',
    
    afterRender: function() {
        this.callParent(arguments);
        this.isYearly = (this.unit === 'year');
        this.initNthCombo();
    },
    
    getItemConfigs: function() {
        return [{
            xtype: 'label',
            text: 'on the'
        },{
            xtype: 'combobox',
            itemId: this.id + '-nth-combo',
            queryMode: 'local',
            width: this.nthComboWidth,
            triggerAction: 'all',
            forceSelection: true,
            displayField: 'text',
            valueField: 'value',
            store: Ext.create('Ext.data.ArrayStore', {
                fields: ['text', 'value'],
                idIndex: 0,
                data: []
            }),
            listeners: {
                'change': Ext.bind(this.onComboChange, this)
            }
        },{
            xtype: 'label',
            text: 'of each ' + this.unit
        }];
    },
    
    initRefs: function() {
        this.nthCombo = this.down('#' + this.id + '-nth-combo');
    },
    
    onComboChange: function(combo, value) {
        this.checkChange();
    },
    
    setStartDate: function(dt) {
        if (dt.getTime() !== this.startDate.getTime()) {
            this.callParent(arguments);
            this.initNthCombo();
        }
        return this;
    },
    
    initNthCombo: function(){
        if (!this.rendered) {
            return;
        }
        var me = this,
            combo = me.nthCombo,
            store = combo.store,
            dt = me.getStartDate(),
            
            // e.g. 30 (for June):
            lastDayOfMonth = Ext.Date.getLastDateOfMonth(dt).getDate(),
            // e.g. "28th day":
            monthDayText = Ext.Date.format(dt, 'jS') + ' day',
            // e.g. 28:
            dayNum = dt.getDate(),
            // index in the month, e.g. 4 for the 4th Tuesday
            dayIndex = Math.ceil(dayNum / 7),
            // e.g. "TU":
            dayNameAbbreviated = Ext.Date.format(dt, 'D').substring(0,2).toUpperCase(),
            // e.g. "4th Tuesday":
            dayOfWeekText = dayIndex + Extensible.Number.getOrdinalSuffix(dayIndex) + Ext.Date.format(dt, ' l'),
            
            // year-specific additions to the resulting value string, used if we are currently
            // executing from within the Yearly option subclass.
            // e.g. "in 2012":
            yearlyText = me.isYearly ? ' in ' + Ext.Date.format(dt, 'F') : '',
            // e.g. "BYMONTH=2;":
            byMonthValue = me.isYearly ? 'BYMONTH=' + Ext.Date.format(dt, 'n') : '',
            // only use this if yearly:
            delimiter = me.isYearly ? me.optionDelimiter : '',
            
            // the first two combo items, which are always included:
            data = [
                [monthDayText + yearlyText, me.isYearly ? byMonthValue : 'BYMONTHDAY=' + dayNum],
                [dayOfWeekText + yearlyText, byMonthValue + delimiter +
                    'BYDAY=' + dayIndex + dayNameAbbreviated]
            ],
            
            // the currently selected index, which we will try to restore after refreshing the combo:
            idx = store.find('value', combo.getValue());
        
        if (lastDayOfMonth - dayNum < 7) {
            // the start date is the last of a particular day (e.g. last Tuesday) for the month
            data.push(['last ' + Ext.Date.format(dt, 'l') + yearlyText,
                byMonthValue + delimiter + 'BYDAY=-1' + dayNameAbbreviated]);
        }
        if (lastDayOfMonth === dayNum) {
            // the start date is the last day of the month
            data.push(['last day' + yearlyText, byMonthValue + delimiter + 'BYMONTHDAY=-1']);
        }
        
        store.removeAll();
        combo.clearValue();
        store.loadData(data);
        
        if (idx > data.length - 1) {
            // if the previously-selected index is now greater than the number of items in the
            // combo default to the last item in the new list
            idx = data.length - 1;
        }
        
        combo.setValue(store.getAt(idx > -1 ? idx : 0).data.value);
        
        return me;
    },
    
    getValue: function() {
        var me = this;
        
        if (me.nthCombo) {
            return me.nthCombo.getValue();
        }
        return '';
    },
    
    setValue: function(v) {
        var me = this;
        
        if (!me.preSetValue(v, me.nthCombo)) {
            return me;
        }
        if (!v) {
            var defaultItem = me.nthCombo.store.getAt(0);
            if (defaultItem) {
                me.nthCombo.setValue(defaultItem.data.value);
            }
            return me;
        }
        var options = Ext.isArray(v) ? v : v.split(me.optionDelimiter),
            parts,
            values = [];

        Ext.each(options, function(option) {
            parts = option.split('=');
            if (parts[0] === 'BYMONTH') {
                // if BYMONTH is present make sure it goes to the beginning of the value
                // string since that's the order the combo sets it in and they must match
                values.unshift(option);
            }
            if (parts[0] === 'BYMONTHDAY' || parts[0] === 'BYDAY') {
                // these go to the back of the value string
                values.push(option);
            }
        }, me);
        
        if (values.length) {
            me.nthCombo.setValue(values.join(me.optionDelimiter));
        }
        
        return me;
    }
});

Ext.define('Extensible.form.recurrence.option.Weekly', {
    extend: 'Extensible.form.recurrence.AbstractOption',
    alias: 'widget.extensible.recurrence-weekly',
    
    requires: [
        'Ext.form.field.Checkbox', // should be required by CheckboxGroup but isn't
        'Ext.form.CheckboxGroup'
    ],
    
    dayValueDelimiter: ',',
    
    cls: 'extensible-recur-weekly',
    
    getItemConfigs: function() {
        var id = this.id;
        
        return [{
            xtype: 'label',
            text: 'on:'
        },{
            xtype: 'checkboxgroup',
            itemId: id + '-days',
            flex: 1,
            items: [
                //**************************************************
                // TODO: Support week start day !== Sunday
                //**************************************************
                { boxLabel: 'Sun', name: 'SU', id: id + '-SU' },
                { boxLabel: 'Mon', name: 'MO', id: id + '-MO' },
                { boxLabel: 'Tue', name: 'TU', id: id + '-TU' },
                { boxLabel: 'Wed', name: 'WE', id: id + '-WE' },
                { boxLabel: 'Thu', name: 'TH', id: id + '-TH' },
                { boxLabel: 'Fri', name: 'FR', id: id + '-FR' },
                { boxLabel: 'Sat', name: 'SA', id: id + '-SA' }
            ],
            listeners: {
                'change': Ext.bind(this.onSelectionChange, this)
            }
        }];
    },
    
    initValue: function() {
        this.callParent(arguments);
        
        if (!this.value) {
            this.selectByDate();
        }
    },
    
    initRefs: function() {
        this.daysCheckboxGroup = this.down('#' + this.id + '-days');
    },
    
    onSelectionChange: function(field, value, oldValue) {
        this.checkChange();
        this.updateLabel();
    },
    
    selectByDate: function(dt) {
        var day = Ext.Date.format(dt || this.getStartDate(), 'D').substring(0,2).toUpperCase();
        this.setValue('BYDAY=' + day);
    },
    
    clearValue: function() {
        this.value = undefined;
        
        if (this.daysCheckboxGroup) {
            this.daysCheckboxGroup.setValue({
                SU:0, MO:0, TU:0, WE:0, TH:0, FR:0, SA:0
            });
        }
    },
    
    getValue: function() {
        var me = this;
        
        if (me.daysCheckboxGroup) {
            // Checkbox group value will look like {MON:"on", TUE:"on", FRI:"on"}
            var fieldValue = me.daysCheckboxGroup.getValue(),
                days = [],
                property;
            
            for (property in fieldValue) {
                if (fieldValue.hasOwnProperty(property)) {
                    // Push the name ('MON') not the value ('on')
                    days.push(property);
                }
            }
            return days.length > 0 ? 'BYDAY=' + days.join(me.dayValueDelimiter) : '';
        }
        return '';
    },
    
    setValue: function(v) {
        var me = this;
        
        if (!me.preSetValue(v, me.daysCheckboxGroup)) {
            return me;
        }
        if (!v) {
            me.daysCheckboxGroup.setValue(null);
            return me;
        }
        var options = Ext.isArray(v) ? v : v.split(me.optionDelimiter),
            compositeValue = {},
            parts, days;

        Ext.each(options, function(option) {
            parts = option.split('=');
            
            if (parts[0] === 'BYDAY') {
                days = parts[1].split(me.dayValueDelimiter);
                    
                Ext.each(days, function(day) {
                    compositeValue[day] = true;
                }, me);
                
                me.daysCheckboxGroup.setValue(compositeValue);
                return;
            }
        }, me);
        
        return me;
    }
});
Ext.define('Extensible.form.recurrence.option.Yearly', {
    extend: 'Extensible.form.recurrence.option.Monthly',
    alias: 'widget.extensible.recurrence-yearly',
    
    cls: 'extensible-recur-yearly',
    
    nthComboWidth: 200,
    
    unit: 'year'
    
});
/* @private
 * Currently not used
 */
Ext.define('Extensible.form.recurrence.FrequencyCombo', {
    extend: 'Ext.form.ComboBox',
    alias: 'widget.extensible.recurrence-frequency',
    
    requires: ['Ext.data.ArrayStore'],
    
    fieldLabel: 'Repeats',
    queryMode: 'local',
    triggerAction: 'all',
    forceSelection: true,
    displayField: 'pattern',
    valueField: 'id',
    cls: 'extensible-recur-frequency',
    
    frequencyText: {
        none     : 'Does not repeat',
        daily    : 'Daily',
        weekdays : 'Every weekday (Mon-Fri)',
        weekly   : 'Weekly',
        monthly  : 'Monthly',
        yearly   : 'Yearly'
    },
    
    initComponent: function() {
        var me = this;
        
        /**
         * @event frequencychange
         * Fires when a frequency list item is selected.
         * @param {Extensible.form.recurrence.Combo} combo This combo box
         * @param {String} value The selected frequency value (one of the names
         * from {@link #frequencyOptions}, e.g. 'DAILY')
         */
        me.addEvents('frequencychange');
        
        /**
         * @cfg {Array} frequencyOptions
         * An array of arrays, each containing the name/value pair that defines a recurring
         * frequency option supported by the frequency combo. This array is bound to the underlying
         * {@link Ext.data.ArrayStore store} to provide the combo list items. Defaults to:
         *
         *    [
         *        ['NONE', this.frequencyText.none],
         *        ['DAILY', this.frequencyText.daily],
         *        ['WEEKDAYS', this.frequencyText.weekdays],
         *        ['WEEKLY', this.frequencyText.weekly],
         *        ['MONTHLY', this.frequencyText.monthly],
         *        ['YEARLY', this.frequencyText.yearly]
         *    ]
         */
        me.frequencyOptions = me.frequencyOptions || [
            ['NONE', me.frequencyText.none],
            ['DAILY', me.frequencyText.daily],
            ['WEEKDAYS', me.frequencyText.weekdays],
            ['WEEKLY', me.frequencyText.weekly],
            ['MONTHLY', me.frequencyText.monthly],
            ['YEARLY', me.frequencyText.yearly]
        ];
        
        me.store = me.store || Ext.create('Ext.data.ArrayStore', {
            fields: ['id', 'pattern'],
            idIndex: 0,
            data: me.frequencyOptions
        });
        
        me.on('select', me.onSelect, me);
        
        me.callParent(arguments);
    },
    
    onSelect: function(combo, records) {
        this.fireEvent('frequencychange', records[0].data.id);
    }
});
/* @private
 * Currently not used
 * Rrule info: http://www.kanzaki.com/docs/ical/rrule.html
 */
Ext.define('Extensible.form.recurrence.Fieldset', {
    extend: 'Ext.form.FieldContainer',
    alias: 'widget.extensible.recurrencefield',
    
    mixins: {
        field: 'Ext.form.field.Field'
    },
    
    requires: [
        'Ext.form.Label',
        'Extensible.form.recurrence.FrequencyCombo',
        'Extensible.form.recurrence.option.Interval',
        'Extensible.form.recurrence.option.Weekly',
        'Extensible.form.recurrence.option.Monthly',
        'Extensible.form.recurrence.option.Yearly',
        'Extensible.form.recurrence.option.Duration'
    ],
    
    //TODO: implement code to use this config.
    // Maybe use xtypes instead for dynamic loading of custom options?
    // Include secondly/minutely/hourly, plugins for M-W-F, T-Th, weekends
    options: [
        'daily', 'weekly', 'weekdays', 'monthly', 'yearly'
    ],
    
    //TODO: implement
    displayStyle: 'field', // or 'dialog'
    
    fieldLabel: 'Repeats',
    fieldContainerWidth: 400,
    startDate: Ext.Date.clearTime(new Date()),
    
    //enableFx: true,
    monitorChanges: true,
    cls: 'extensible-recur-field',
    
    frequencyWidth: null, // defaults to the anchor value
    
    layout: 'anchor',
    defaults: {
        anchor: '100%'
    },
    
    initComponent : function() {
        var me = this;
        
        if (!me.height || me.displayStyle === 'field') {
            delete me.height;
            me.autoHeight = true;
        }
        
        me.items = [{
            xtype: 'extensible.recurrence-frequency',
            hideLabel: true,
            width: this.frequencyWidth,
            itemId: this.id + '-frequency',
            
            listeners: {
                'frequencychange': {
                    fn: this.onFrequencyChange,
                    scope: this
                }
            }
        },{
            xtype: 'container',
            itemId: this.id + '-inner-ct',
            cls: 'extensible-recur-inner-ct',
            autoHeight: true,
            layout: 'anchor',
            hideMode: 'offsets',
            hidden: true,
            width: this.fieldContainerWidth,
            defaults: {
                hidden: true
            },
            items: [{
                xtype: 'extensible.recurrence-interval',
                itemId: this.id + '-interval'
            },{
                xtype: 'extensible.recurrence-weekly',
                itemId: this.id + '-weekly'
            },{
                xtype: 'extensible.recurrence-monthly',
                itemId: this.id + '-monthly'
            },{
                xtype: 'extensible.recurrence-yearly',
                itemId: this.id + '-yearly'
            },{
                xtype: 'extensible.recurrence-duration',
                itemId: this.id + '-duration'
            }]
        }];
        
        me.callParent(arguments);
        
        me.initField();
    },
    
    afterRender: function() {
        this.callParent(arguments);
        this.initRefs();
    },
    
    initRefs: function() {
        var me = this,
            id = me.id;
        
        me.innerContainer = me.down('#' + id + '-inner-ct');
        me.frequencyCombo = me.down('#' + id + '-frequency');
        me.intervalField = me.down('#' + id + '-interval');
        me.weeklyField = me.down('#' + id + '-weekly');
        me.monthlyField = me.down('#' + id + '-monthly');
        me.yearlyField = me.down('#' + id + '-yearly');
        me.durationField = me.down('#' + id + '-duration');
        
        me.initChangeEvents();
    },
    
    initChangeEvents: function() {
        var me = this;
        
        me.intervalField.on('change', me.onChange, me);
        me.weeklyField.on('change', me.onChange, me);
        me.monthlyField.on('change', me.onChange, me);
        me.yearlyField.on('change', me.onChange, me);
        me.durationField.on('change', me.onChange, me);
    },
    
    onChange: function() {
        this.fireEvent('change', this, this.getValue());
    },
    
    onFrequencyChange: function(freq) {
        this.setFrequency(freq);
        this.onChange();
    },
    
    // private
    initValue: function(){
        var me = this;

        me.originalValue = me.lastValue = me.value;

        // Set the initial value - prevent validation on initial set
        me.suspendCheckChange++;
        
        me.setStartDate(me.startDate);
        
        if (me.value !== undefined) {
            me.setValue(me.value);
        }
        else if (me.frequency !== undefined) {
            me.setValue('FREQ=' + me.frequency);
        }
        else{
            me.setValue('');
        }
        me.suspendCheckChange--;
        
        Ext.defer(me.doLayout, 1, me);
        me.onChange();
    },
    
    /**
     * Sets the start date of the recurrence pattern
     * @param {Date} The new start date
     * @return {Extensible.form.recurrence.Fieldset} this
     */
    setStartDate: function(dt) {
        var me = this;
        
        me.startDate = dt;
        
        if (me.innerContainer) {
            me.innerContainer.items.each(function(item) {
                if (item.setStartDate) {
                    item.setStartDate(dt);
                }
            });
        }
        else {
            me.on('afterrender', function() {
                me.setStartDate(dt);
            }, me, {single: true});
        }
        return me;
    },
    
    /**
     * Returns the start date of the recurrence pattern (defaults to the current date
     * if not explicitly set via {@link #setStartDate} or the constructor).
     * @return {Date} The recurrence start date
     */
    getStartDate: function() {
        return this.startDate;
    },
    
    /**
     * Return true if the fieldset currently has a recurrence value set, otherwise returns false.
     */
    isRecurring: function() {
        return this.getValue() !== '';
    },
    
    getValue: function() {
        if (!this.innerContainer) {
            return this.value;
        }
        if (this.frequency === 'NONE') {
            return '';
        }
        
        var values,
            itemValue;
        
        if (this.frequency === 'WEEKDAYS') {
            values = ['FREQ=WEEKLY','BYDAY=MO,TU,WE,TH,FR'];
        }
        else {
            values = ['FREQ=' + this.frequency];
        }
        
        this.innerContainer.items.each(function(item) {
            if(item.isVisible() && item.getValue){
                itemValue = item.getValue();
                if (this.includeItemValue(itemValue)) {
                    values.push(itemValue);
                }
            }
        }, this);
        
        return values.length > 1 ? values.join(';') : values[0];
    },
    
    includeItemValue: function(value) {
        if (value) {
            if (value === 'INTERVAL=1') {
                // Interval is assumed to be 1 in the spec by default, no need to include it
                return false;
            }
            var day = Ext.Date.format(this.startDate, 'D').substring(0,2).toUpperCase();
            if (value === ('BYDAY=' + day)) {
                // BYDAY is only required if different from the pattern start date
                return false;
            }
            return true;
        }
        return false;
    },
    
    getDescription: function() {
        var value = this.getValue(),
            text = '';
        
        // switch(value) {
            // default:
                // text = 'No recurrence';
        // }
        return 'Friendly text : ' + text;
    },
    
    setValue: function(value){
        var me = this;
        
        me.value = (!value || value === 'NONE' ? '' : value);
        
        if (!me.frequencyCombo || !me.innerContainer) {
            me.on('afterrender', function() {
                me.setValue(value);
            }, me, {
                single: true
            });
            return;
        }

        var parts = me.value.split(';');
        
        if (me.value === '') {
            me.setFrequency('NONE');
        }
        else {
            Ext.each(parts, function(part) {
                if (part.indexOf('FREQ') > -1) {
                    var freq = part.split('=')[1];
                    me.setFrequency(freq);
                    me.checkChange();
                    return;
                }
            }, me);
        }
        
        me.innerContainer.items.each(function(item) {
            if (item.setValue) {
                item.setValue(me.value);
            }
        });
        
        me.checkChange();
        
        return me;
    },
    
    setFrequency: function(freq) {
        var me = this;
        
        me.frequency = freq;
        
        if (me.frequencyCombo) {
            me.frequencyCombo.setValue(freq);
            me.showOptions(freq);
            
            this.innerContainer.items.each(function(item) {
                item.setFrequency(freq);
            });
        }
        else {
            me.on('afterrender', function() {
                me.frequencyCombo.setValue(freq);
                me.showOptions(freq);
            }, me, {single: true});
        }
        return me;
    },
    
    showOptions: function(freq) {
        var me = this,
            unit = 'day';
        
        if (freq === 'NONE') {
            // me.innerContainer.items.each(function(item) {
                // item.hide();
            // });
            me.innerContainer.hide();
        }
        else {
            me.intervalField.show();
            me.durationField.show();
            me.innerContainer.show();
        }
        
        switch(freq){
            case 'DAILY':
            case 'WEEKDAYS':
                me.weeklyField.hide();
                me.monthlyField.hide();
                me.yearlyField.hide();
                
                if (freq === 'WEEKDAYS') {
                    unit = 'week';
                }
                break;
            
            case 'WEEKLY':
                me.weeklyField.show();
                me.monthlyField.hide();
                me.yearlyField.hide();
                unit = 'week';
                break;
            
            case 'MONTHLY':
                me.monthlyField.show();
                me.weeklyField.hide();
                me.yearlyField.hide();
                unit = 'month';
                break;
            
            case 'YEARLY':
                me.yearlyField.show();
                me.weeklyField.hide();
                me.monthlyField.hide();
                unit = 'year';
                break;
        }

        me.intervalField.updateLabel(unit);
    }
});
Ext.define('Extensible.form.recurrence.RangeEditPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.extensible.recurrence-rangeeditpanel',
    
    cls: 'extensible-recur-edit-options',
    
    headerText: 'There are multiple events in this series. How would you like your changes applied?',
    optionSingleButtonText: 'Single',
    optionSingleDescription: 'Apply to this event only. No other events in the series will be affected.',
    optionFutureButtonText: 'Future',
    optionFutureDescription: 'Apply to this and all following events only. Past events will be unaffected.',
    optionAllButtonText: 'All Events',
    optionAllDescription: 'Apply to every event in this series.',
    
    editModes: {
        SINGLE: 'single',
        FUTURE: 'future',
        ALL: 'all'
    },
    
    border: false,
    
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    // private
    initComponent: function(){
        var me = this;
        
        me.editMode = me.editMode || me.editModes.ALL;
        
        me.items = [
            me.getHeaderConfig(),
            me.getOptionPanelConfig(),
            me.getSummaryConfig()
        ];
        me.callParent(arguments);
    },
    
    getHeaderConfig: function() {
        return {
            xtype: 'component',
            html: this.headerText,
            height: 55,
            padding: 15
        };
    },
    
    getSummaryConfig: function() {
        return {
            xtype: 'component',
            itemId: this.id + '-summary',
            html: this.optionSingleDescription,
            flex: 1,
            padding: 15
        };
    },
    
    getOptionPanelConfig: function() {
        return {
            xtype: 'panel',
            border: false,
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            items: this.getOptionButtonConfigs()
        };
    },
    
    getOptionButtonConfigs: function() {
        var me = this,
            defaultConfig = {
                xtype: 'button',
                iconAlign: 'top',
                enableToggle: true,
                scale: 'large',
                width: 80,
                toggleGroup: 'recur-toggle',
                toggleHandler: me.onToggle,
                scope: me
        },
        items = [Ext.apply({
            itemId: me.id + '-single',
            text: me.optionSingleButtonText,
            iconCls: 'recur-edit-single',
            pressed: me.editMode === me.editModes.SINGLE
        }, defaultConfig),
        Ext.apply({
            itemId: me.id + '-future',
            text: me.optionFutureButtonText,
            iconCls: 'recur-edit-future',
            pressed: me.editMode === me.editModes.FUTURE
        }, defaultConfig),
        Ext.apply({
            itemId: me.id + '-all',
            text: me.optionAllButtonText,
            iconCls: 'recur-edit-all',
            pressed: me.editMode === me.editModes.ALL
        }, defaultConfig)];
        
        return items;
    },
    
    getEditMode: function() {
        return this.editMode;
    },
    
    showEditModes: function(modes) {
        modes = modes || [];
        
        var me = this,
            i = 0,
            btn,
            len = modes.length;
        
        // If modes were passed in hide all by default so we can only show the
        // passed ones, otherwise if nothing was passed in show all
        me.down('#' + me.id + '-single')[len ? 'hide' : 'show']();
        me.down('#' + me.id + '-future')[len ? 'hide' : 'show']();
        me.down('#' + me.id + '-all')[len ? 'hide' : 'show']();
        
        for (; i < len; i++) {
            btn = me.down('#' + me.id + '-' + modes[i]);
            if (btn) {
                btn.show();
            }
        }
    },
    
    onToggle: function(btn) {
        var me = this,
            summaryEl = me.getComponent(me.id + '-summary').getEl();
        
        if (btn.itemId === me.id + '-single') {
            summaryEl.update(me.optionSingleDescription);
            me.editMode = me.editModes.SINGLE;
        }
        else if (btn.itemId === me.id + '-future') {
            summaryEl.update(me.optionFutureDescription);
            me.editMode = me.editModes.FUTURE;
        }
        else {
            summaryEl.update(me.optionAllDescription);
            me.editMode = me.editModes.ALL;
        }
    }
});
Ext.define('Extensible.form.recurrence.RangeEditWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.extensible.recurrence-rangeeditwindow',
    singleton: true,
    
    requires: [
        'Extensible.form.recurrence.RangeEditPanel'
    ],
    
    // Locale configs
    title: 'Recurring Event Options',
    width: 350,
    height: 240,
    saveButtonText: 'Save',
    cancelButtonText: 'Cancel',
    
    // General configs
    closeAction: 'hide',
    modal: true,
    resizable: false,
    constrain: true,
    buttonAlign: 'right',
    layout: 'fit',
    
    formPanelConfig: {
        border: false
    },
    
    initComponent: function() {
        this.items = [{
            xtype: 'extensible.recurrence-rangeeditpanel',
            itemId: this.id + '-recur-panel'
        }];
        this.fbar = this.getFooterBarConfig();
        
        this.callParent(arguments);
    },
    
    getRangeEditPanel: function() {
        return this.down('#' + this.id + '-recur-panel');
    },
    
    /**
     * Configure the window and show it
     * @param {Object} options Valid properties: editModes[], callback, scope 
     */
    prompt: function(o) {
        this.callbackFunction = Ext.bind(o.callback, o.scope || this);
        this.getRangeEditPanel().showEditModes(o.editModes);
        this.show();
    },
    
    getFooterBarConfig: function() {
        var cfg = ['->', {
                text: this.saveButtonText,
                itemId: this.id + '-save-btn',
                disabled: false,
                handler: this.onSaveAction,
                scope: this
            },{
                text: this.cancelButtonText,
                itemId: this.id + '-cancel-btn',
                disabled: false,
                handler: this.onCancelAction,
                scope: this
            }];
        
        return cfg;
    },
    
    onSaveAction: function() {
        var mode = this.getComponent(this.id + '-recur-panel').getEditMode();
        this.callbackFunction(mode);
        this.close();
    },
    
    onCancelAction: function() {
        this.callbackFunction(false);
        this.close();
    }
});


/*
Extensible 1.5.1
Copyright(c) 2010-2012 Extensible, LLC
licensing@ext.ensible.com
http://ext.ensible.com
*/
/**
 * @class Extensible.calendar.data.EventMappings
 * @extends Object
 * <p>A simple object that provides the field definitions for
 * {@link Extensible.calendar.EventRecord EventRecord}s so that they can be easily overridden.</p>
 *
 * <p>There are several ways of overriding the default Event record mappings to customize how
 * Ext records are mapped to your back-end data model. If you only need to change a handful
 * of field properties you can directly modify the EventMappings object as needed and then
 * reconfigure it. The simplest approach is to only override specific field attributes:</p>
 * <pre><code>
var M = Extensible.calendar.data.EventMappings;
M.Title.mapping = 'evt_title';
M.Title.name = 'EventTitle';
Extensible.calendar.EventRecord.reconfigure();
</code></pre>
 *
 * <p>You can alternately override an entire field definition using object-literal syntax, or
 * provide your own custom field definitions (as in the following example). Note that if you do
 * this, you <b>MUST</b> include a complete field definition, including the <tt>type</tt> attribute
 * if the field is not the default type of <tt>string</tt>.</p>
 * <pre><code>
// Add a new field that does not exist in the default EventMappings:
Extensible.calendar.data.EventMappings.Timestamp = {
    name: 'Timestamp',
    mapping: 'timestamp',
    type: 'date'
};
Extensible.calendar.EventRecord.reconfigure();
</code></pre>
 *
 * <p>If you are overriding a significant number of field definitions it may be more convenient
 * to simply redefine the entire EventMappings object from scratch. The following example
 * redefines the same fields that exist in the standard EventRecord object but the names and
 * mappings have all been customized. Note that the name of each field definition object
 * (e.g., 'EventId') should <b>NOT</b> be changed for the default EventMappings fields as it
 * is the key used to access the field data programmatically.</p>
 * <pre><code>
Extensible.calendar.data.EventMappings = {
    EventId:     {name: 'ID', mapping:'evt_id', type:'int'},
    CalendarId:  {name: 'CalID', mapping: 'cal_id', type: 'int'},
    Title:       {name: 'EvtTitle', mapping: 'evt_title'},
    StartDate:   {name: 'StartDt', mapping: 'start_dt', type: 'date', dateFormat: 'c'},
    EndDate:     {name: 'EndDt', mapping: 'end_dt', type: 'date', dateFormat: 'c'},
    RRule:       {name: 'RecurRule', mapping: 'recur_rule'},
    Location:    {name: 'Location', mapping: 'location'},
    Notes:       {name: 'Desc', mapping: 'full_desc'},
    Url:         {name: 'LinkUrl', mapping: 'link_url'},
    IsAllDay:    {name: 'AllDay', mapping: 'all_day', type: 'boolean'},
    Reminder:    {name: 'Reminder', mapping: 'reminder'},
    
    // We can also add some new fields that do not exist in the standard EventRecord:
    CreatedBy:   {name: 'CreatedBy', mapping: 'created_by'},
    IsPrivate:   {name: 'Private', mapping:'private', type:'boolean'}
};
// Don't forget to reconfigure!
Extensible.calendar.EventRecord.reconfigure();
</code></pre>
 *
 * <p><b>NOTE:</b> Any record reconfiguration you want to perform must be done <b>PRIOR to</b>
 * initializing your data store, otherwise the changes will not be reflected in the store's records.</p>
 *
 * <p>Another important note is that if you alter the default mapping for <tt>EventId</tt>, make sure to add
 * that mapping as the <tt>idProperty</tt> of your data reader, otherwise it won't recognize how to
 * access the data correctly and will treat existing records as phantoms. Here's an easy way to make sure
 * your mapping is always valid:</p>
 * <pre><code>
var reader = new Ext.data.JsonReader({
    totalProperty: 'total',
    successProperty: 'success',
    root: 'data',
    messageProperty: 'message',
    
    // read the id property generically, regardless of the mapping:
    idProperty: Extensible.calendar.data.EventMappings.EventId.mapping  || 'id',
    
    // this is also a handy way to configure your reader's fields generically:
    fields: Extensible.calendar.EventRecord.prototype.fields.getRange()
});
</code></pre>
 */
Ext.ns('Extensible.calendar.data');

Extensible.calendar.data.EventMappings = {
	EventId        : {
		name   : 'EventId',
		mapping: 'id',
		type   : 'int'
	},
	CalendarId     : {
		name   : 'CalendarId',
		mapping: 'calendarId',
		type   : 'string'
	},
	Category       : {
		name   : 'Category',
		mapping: 'category',
		type   : 'int'
	},
	Facility       : {
		name   : 'Facility',
		mapping: 'facility',
		type   : 'int'
	},
	BillingFacility: {
		name   : 'BillingFacility',
		mapping: 'billing_facility',
		type   : 'int'
	},
	Patient        : {
		name   : 'Patient',
		mapping: 'patient_id',
		type   : 'int'
	},
	Title          : {
		name   : 'Title',
		mapping: 'title',
		type   : 'string'
	},
	Status         : {
		name   : 'Status',
		mapping: 'status',
		type   : 'string'
	},
	StartDate      : {
		name      : 'StartDate',
		mapping   : 'start',
		type      : 'date',
		dateFormat: 'c'
	},
	EndDate        : {
		name      : 'EndDate',
		mapping   : 'end',
		type      : 'date',
		dateFormat: 'c'
	},
	Location       : {
		name   : 'Location',
		mapping: 'loc',
		type   : 'string'
	},
	Notes          : {
		name   : 'Notes',
		mapping: 'notes',
		type   : 'string'
	},
	Url            : {
		name   : 'Url',
		mapping: 'url',
		type   : 'string'
	},
	IsAllDay       : {
		name   : 'IsAllDay',
		mapping: 'ad',
		type   : 'boolean'
	},
	Reminder       : {
		name   : 'Reminder',
		mapping: 'rem',
		type   : 'string'
	},
    
	// ----- Recurrence properties -----

    // NOTE: Only RRule and Duration need to be persisted. The other properties
    // do need to be mapped as they are used on the back end, but typically they
    // are transient properties only used during processing of requests and do
    // not need to be stored in a DB.
    
    // The iCal-formatted RRULE (recurrence rule) pattern.
    // (See: http://www.kanzaki.com/docs/ical/rrule.html)
    // While technically recurrence could be implemented in other custom
    // ways, the iCal format is the de facto industry standard, offers
    // interoperability with other calendar apps (e.g. Google Calendar,
    // Apple iCal, etc.) and provides a compact storage format. You could
    // choose to provide a custom implementation, but out of the box only
    // the iCal RRULE format is handled by the components.
    RRule: {
        name:    'RRule',
        mapping: 'rrule',
        type:    'string'
    },
    
    // When using recurrence, the standard EndDate value will be the end date
    // of the _recurrence series_, not the end date of the "event". In fact,
    // with recurrence there is no single "event", only a pattern that generates
    // event instances, each of which has a separate start and end date.
    // Because of this we also store the duration of the event when using
    // recurrence so that the end date of each event instance can be
    // properly calculated.
    Duration: {
        name:         'Duration',
        mapping:      'duration',
        defaultValue: -1, // the standard int default of 0 is actually a valid duration
        type:         'int'
    },
    
    // This is used to associate recurring event instances back to their
    // original master events when sending edit requests to the server. This
    // is required since each individual event instance will have a unique id
    // (required by Ext stores) which is not guaranteed to be a real PK since
    // typically these will be generated from the RRULE pattern, not real events
    // that exist in the DB.
    OriginalEventId: {
        name:    'OriginalEventId',
        mapping: 'origid',
        type:    'string'
    },
    
    // In cases where editing an event would require an exception date to be stored,
    // the event instance's original start date must be used. Since the start date
    // could be edited (and would not match as an exception in that case) the original
    // start date is preserved prior to editing and sent with each request.
    RInstanceStartDate: {
        name:       'RInstanceStartDate',
        mapping:    'ristart',
        type:       'date',
        dateFormat: 'c'
    },
    
    // Recurrence edit mode ('single', 'future' or 'all'). This is transient data
    // and would typically not be persisted (it's ignored by the calendar for
    // display purposes), but it's kept on the record for ease of transmission to
    // the server, and because multiple batched events could have different edit modes.
    REditMode: {
        name:    'REditMode',
        mapping: 'redit',
        type:    'string'
    }
};
/**
 * @class Extensible.calendar.data.CalendarMappings
 * @extends Object
 * A simple object that provides the field definitions for
 * {@link Extensible.calendar.data.CalendarModel CalendarRecord}s so that they can be easily overridden.
 *
 * <p>There are several ways of overriding the default Calendar record mappings to customize how
 * Ext records are mapped to your back-end data model. If you only need to change a handful
 * of field properties you can directly modify the CalendarMappings object as needed and then
 * reconfigure it. The simplest approach is to only override specific field attributes:</p>
 * <pre><code>
var M = Extensible.calendar.data.CalendarMappings;
M.Title.mapping = 'cal_title';
M.Title.name = 'CalTitle';
Extensible.calendar.data.CalendarModel.reconfigure();
</code></pre>
 *
 * <p>You can alternately override an entire field definition using object-literal syntax, or
 * provide your own custom field definitions (as in the following example). Note that if you do
 * this, you <b>MUST</b> include a complete field definition, including the <tt>type</tt> attribute
 * if the field is not the default type of <tt>string</tt>.</p>
 * <pre><code>
// Add a new field that does not exist in the default CalendarMappings:
Extensible.calendar.data.CalendarMappings.Owner = {
    name: 'Owner',
    mapping: 'owner',
    type: 'string'
};
Extensible.calendar.data.CalendarModel.reconfigure();
</code></pre>
 *
 * <p>If you are overriding a significant number of field definitions it may be more convenient
 * to simply redefine the entire CalendarMappings object from scratch. The following example
 * redefines the same fields that exist in the standard CalendarRecord object but the names and
 * mappings have all been customized. Note that the name of each field definition object
 * (e.g., 'CalendarId') should <b>NOT</b> be changed for the default CalendarMappings fields as it
 * is the key used to access the field data programmatically.</p>
 * <pre><code>
Extensible.calendar.data.CalendarMappings = {
    CalendarId:   {name:'ID', mapping: 'id', type: 'int'},
    Title:        {name:'CalTitle', mapping: 'title', type: 'string'},
    Description:  {name:'Desc', mapping: 'desc', type: 'string'},
    ColorId:      {name:'Color', mapping: 'color', type: 'int'},
    IsHidden:     {name:'Hidden', mapping: 'hidden', type: 'boolean'},

    // We can also add some new fields that do not exist in the standard CalendarRecord:
    Owner:        {name: 'Owner', mapping: 'owner'}
};
// Don't forget to reconfigure!
Extensible.calendar.data.CalendarModel.reconfigure();
</code></pre>
 *
 * <p><b>NOTE:</b> Any record reconfiguration you want to perform must be done <b>PRIOR to</b>
 * initializing your data store, otherwise the changes will not be reflected in the store's records.</p>
 *
 * <p>Another important note is that if you alter the default mapping for <tt>CalendarId</tt>, make sure to add
 * that mapping as the <tt>idProperty</tt> of your data reader, otherwise it won't recognize how to
 * access the data correctly and will treat existing records as phantoms. Here's an easy way to make sure
 * your mapping is always valid:</p>
 * <pre><code>
var reader = new Ext.data.JsonReader({
    totalProperty: 'total',
    successProperty: 'success',
    root: 'data',
    messageProperty: 'message',

    // read the id property generically, regardless of the mapping:
    idProperty: Extensible.calendar.data.CalendarMappings.CalendarId.mapping  || 'id',

    // this is also a handy way to configure your reader's fields generically:
    fields: Extensible.calendar.data.CalendarModel.prototype.fields.getRange()
});
</code></pre>
 */
Ext.ns('Extensible.calendar.data');

Extensible.calendar.data.CalendarMappings = {
    CalendarId: {
        name:    'CalendarId',
        mapping: 'id',
        type:    'string'
    },
    Title: {
        name:    'Title',
        mapping: 'title',
        type:    'string'
    },
    Description: {
        name:    'Description',
        mapping: 'desc',
        type:    'string'
    },
    ColorId: {
        name:    'ColorId',
        mapping: 'color',
        type:    'int'
    },
    IsHidden: {
        name:    'IsHidden',
        mapping: 'hidden',
        type:    'boolean'
    }
};
/**
 * @class Extensible.calendar.template.BoxLayout
 * @extends Ext.XTemplate
 * <p>This is the template used to render calendar views based on small day boxes within a non-scrolling container (currently
 * the {@link Extensible.calendar.view.Month MonthView} and the all-day headers for {@link Extensible.calendar.view.Day DayView} and 
 * {@link Extensible.calendar.view.Week WeekView}. This template is automatically bound to the underlying event store by the 
 * calendar components and expects records of type {@link Extensible.calendar.data.EventModel}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.template.BoxLayout', {
    extend: 'Ext.XTemplate',
    
    requires: ['Ext.Date'],
    
    /**
     * @cfg {String} firstWeekDateFormat
     * The date format used for the day boxes in the first week of the view only (subsequent weeks
     * use the {@link #otherWeeksDateFormat} config). Defaults to 'D j'. Note that if the day names header is displayed
     * above the first row (e.g., {@link Extensible.calendar.view.Month#showHeader MonthView.showHeader} = true)
     * then this value is ignored and {@link #otherWeeksDateFormat} will be used instead.
     */
    firstWeekDateFormat: 'D j',
    /**
     * @cfg {String} otherWeeksDateFormat
     * The date format used for the date in day boxes (other than the first week, which is controlled by
     * {@link #firstWeekDateFormat}). Defaults to 'j'.
     */
    otherWeeksDateFormat: 'j',
    /**
     * @cfg {String} singleDayDateFormat
     * The date format used for the date in the header when in single-day view (defaults to 'l, F j, Y').
     */
    singleDayDateFormat: 'l, F j, Y',
    /**
     * @cfg {String} multiDayFirstDayFormat
     * The date format used for the date in the header when more than one day are visible (defaults to 'M j, Y').
     */
    multiDayFirstDayFormat: 'M j, Y',
    /**
     * @cfg {String} multiDayMonthStartFormat
     * The date format to use for the first day in a month when more than one day are visible (defaults to 'M j').
     * Note that if this day falls on the first day within the view, {@link #multiDayFirstDayFormat} takes precedence.
     */
    multiDayMonthStartFormat: 'M j',
    
    // private
    constructor: function(config){
        
        Ext.apply(this, config);
    
        var weekLinkTpl = this.showWeekLinks ? '<div id="{weekLinkId}" class="ext-cal-week-link">{weekNum}</div>' : '';
        
        Extensible.calendar.template.BoxLayout.superclass.constructor.call(this,
            '<tpl for="weeks">',
                '<div id="{[this.id]}-wk-{[xindex-1]}" class="ext-cal-wk-ct" style="top:{[this.getRowTop(xindex, xcount)]}%; height:{[this.getRowHeight(xcount)]}%;">',
                    weekLinkTpl,
                    '<table class="ext-cal-bg-tbl" cellpadding="0" cellspacing="0">',
                        '<tbody>',
                            '<tr>',
                                '<tpl for=".">',
                                     '<td id="{[this.id]}-day-{date:date("Ymd")}" class="{cellCls}">&#160;</td>',
                                '</tpl>',
                            '</tr>',
                        '</tbody>',
                    '</table>',
                    '<table class="ext-cal-evt-tbl" cellpadding="0" cellspacing="0">',
                        '<tbody>',
                            '<tr>',
                                '<tpl for=".">',
                                    '<td id="{[this.id]}-ev-day-{date:date("Ymd")}" class="{titleCls}"><div>{title}</div></td>',
                                '</tpl>',
                            '</tr>',
                        '</tbody>',
                    '</table>',
                '</div>',
            '</tpl>', {
                getRowTop: function(i, ln){
                    return ((i-1)*(100/ln));
                },
                getRowHeight: function(ln){
                    return 100/ln;
                }
            }
        );
    },
    
    // private
    applyTemplate : function(o){
        
        Ext.apply(this, o);
        
        var w = 0, title = '', first = true, isToday = false, showMonth = false, 
            prevMonth = false, nextMonth = false, isWeekend = false,
            weekendCls = o.weekendCls,
            prevMonthCls = o.prevMonthCls,
            nextMonthCls = o.nextMonthCls,
            todayCls = o.todayCls,
            weeks = [[]],
            today = Extensible.Date.today(),
            dt = Ext.Date.clone(this.viewStart),
            thisMonth = this.startDate.getMonth();
        
        for(; w < this.weekCount || this.weekCount == -1; w++){
            if(dt > this.viewEnd){
                break;
            }
            weeks[w] = [];
            
            for(var d = 0; d < this.dayCount; d++){
                isToday = dt.getTime() === today.getTime();
                showMonth = first || (dt.getDate() == 1);
                prevMonth = (dt.getMonth() < thisMonth) && this.weekCount == -1;
                nextMonth = (dt.getMonth() > thisMonth) && this.weekCount == -1;
                isWeekend = dt.getDay() % 6 === 0;
                
                if(dt.getDay() == 1){
                    // The ISO week format 'W' is relative to a Monday week start. If we
                    // make this check on Sunday the week number will be off.
                    weeks[w].weekNum = this.showWeekNumbers ? Ext.Date.format(dt, 'W') : '&#160;';
                    weeks[w].weekLinkId = 'ext-cal-week-'+Ext.Date.format(dt, 'Ymd');
                }
                
                if(showMonth){
                    if(isToday){
                        title = this.getTodayText();
                    }
                    else{
                        title = Ext.Date.format(dt, this.dayCount == 1 ? this.singleDayDateFormat : 
                                (first ? this.multiDayFirstDayFormat : this.multiDayMonthStartFormat));
                    }
                }
                else{
                    var dayFmt = (w == 0 && this.showHeader !== true) ? this.firstWeekDateFormat : this.otherWeeksDateFormat;
                    title = isToday ? this.getTodayText() : Ext.Date.format(dt, dayFmt);
                }
                
                weeks[w].push({
                    title: title,
                    date: Ext.Date.clone(dt),
                    titleCls: 'ext-cal-dtitle ' + (isToday ? ' ext-cal-dtitle-today' : '') + 
                        (w==0 ? ' ext-cal-dtitle-first' : '') +
                        (prevMonth ? ' ext-cal-dtitle-prev' : '') + 
                        (nextMonth ? ' ext-cal-dtitle-next' : ''),
                    cellCls: 'ext-cal-day ' + (isToday ? ' '+todayCls : '') + 
                        (d==0 ? ' ext-cal-day-first' : '') +
                        (prevMonth ? ' '+prevMonthCls : '') +
                        (nextMonth ? ' '+nextMonthCls : '') +
                        (isWeekend && weekendCls ? ' '+weekendCls : '')
                });
                dt = Extensible.Date.add(dt, {days: 1});
                first = false;
            }
        }
        
        if (Ext.getVersion().isLessThan('4.1')) {
            return Extensible.calendar.template.BoxLayout.superclass.applyTemplate.call(this, {
                weeks: weeks
            });
        }
        else {
            return this.applyOut({
                weeks: weeks
            }, []).join('');
        }
    },
    
    // private
    getTodayText : function(){
        var timeFmt = Extensible.Date.use24HourTime ? 'G:i ' : 'g:ia ',
            todayText = this.showTodayText !== false ? this.todayText : '',
            timeText = this.showTime !== false ? ' <span id="'+this.id+'-clock" class="ext-cal-dtitle-time" aria-live="off">' + 
                    Ext.Date.format(new Date(), timeFmt) + '</span>' : '',
            separator = todayText.length > 0 || timeText.length > 0 ? ' &#8212; ' : ''; // &#8212; == &mdash;
        
        if(this.dayCount == 1){
            return Ext.Date.format(new Date(), this.singleDayDateFormat) + separator + todayText + timeText;
        }
        fmt = this.weekCount == 1 ? this.firstWeekDateFormat : this.otherWeeksDateFormat;
        return todayText.length > 0 ? todayText + timeText : Ext.Date.format(new Date(), fmt) + timeText;
    }
}, 
function() {
    this.createAlias('apply', 'applyTemplate');
});
/**
 * @class Extensible.calendar.template.DayHeader
 * @extends Ext.XTemplate
 * <p>This is the template used to render the all-day event container used in {@link Extensible.calendar.view.Day DayView} and 
 * {@link Extensible.calendar.view.Week WeekView}. Internally the majority of the layout logic is deferred to an instance of
 * {@link Extensible.calendar.template.BoxLayout}.</p> 
 * <p>This template is automatically bound to the underlying event store by the 
 * calendar components and expects records of type {@link Extensible.calendar.data.EventModel}.</p>
 * <p>Note that this template would not normally be used directly. Instead you would use the {@link Extensible.calendar.view.DayTemplate}
 * that internally creates an instance of this template along with a {@link Extensible.calendar.template.DayBody}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.template.DayHeader', {
    extend: 'Ext.XTemplate',
    
    requires: ['Extensible.calendar.template.BoxLayout'],
    
    // private
    constructor: function(config){
        
        Ext.apply(this, config);
    
        this.allDayTpl = Ext.create('Extensible.calendar.template.BoxLayout', config);
        this.allDayTpl.compile();
        
        Extensible.calendar.template.DayHeader.superclass.constructor.call(this,
            '<div class="ext-cal-hd-ct">',
                '<table class="ext-cal-hd-days-tbl" cellspacing="0" cellpadding="0">',
                    '<tbody>',
                        '<tr>',
                            '<td class="ext-cal-gutter"></td>',
                            '<td class="ext-cal-hd-days-td"><div class="ext-cal-hd-ad-inner">{allDayTpl}</div></td>',
                            '<td class="ext-cal-gutter-rt"></td>',
                        '</tr>',
                    '</tbody>',
                '</table>',
            '</div>'
        );
    },
    
    // private
    applyTemplate : function(o){
        var templateConfig = {
            allDayTpl: this.allDayTpl.apply(o)
        };
         
        if (Ext.getVersion().isLessThan('4.1')) {
            return Extensible.calendar.template.DayHeader.superclass.applyTemplate.call(this, templateConfig);
        }
        else {
            return this.applyOut(templateConfig, []).join('');
        }
    }
}, 
function() {
    this.createAlias('apply', 'applyTemplate');
});
/**
 * @class Extensible.calendar.template.DayBody
 * @extends Ext.XTemplate
 * <p>This is the template used to render the scrolling body container used in {@link Extensible.calendar.view.Day DayView} and 
 * {@link Extensible.calendar.view.Week WeekView}. This template is automatically bound to the underlying event store by the 
 * calendar components and expects records of type {@link Extensible.calendar.data.EventModel}.</p>
 * <p>Note that this template would not normally be used directly. Instead you would use the {@link Extensible.calendar.view.DayTemplate}
 * that internally creates an instance of this template along with a {@link Extensible.calendar.DayHeaderTemplate}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.template.DayBody', {
    extend: 'Ext.XTemplate',
    
    // private
    constructor: function(config){
        
        Ext.apply(this, config);
    
        Extensible.calendar.template.DayBody.superclass.constructor.call(this,
            '<table class="ext-cal-bg-tbl" cellspacing="0" cellpadding="0" style="height:{dayHeight}px;">',
                '<tbody>',
                    '<tr height="1">',
                        '<td class="ext-cal-gutter"></td>',
                        '<td colspan="{dayCount}">',
                            '<div class="ext-cal-bg-rows">',
                                '<div class="ext-cal-bg-rows-inner">',
                                    '<tpl for="times">',
                                        '<div class="ext-cal-bg-row ext-row-{[xindex]}" style="height:{parent.hourHeight}px;">',
                                            '<div class="ext-cal-bg-row-div {parent.hourSeparatorCls}" style="height:{parent.hourSeparatorHeight}px;"></div>',
                                        '</div>',
                                    '</tpl>',
                                '</div>',
                            '</div>',
                        '</td>',
                    '</tr>',
                    '<tr>',
                        '<td class="ext-cal-day-times">',
                            '<tpl for="times">',
                                '<div class="ext-cal-bg-row" style="height:{parent.hourHeight}px;">',
                                    '<div class="ext-cal-day-time-inner"  style="height:{parent.hourHeight-1}px;">{.}</div>',
                                '</div>',
                            '</tpl>',
                        '</td>',
                        '<tpl for="days">',
                            '<td class="ext-cal-day-col">',
                                '<div class="ext-cal-day-col-inner">',
                                    '<div id="{[this.id]}-day-col-{.:date("Ymd")}" class="ext-cal-day-col-gutter" style="height:{parent.dayHeight}px;"></div>',
                                '</div>',
                            '</td>',
                        '</tpl>',
                    '</tr>',
                '</tbody>',
            '</table>'
        );
    },

    // private
    applyTemplate : function(o){
        this.today = Extensible.Date.today();
        this.dayCount = this.dayCount || 1;
        
        var i = 0, days = [],
            dt = Ext.Date.clone(o.viewStart);
            
        for(; i<this.dayCount; i++){
            days[i] = Extensible.Date.add(dt, {days: i});
        }

        var times = [],
            start = this.viewStartHour,
            end = this.viewEndHour,
            mins = this.hourIncrement,
            dayHeight = this.hourHeight * (end - start),
            fmt = Extensible.Date.use24HourTime ? 'G:i' : 'ga',
            templateConfig;
        
        // use a fixed DST-safe date so times don't get skipped on DST boundaries
        dt = Extensible.Date.add(new Date('5/26/1972'), {hours: start});
        
        for(i=start; i<end; i++){
            times.push(Ext.Date.format(dt, fmt));
            dt = Extensible.Date.add(dt, {minutes: mins});
        }

        templateConfig = {
            days: days,
            dayCount: days.length,
            times: times,
            hourHeight: this.hourHeight,
            hourSeparatorCls: this.showHourSeparator ? '' : 'no-sep', // the class suppresses the default separator
            dayHeight: dayHeight,
            hourSeparatorHeight: (this.hourHeight / 2)
        };
         
        if (Ext.getVersion().isLessThan('4.1')) {
            return Extensible.calendar.template.DayBody.superclass.applyTemplate.call(this, templateConfig);
        }
        else {
            return this.applyOut(templateConfig, []).join('');
        }
    }
}, 
function() {
    this.createAlias('apply', 'applyTemplate');
});
/**
 * @class Extensible.calendar.template.Month
 * @extends Ext.XTemplate
 * <p>This is the template used to render the {@link Extensible.calendar.view.Month MonthView}. Internally this class defers to an
 * instance of {@link Ext.calerndar.BoxLayoutTemplate} to handle the inner layout rendering and adds containing elements around
 * that to form the month view.</p> 
 * <p>This template is automatically bound to the underlying event store by the 
 * calendar components and expects records of type {@link Extensible.calendar.data.EventModel}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.template.Month', {
    extend: 'Ext.XTemplate',
    
    requires: ['Extensible.calendar.template.BoxLayout'],
    
    /**
     * @cfg {String} dayHeaderFormat
     * The date format to use for day headers, if used (defaults to 'D', e.g. 'Mon' for Monday)
     */
    dayHeaderFormat: 'D',
    /**
     * @cfg {String} dayHeaderTitleFormat
     * The date format to use for the day header's HTML title attribute displayed on mouseover 
     * (defaults to 'l, F j, Y', e.g. 'Monday, December 27, 2010')
     */
    dayHeaderTitleFormat: 'l, F j, Y',
    
    // private
    constructor: function(config){
        
        Ext.apply(this, config);
    
        this.weekTpl = Ext.create('Extensible.calendar.template.BoxLayout', config);
        this.weekTpl.compile();
        
        var weekLinkTpl = this.showWeekLinks ? '<div class="ext-cal-week-link-hd">&#160;</div>' : '';
        
        Extensible.calendar.template.Month.superclass.constructor.call(this,
    	    '<div class="ext-cal-inner-ct {extraClasses}">',
                '<div class="ext-cal-hd-ct ext-cal-month-hd">',
                    weekLinkTpl,
    		        '<table class="ext-cal-hd-days-tbl" cellpadding="0" cellspacing="0">',
    		            '<tbody>',
                            '<tr>',
                                '<tpl for="days">',
    		                        '<th class="ext-cal-hd-day{[xindex==1 ? " ext-cal-day-first" : ""]}" title="{title}">{name}</th>',
    		                    '</tpl>',
                            '</tr>',
    		            '</tbody>',
    		        '</table>',
                '</div>',
    	        '<div class="ext-cal-body-ct">{weeks}</div>',
            '</div>'
        );
    },
    
    // private
    applyTemplate : function(o){
        var days = [],
            weeks = this.weekTpl.apply(o),
            dt = o.viewStart,
            D = Extensible.Date,
            templateConfig;
        
        for(var i = 0; i < 7; i++){
            var d = D.add(dt, {days: i});
            days.push({
                name: Ext.Date.format(d, this.dayHeaderFormat),
                title: Ext.Date.format(d, this.dayHeaderTitleFormat)
            });
        }
        
        var extraClasses = this.showHeader === true ? '' : 'ext-cal-noheader';
        if(this.showWeekLinks){
            extraClasses += ' ext-cal-week-links';
        }
        
        templateConfig = {
            days: days,
            weeks: weeks,
            extraClasses: extraClasses
        };
         
        if (Ext.getVersion().isLessThan('4.1')) {
            return Extensible.calendar.template.Month.superclass.applyTemplate.call(this, templateConfig);
        }
        else {
            return this.applyOut(templateConfig, []).join('');
        }
    }
}, 
function() {
    this.createAlias('apply', 'applyTemplate');
});
/*
 * @class Ext.dd.ScrollManager
 * <p>Provides automatic scrolling of overflow regions in the page during drag operations.</p>
 * <p>The ScrollManager configs will be used as the defaults for any scroll container registered with it,
 * but you can also override most of the configs per scroll container by adding a
 * <tt>ddScrollConfig</tt> object to the target element that contains these properties: {@link #hthresh},
 * {@link #vthresh}, {@link #increment} and {@link #frequency}.  Example usage:
 * <pre><code>
var el = Ext.get('scroll-ct');
el.ddScrollConfig = {
    vthresh: 50,
    hthresh: -1,
    frequency: 100,
    increment: 200
};
Ext.dd.ScrollManager.register(el);
</code></pre>
 * <b>Note: This class uses "Point Mode" and is untested in "Intersect Mode".</b>
 * @singleton
 */
Ext.define('Ext.dd.ScrollManager', {
    singleton: true,
    requires: [
        'Ext.dd.DragDropManager'
    ],

    constructor: function() {
        var ddm = Ext.dd.DragDropManager;
        ddm.fireEvents = Ext.Function.createSequence(ddm.fireEvents, this.onFire, this);
        ddm.stopDrag = Ext.Function.createSequence(ddm.stopDrag, this.onStop, this);
        this.doScroll = Ext.Function.bind(this.doScroll, this);
        this.ddmInstance = ddm;
        this.els = {};
        this.dragEl = null;
        this.proc = {};
    },

    onStop: function(e){
//        var sm = Ext.dd.ScrollManager;
//        sm.dragEl = null;
//        sm.clearProc();
        this.dragEl = null;
        this.clearProc();
    },

    triggerRefresh: function() {
        if (this.ddmInstance.dragCurrent) {
            this.ddmInstance.refreshCache(this.ddmInstance.dragCurrent.groups);
        }
    },

    doScroll: function() {
        if (this.ddmInstance.dragCurrent) {
            var proc   = this.proc,
                procEl = proc.el,
                ddScrollConfig = proc.el.ddScrollConfig,
                inc = ddScrollConfig ? ddScrollConfig.increment : this.increment;

            if (!this.animate) {
                if (procEl.scroll(proc.dir, inc)) {
                    this.triggerRefresh();
                }
            } else {
                procEl.scroll(proc.dir, inc, true, this.animDuration, this.triggerRefresh);
            }
        }
    },

    clearProc: function() {
        var proc = this.proc;
        if (proc.id) {
            clearInterval(proc.id);
        }
        proc.id = 0;
        proc.el = null;
        proc.dir = "";
    },

    startProc: function(el, dir) {
        this.clearProc();
        this.proc.el = el;
        this.proc.dir = dir;
        var group = el.ddScrollConfig ? el.ddScrollConfig.ddGroup : undefined,
            freq  = (el.ddScrollConfig && el.ddScrollConfig.frequency)
                  ? el.ddScrollConfig.frequency
                  : this.frequency;

        if (group === undefined || this.ddmInstance.dragCurrent.ddGroup == group) {
            this.proc.id = setInterval(this.doScroll, freq);
        }
    },

    onFire: function(e, isDrop) {
        if (isDrop || !this.ddmInstance.dragCurrent) {
            return;
        }
        if (!this.dragEl || this.dragEl != this.ddmInstance.dragCurrent) {
            this.dragEl = this.ddmInstance.dragCurrent;
            // refresh regions on drag start
            this.refreshCache();
        }

        var xy = e.getXY(),
            pt = e.getPoint(),
            proc = this.proc,
            els = this.els;

        for (var id in els) {
            var el = els[id], r = el._region;
            var c = el.ddScrollConfig ? el.ddScrollConfig : this;
            if (r && r.contains(pt) && el.isScrollable()) {
                if (r.bottom - pt.y <= c.vthresh) {
                    if(proc.el != el){
                        this.startProc(el, "down");
                    }
                    return;
                }else if (r.right - pt.x <= c.hthresh) {
                    if (proc.el != el) {
                        this.startProc(el, "left");
                    }
                    return;
                } else if(pt.y - r.top <= c.vthresh) {
                    if (proc.el != el) {
                        this.startProc(el, "up");
                    }
                    return;
                } else if(pt.x - r.left <= c.hthresh) {
                    if (proc.el != el) {
                        this.startProc(el, "right");
                    }
                    return;
                }
            }
        }
        this.clearProc();
    },

    /**
     * Registers new overflow element(s) to auto scroll
     * @param {Mixed/Array} el The id of or the element to be scrolled or an array of either
     */
    register : function(el){
        if (Ext.isArray(el)) {
            for(var i = 0, len = el.length; i < len; i++) {
                    this.register(el[i]);
            }
        } else {
            el = Ext.get(el);
            this.els[el.id] = el;
        }
    },

    /**
     * Unregisters overflow element(s) so they are no longer scrolled
     * @param {Mixed/Array} el The id of or the element to be removed or an array of either
     */
    unregister : function(el){
        if(Ext.isArray(el)){
            for (var i = 0, len = el.length; i < len; i++) {
                this.unregister(el[i]);
            }
        }else{
            el = Ext.get(el);
            delete this.els[el.id];
        }
    },

    /**
     * The number of pixels from the top or bottom edge of a container the pointer needs to be to
     * trigger scrolling (defaults to 25)
     * @type Number
     */
    vthresh : 25,
    /**
     * The number of pixels from the right or left edge of a container the pointer needs to be to
     * trigger scrolling (defaults to 25)
     * @type Number
     */
    hthresh : 25,

    /**
     * The number of pixels to scroll in each scroll increment (defaults to 100)
     * @type Number
     */
    increment : 100,

    /**
     * The frequency of scrolls in milliseconds (defaults to 500)
     * @type Number
     */
    frequency : 500,

    /**
     * True to animate the scroll (defaults to true)
     * @type Boolean
     */
    animate: true,

    /**
     * The animation duration in seconds -
     * MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)
     * @type Number
     */
    animDuration: 0.4,

    /**
     * The named drag drop {@link Ext.dd.DragSource#ddGroup group} to which this container belongs (defaults to undefined).
     * If a ddGroup is specified, then container scrolling will only occur when a dragged object is in the same ddGroup.
     * @type String
     */
    ddGroup: undefined,

    /**
     * Manually trigger a cache refresh.
     */
    refreshCache : function(){
        var els = this.els,
            id;
        for (id in els) {
            if(typeof els[id] == 'object'){ // for people extending the object prototype
                els[id]._region = els[id].getRegion();
            }
        }
    }
});

/**
 * @class Extensible.calendar.dd.StatusProxy
 * A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair. It also
 * contains a calendar-specific drag status message containing details about the dragged event's target drop date range.  
 * This is the default drag proxy used by all calendar views.
 * @constructor
 * @param {Object} config
 */
Ext.define('Extensible.calendar.dd.StatusProxy', {
    extend: 'Ext.dd.StatusProxy',
    
    /**
     * @cfg {String} moveEventCls
     * The CSS class to apply to the status element when an event is being dragged (defaults to 'ext-cal-dd-move').
     */
    moveEventCls : 'ext-cal-dd-move',
    /**
     * @cfg {String} addEventCls
     * The CSS class to apply to the status element when drop is not allowed (defaults to 'ext-cal-dd-add').
     */
    addEventCls : 'ext-cal-dd-add',

    // Overridden to add a separate message element inside the ghost area.
    // Applies only to Ext 4.1 and above, see notes in constructor
    renderTpl: [
        '<div class="' + Ext.baseCSSPrefix + 'dd-drop-icon"></div>',
        '<div class="ext-dd-ghost-ct">',
            '<div id="{id}-ghost" class="' + Ext.baseCSSPrefix + 'dd-drag-ghost"></div>',
            '<div id="{id}-message" class="ext-dd-msg"></div>',
        '</div>'
    ],
    
    // private -- applies only to Ext 4.1 and above, see notes in constructor
    childEls: [
        'ghost',
        'message'
    ],
    
    // private
    constructor: function(config) {
        // In Ext 4.0.x StatusProxy was a plain class that did not inherit from Component,
        // and all of its els were rendered inside the constructor. Unfortunately, because
        // of this none of the standard Component lifecycle methods apply and so we are left
        // with manually overriding the entire constructor function to inject our custom
        // markup and set up our references.
        //
        // In 4.1 StatusProxy was switched to inherit from Component, so the renderTpl and 
        // renderSelectors configs will kick in and generate the proper elements and refs
        // automagically, and will be ignored by 4.0.x.
        if (Ext.getVersion().isLessThan('4.1')) {
            this.preComponentConstructor(config);
        }
        else {
            this.callParent(arguments);
        }
    },
    
    // private -- applies only to Ext <4.1, see notes in constructor
    preComponentConstructor: function(config) {
        var me = this;
        
        Ext.apply(me, config);
        
        me.id = me.id || Ext.id();
        me.proxy = Ext.createWidget('component', {
            floating: true,
            id: me.id || Ext.id(),
            html: me.renderTpl.join(''),
            cls: Ext.baseCSSPrefix + 'dd-drag-proxy ' + me.dropNotAllowed,
            shadow: !config || config.shadow !== false,
            renderTo: document.body
        });
 
        me.el = me.proxy.el;
        me.el.show();
        me.el.setVisibilityMode(Ext.core.Element.VISIBILITY);
        me.el.hide();
 
        me.ghost = Ext.get(me.el.dom.childNodes[1].childNodes[0]);
        me.message = Ext.get(me.el.dom.childNodes[1].childNodes[1]);
        me.dropStatus = me.dropNotAllowed;
    },
    
    // inherit docs
    update : function(html){
        this.callParent(arguments);
        
        // If available, set the ghosted event el to autoHeight for visual consistency
        var el = this.ghost.dom.firstChild;
        if(el){
            Ext.fly(el).setHeight('auto');
        }
    },
    
    /* @private
     * Update the calendar-specific drag status message without altering the ghost element.
     * @param {String} msg The new status message
     */
    updateMsg : function(msg){
        this.message.update(msg);
    }
});
/* @private
 * Internal drag zone implementation for the calendar components. This provides base functionality
 * and is primarily for the month view -- DayViewDD adds day/week view-specific functionality.
 */
Ext.define('Extensible.calendar.dd.DragZone', {
    extend: 'Ext.dd.DragZone',
    
    requires: [
        'Extensible.calendar.dd.StatusProxy',
        'Extensible.calendar.data.EventMappings'
    ],
    
    ddGroup : 'CalendarDD',
    eventSelector : '.ext-cal-evt',
    
    constructor : function(el, config){
        if(!Extensible.calendar._statusProxyInstance){
            Extensible.calendar._statusProxyInstance = Ext.create('Extensible.calendar.dd.StatusProxy');
        }
        this.proxy = Extensible.calendar._statusProxyInstance;
        this.callParent(arguments);
    },
    
    getDragData : function(e){
        // Check whether we are dragging on an event first
        var t = e.getTarget(this.eventSelector, 3);
        if(t){
            var rec = this.view.getEventRecordFromEl(t);
            if(!rec){
                // if rec is null here it usually means there was a timing issue between drag 
                // start and the browser reporting it properly. Simply ignore and it will 
                // resolve correctly once the browser catches up.
                return;
            }
            return {
                type: 'eventdrag',
                ddel: t,
                eventStart: rec.data[Extensible.calendar.data.EventMappings.StartDate.name],
                eventEnd: rec.data[Extensible.calendar.data.EventMappings.EndDate.name],
                proxy: this.proxy
            };
        }
        
        // If not dragging an event then we are dragging on 
        // the calendar to add a new event
        t = this.view.getDayAt(e.getX(), e.getY());
        if(t.el){
            return {
                type: 'caldrag',
                start: t.date,
                proxy: this.proxy
            };
        }
        return null;
    },
    
    onInitDrag : function(x, y){
        if(this.dragData.ddel){
            var ghost = this.dragData.ddel.cloneNode(true),
                child = Ext.fly(ghost).down('dl');
            
            Ext.fly(ghost).setWidth('auto');
            
            if(child){
                // for IE/Opera
                child.setHeight('auto');
            }
            this.proxy.update(ghost);
            this.onStartDrag(x, y);
        }
        else if(this.dragData.start){
            this.onStartDrag(x, y);
        }
        this.view.onInitDrag();
        return true;
    },
    
    afterRepair : function(){
        if(Ext.enableFx && this.dragData.ddel){
            Ext.Element.fly(this.dragData.ddel).highlight(this.hlColor || 'c3daf9');
        }
        this.dragging = false;
    },
    
    getRepairXY : function(e){
        if(this.dragData.ddel){
            return Ext.Element.fly(this.dragData.ddel).getXY();
        }
    },
    
    afterInvalidDrop : function(e, id){
        Ext.select('.ext-dd-shim').hide();
    },
    
    destroy : function(){
        this.callParent(arguments);
        delete Extensible.calendar._statusProxyInstance;
    }    
});
/* @private
 * Internal drop zone implementation for the calendar components. This provides base functionality
 * and is primarily for the month view -- DayViewDD adds day/week view-specific functionality.
 */
Ext.define('Extensible.calendar.dd.DropZone', {
    extend: 'Ext.dd.DropZone',
    
    requires: [
        'Ext.Layer',
        'Extensible.calendar.data.EventMappings'
    ],
    
    ddGroup : 'CalendarDD',
    eventSelector : '.ext-cal-evt',
    dateRangeFormat : '{0}-{1}',
    dateFormat : 'n/j',
    
    // private
    shims : [],
    
    getTargetFromEvent : function(e){
        var dragOffset = this.dragOffset || 0,
            y = e.getPageY() - dragOffset,
            d = this.view.getDayAt(e.getPageX(), y);
        
        return d.el ? d : null;
    },
    
    onNodeOver : function(n, dd, e, data){
        var D = Extensible.Date,
            eventDragText = (e.ctrlKey || e.altKey) ? this.copyText : this.moveText,
            start = data.type == 'eventdrag' ? n.date : D.min(data.start, n.date),
            end = data.type == 'eventdrag' ? D.add(n.date, {days: D.diffDays(data.eventStart, data.eventEnd)}) :
                D.max(data.start, n.date);
        
        if(!this.dragStartDate || !this.dragEndDate || (D.diffDays(start, this.dragStartDate) != 0) || (D.diffDays(end, this.dragEndDate) != 0)){
            this.dragStartDate = start;
            this.dragEndDate = D.add(end, {days: 1, millis: -1, clearTime: true});
            this.shim(start, end);
            
            var range = Ext.Date.format(start, this.dateFormat);
                
            if(D.diffDays(start, end) > 0){
                end = Ext.Date.format(end, this.dateFormat);
                range = Ext.String.format(this.dateRangeFormat, range, end);
            }
            this.currentRange = range;
        }
                
        data.proxy.updateMsg(Ext.String.format(data.type === 'eventdrag' ? eventDragText :
            this.createText, this.currentRange));
            
        return this.dropAllowed;
    },
    
    shim : function(start, end){
        this.currWeek = -1;
        var dt = Ext.Date.clone(start),
            i = 0, shim, box,
            D = Extensible.Date,
            cnt = D.diffDays(dt, end) + 1;
        
        Ext.each(this.shims, function(shim){
            if(shim){
                shim.isActive = false;
            }
        });
        
        while(i++ < cnt){
            var dayEl = this.view.getDayEl(dt);
            
            // if the date is not in the current view ignore it (this
            // can happen when an event is dragged to the end of the
            // month so that it ends outside the view)
            if(dayEl){
                var wk = this.view.getWeekIndex(dt),
                    shim = this.shims[wk];
            
                if(!shim){
                    shim = this.createShim();
                    this.shims[wk] = shim;
                }
                if(wk != this.currWeek){
                    shim.boxInfo = dayEl.getBox();
                    this.currWeek = wk;
                }
                else{
                    box = dayEl.getBox();
                    shim.boxInfo.right = box.right;
                    shim.boxInfo.width = box.right - shim.boxInfo.x;
                }
                shim.isActive = true;
            }
            dt = D.add(dt, {days: 1});
        }
        
        Ext.each(this.shims, function(shim){
            if(shim){
                if(shim.isActive){
                    shim.show();
                    shim.setBox(shim.boxInfo);
                }
                else if(shim.isVisible()){
                    shim.hide();
                }
            }
        });
    },
    
    createShim : function(){
        var owner = this.view.ownerCalendarPanel ? this.view.ownerCalendarPanel : this.view;
        if(!this.shimCt){
            this.shimCt = Ext.get('ext-dd-shim-ct-'+owner.id);
            if(!this.shimCt){
                this.shimCt = document.createElement('div');
                this.shimCt.id = 'ext-dd-shim-ct-'+owner.id;
                owner.getEl().parent().appendChild(this.shimCt);
            }
        }
        var el = document.createElement('div');
        el.className = 'ext-dd-shim';
        this.shimCt.appendChild(el);
        
        return Ext.create('Ext.Layer', {
            shadow: false, 
            useDisplay: true, 
            constrain: false
        }, el);
    },
    
    clearShims : function(){
        Ext.each(this.shims, function(shim){
            if(shim){
                shim.hide();
            }
        });
    },
    
    onContainerOver : function(dd, e, data){
        return this.dropAllowed;
    },
    
    onCalendarDragComplete : function(){
        delete this.dragStartDate;
        delete this.dragEndDate;
        this.clearShims();
    },
    
    onNodeDrop : function(n, dd, e, data){
        if(n && data){
            if(data.type == 'eventdrag'){
                var rec = this.view.getEventRecordFromEl(data.ddel),
                    dt = Extensible.Date.copyTime(rec.data[Extensible.calendar.data.EventMappings.StartDate.name], n.date);
                    
                this.view.onEventDrop(rec, dt, (e.ctrlKey || e.altKey) ? 'copy' : 'move');
                this.onCalendarDragComplete();
                return true;
            }
            if(data.type == 'caldrag'){
                if (!this.dragEndDate) {
                    // this can occur on a long click where drag starts but onNodeOver is never executed
                    this.dragStartDate = Ext.Date.clearTime(data.start);
                    this.dragEndDate = Extensible.Date.add(this.dragStartDate, {days: 1, millis: -1, clearTime: true});
                }
                this.view.onCalendarEndDrag(this.dragStartDate, this.dragEndDate, 
                    Ext.bind(this.onCalendarDragComplete, this));
                //shims are NOT cleared here -- they stay visible until the handling
                //code calls the onCalendarDragComplete callback which hides them.
                return true;
            }
        }
        this.onCalendarDragComplete();
        return false;
    },
    
    onContainerDrop : function(dd, e, data){
        this.onCalendarDragComplete();
        return false;
    },
    
    destroy: function() {
        Ext.each(this.shims, function(shim){
            if(shim){
                Ext.destroy(shim);
            }
        });
        
        Ext.removeNode(this.shimCt);
        delete this.shimCt;
        this.shims.length = 0;
    }
});


/* @private
 * Internal drag zone implementation for the calendar day and week views.
 */
Ext.define('Extensible.calendar.dd.DayDragZone', {
    extend: 'Extensible.calendar.dd.DragZone',
    
    ddGroup : 'DayViewDD',
    resizeSelector : '.ext-evt-rsz',
    
    getDragData : function(e){
        var t = e.getTarget(this.resizeSelector, 2, true);
        if(t){
            var p = t.parent(this.eventSelector), 
                rec = this.view.getEventRecordFromEl(p);
            
            if(!rec){
                // if rec is null here it usually means there was a timing issue between drag 
                // start and the browser reporting it properly. Simply ignore and it will 
                // resolve correctly once the browser catches up.
                return;
            }
            return {
                type: 'eventresize',
                xy: e.getXY(),
                ddel: p.dom,
                eventStart: rec.data[Extensible.calendar.data.EventMappings.StartDate.name],
                eventEnd: rec.data[Extensible.calendar.data.EventMappings.EndDate.name],
                proxy: this.proxy
            };
        }
        var t = e.getTarget(this.eventSelector, 3);
        if(t){
            var rec = this.view.getEventRecordFromEl(t);
            if(!rec){
                // if rec is null here it usually means there was a timing issue between drag 
                // start and the browser reporting it properly. Simply ignore and it will 
                // resolve correctly once the browser catches up.
                return;
            }
            return {
                type: 'eventdrag',
                xy: e.getXY(),
                ddel: t,
                eventStart: rec.data[Extensible.calendar.data.EventMappings.StartDate.name],
                eventEnd: rec.data[Extensible.calendar.data.EventMappings.EndDate.name],
                proxy: this.proxy
            };
        }
        
        // If not dragging/resizing an event then we are dragging on 
        // the calendar to add a new event
        t = this.view.getDayAt(e.getX(), e.getY());
        if(t.el){
            return {
                type: 'caldrag',
                dayInfo: t,
                proxy: this.proxy
            };
        }
        return null;
    }
});
/* @private
 * Internal drop zone implementation for the calendar day and week views.
 */
Ext.define('Extensible.calendar.dd.DayDropZone', {
    extend: 'Extensible.calendar.dd.DropZone',

    ddGroup : 'DayViewDD',
    dateRangeFormat : '{0}-{1}',
    dateFormat : 'n/j',
    
    onNodeOver : function(n, dd, e, data){
        var dt, text = this.createText,
            timeFormat = Extensible.Date.use24HourTime ? 'G:i' : 'g:ia';
            
        if(data.type == 'caldrag'){
            if(!this.dragStartMarker){
                // Since the container can scroll, this gets a little tricky.
                // There is no el in the DOM that we can measure by default since
                // the box is simply calculated from the original drag start (as opposed
                // to dragging or resizing the event where the orig event box is present).
                // To work around this we add a placeholder el into the DOM and give it
                // the original starting time's box so that we can grab its updated
                // box measurements as the underlying container scrolls up or down.
                // This placeholder is removed in onNodeDrop.
                this.dragStartMarker = n.el.parent().createChild({
                    style: 'position:absolute;'
                });
                // use the original dayInfo values from the drag start
                this.dragStartMarker.setBox(data.dayInfo.timeBox);
                this.dragCreateDt = data.dayInfo.date;
            }
            var endDt, box = this.dragStartMarker.getBox();
            box.height = Math.ceil(Math.abs(e.getY() - box.y) / n.timeBox.height) * n.timeBox.height;
            
            if(e.getY() < box.y){
                box.height += n.timeBox.height;
                box.y = box.y - box.height + n.timeBox.height;
                endDt = Extensible.Date.add(this.dragCreateDt, {minutes: this.ddIncrement});
            }
            else{
                n.date = Extensible.Date.add(n.date, {minutes: this.ddIncrement});
            }
            this.shim(this.dragCreateDt, box);
            
            var diff = Extensible.Date.diff(this.dragCreateDt, n.date),
                curr = Extensible.Date.add(this.dragCreateDt, {millis: diff});
                
            this.dragStartDate = Extensible.Date.min(this.dragCreateDt, curr);
            this.dragEndDate = endDt || Extensible.Date.max(this.dragCreateDt, curr);
                
            dt = Ext.String.format(this.dateRangeFormat,
                Ext.Date.format(this.dragStartDate, timeFormat),
                Ext.Date.format(this.dragEndDate, timeFormat));
        }
        else{
            var evtEl = Ext.get(data.ddel),
                dayCol = evtEl.parent().parent(),
                box = evtEl.getBox();
            
            box.width = dayCol.getWidth();
            
            if(data.type == 'eventdrag'){
                if(this.dragOffset === undefined){
                    // on fast drags there is a lag between the original drag start xy position and
                    // that first detected within the drop zone's getTargetFromEvent method (which is 
                    // where n.timeBox comes from). to avoid a bad offset we calculate the
                    // timeBox based on the initial drag xy, not the current target xy.
                    var initialTimeBox = this.view.getDayAt(data.xy[0], data.xy[1]).timeBox;
                    this.dragOffset = initialTimeBox.y - box.y;
                }
                else{
                    box.y = n.timeBox.y;
                }
                dt = Ext.Date.format(n.date, (this.dateFormat + ' ' + timeFormat));
                box.x = n.el.getLeft();
                
                this.shim(n.date, box);
                text = (e.ctrlKey || e.altKey) ? this.copyText : this.moveText;
            }
            if(data.type == 'eventresize'){
                if(!this.resizeDt){
                    this.resizeDt = n.date;
                }
                box.x = dayCol.getLeft();
                box.height = Math.ceil(Math.abs(e.getY() - box.y) / n.timeBox.height) * n.timeBox.height;
                if(e.getY() < box.y){
                    box.y -= box.height;
                }
                else{
                    n.date = Extensible.Date.add(n.date, {minutes: this.ddIncrement});
                }
                this.shim(this.resizeDt, box);
                
                var diff = Extensible.Date.diff(this.resizeDt, n.date),
                    curr = Extensible.Date.add(this.resizeDt, {millis: diff}),
                    start = Extensible.Date.min(data.eventStart, curr),
                    end = Extensible.Date.max(data.eventStart, curr);
                    
                data.resizeDates = {
                    StartDate: start,
                    EndDate: end
                };
                
                dt = Ext.String.format(this.dateRangeFormat, 
                    Ext.Date.format(start, timeFormat), 
                    Ext.Date.format(end, timeFormat));
                    
                text = this.resizeText;
            }
        }
        
        data.proxy.updateMsg(Ext.String.format(text, dt));
        return this.dropAllowed;
    },
    
    shim : function(dt, box){
        Ext.each(this.shims, function(shim){
            if(shim){
                shim.isActive = false;
                shim.hide();
            }
        });
        
        var shim = this.shims[0];
        if(!shim){
            shim = this.createShim();
            this.shims[0] = shim;
        }
        
        shim.isActive = true;
        shim.show();
        shim.setBox(box);
    },
    
    onNodeDrop : function(n, dd, e, data){
        if(n && data){
            if(data.type == 'eventdrag'){
                var rec = this.view.getEventRecordFromEl(data.ddel);
                this.view.onEventDrop(rec, n.date, (e.ctrlKey || e.altKey) ? 'copy' : 'move');
                this.onCalendarDragComplete();
                delete this.dragOffset;
                return true;
            }
            if(data.type == 'eventresize'){
                var rec = this.view.getEventRecordFromEl(data.ddel);
                this.view.onEventResize(rec, data.resizeDates);
                this.onCalendarDragComplete();
                delete this.resizeDt;
                return true;
            }
            if(data.type == 'caldrag'){
                Ext.destroy(this.dragStartMarker);
                delete this.dragStartMarker;
                delete this.dragCreateDt;
                this.view.onCalendarEndDrag(this.dragStartDate, this.dragEndDate, 
                    Ext.bind(this.onCalendarDragComplete, this));
                //shims are NOT cleared here -- they stay visible until the handling
                //code calls the onCalendarDragComplete callback which hides them.
                return true;
            }
        }
        this.onCalendarDragComplete();
        return false;
    }
});

/**
 * @class Extensible.calendar.data.EventModel
 * @extends Extensible.data.Model
 * <p>This is the {@link Ext.data.Record Record} specification for calendar event data used by the
 * {@link Extensible.calendar.CalendarPanel CalendarPanel}'s underlying store. It can be overridden as
 * necessary to customize the fields supported by events, although the existing field definition names
 * should not be altered. If your model fields are named differently you should update the <b>mapping</b>
 * configs accordingly.</p>
 * <p>The only required fields when creating a new event record instance are <tt>StartDate</tt> and
 * <tt>EndDate</tt>.  All other fields are either optional or will be defaulted if blank.</p>
 * <p>Here is a basic example for how to create a new record of this type:<pre><code>
rec = new Extensible.calendar.data.EventModel({
    StartDate: '2101-01-12 12:00:00',
    EndDate: '2101-01-12 13:30:00',
    Title: 'My cool event',
    Notes: 'Some notes'
});
</code></pre>
 * If you have overridden any of the record's data mappings via the {@link Extensible.calendar.data.EventMappings EventMappings} object
 * you may need to set the values using this alternate syntax to ensure that the field names match up correctly:<pre><code>
var M = Extensible.calendar.data.EventMappings,
    rec = new Extensible.calendar.data.EventModel();

rec.data[M.StartDate.name] = '2101-01-12 12:00:00';
rec.data[M.EndDate.name] = '2101-01-12 13:30:00';
rec.data[M.Title.name] = 'My cool event';
rec.data[M.Notes.name] = 'Some notes';
</code></pre>
 * @constructor
 * @param {Object} data (Optional) An object, the properties of which provide values for the new Record's
 * fields. If not specified the {@link Ext.data.Field#defaultValue defaultValue}
 * for each field will be assigned.
 * @param {Object} id (Optional) The id of the Record. The id is used by the
 * {@link Ext.data.Store} object which owns the Record to index its collection
 * of Records (therefore this id should be unique within each store). If an
 * id is not specified a {@link #phantom}
 * Record will be created with an {@link #Record.id automatically generated id}.
 */
Ext.define('Extensible.calendar.data.EventModel', {
    extend: 'Extensible.data.Model',

    requires: [
        'Extensible.calendar.data.EventMappings'
    ],
    
    mappingClass: 'Extensible.calendar.data.EventMappings',
    
    mappingIdProperty: 'EventId',
    
    associations: [{
        type: 'hasMany',
        model: 'Extensible.calendar.data.EventModel',
        primaryKey: 'EventId',
        foreignKey: 'ParentId',
        autoLoad: true
    },{
        type: 'belongsTo',
        model: 'Extensible.calendar.data.EventModel',
        primaryKey: 'EventId',
        foreignKey: 'ParentId'
    }],

    inheritableStatics: {
        /**
         * The minimum time unit supported by events (defaults to 'minutes'). Other valid
         * values would be 'seconds' or 'millis'. This is used primarily in calculating date
         * ranges and event duration.  For example, an all-day event will be saved with a start time
         * of 0:00:00-00 and an end time of 0:00:00-00 the next day minus 1 unit as specified by this
         * resolution setting (1 minute by default, resulting in an end time of 23:59:00-00). This
         * setting could be changed to provide greater resolution, e.g. 'seconds' would result in an
         * all-day end time of 23:59:59-00 instead (although, by default, this would not result in
         * any visible display difference unless the calendar views were also customized).
         */
        resolution: 'minutes'
    },
    
    isRecurring: function() {
        var RRule = Extensible.calendar.data.EventMappings.RRule;
        
        if (RRule) {
            var ruleString = this.get(RRule.name);
            return (ruleString !== undefined && ruleString !== '');
        }
        return false;
    },
    
    getStartDate: function() {
        return this.get(Extensible.calendar.data.EventMappings.StartDate.name);
    },
    
    getEndDate: function() {
        var EventMappings = Extensible.calendar.data.EventMappings,
            duration = EventMappings.Duration ? this.get(EventMappings.Duration.name) : null;
        
        if (duration !== null && duration > -1) {
            var durationObj = {};
            durationObj[Extensible.calendar.data.EventModel.resolution] = duration;
            return Extensible.Date.add(this.getStartDate(), durationObj);
        }
        return this.get(EventMappings.EndDate.name);
    },
    
    clearRecurrence: function() {
        var me = this,
            EventMappings = Extensible.calendar.data.EventMappings;
        
        delete me.data[EventMappings.OriginalEventId.name];
        delete me.data[EventMappings.RRule.name];
        delete me.data[EventMappings.RInstanceStartDate.name];
        delete me.data[EventMappings.REditMode.name];
        
        return me;
    }
},
function() {
    this.reconfigure();
});

Ext.define('Extensible.calendar.data.EventStore', {
    extend: 'Ext.data.Store',
    model: 'Extensible.calendar.data.EventModel',
    
    constructor: function(config) {
        config = config || {};
        
        // By default autoLoad will cause the store to load itself during the
        // constructor, before the owning calendar view has a chance to set up
        // the initial date params to use during loading.  We replace autoLoad
        // with a deferLoad property that the view can check for and use to set
        // up default params as needed, then call the load itself. 
        this.deferLoad = config.autoLoad;
        config.autoLoad = false;
        
        //this._dateCache = [];
        
        this.callParent(arguments);
    },
    
    load : function(o) {
        Extensible.log('store load');
        o = o || {};

        // if params are passed delete the one-time defaults
        if(o.params){
            delete this.initialParams;
        }
        // this.initialParams will only be set if the store is being loaded manually
        // for the first time (autoLoad = false) so the owning calendar view set
        // the initial start and end date params to use. Every load after that will
        // have these params set automatically during normal UI navigation.
        if(this.initialParams){
            o.params = o.params || {};
            Ext.apply(o.params, this.initialParams);
            delete this.initialParams;
        }

        this.callParent(arguments);
    }
    
//    execute : function(action, rs, options, /* private */ batch) {
//        if(action=='read'){
//            var i = 0, 
//                dc = this._dateCache, 
//                len = dc.length,
//                range,
//                p = options.params,
//                start = p.start,
//                end = p.end;
//                
//            //options.add = true;
//            for(i; i<len; i++){
//                range = dc[i];
//                
//            }
//        }
//        this.callParent(arguments);
//    }
});
/**
 * @class Extensible.calendar.data.CalendarModel
 * @extends Extensible.data.Model
 * <p>This is the {@link Ext.data.Record Record} specification for calendar items used by the
 * {@link Extensible.calendar.CalendarPanel CalendarPanel}'s calendar store. If your model fields
 * are named differently you should update the <b>mapping</b> configs accordingly.</p>
 * <p>The only required fields when creating a new calendar record instance are CalendarId and
 * Title.  All other fields are either optional or will be defaulted if blank.</p>
 * <p>Here is a basic example for how to create a new record of this type:<pre><code>
rec = new Extensible.calendar.data.CalendarModel({
    CalendarId: 5,
    Title: 'My Holidays',
    Description: 'My personal holiday schedule',
    ColorId: 3
});
</code></pre>
 * If you have overridden any of the record's data mappings via the {@link Extensible.calendar.data.CalendarMappings CalendarMappings} object
 * you may need to set the values using this alternate syntax to ensure that the fields match up correctly:<pre><code>
var M = Extensible.calendar.data.CalendarMappings;

rec = new Extensible.calendar.data.CalendarModel();
rec.data[M.CalendarId.name] = 5;
rec.data[M.Title.name] = 'My Holidays';
rec.data[M.Description.name] = 'My personal holiday schedule';
rec.data[M.ColorId.name] = 3;
</code></pre>
 * @constructor
 * @param {Object} data (Optional) An object, the properties of which provide values for the new Record's
 * fields. If not specified the {@link Ext.data.Field#defaultValue defaultValue}
 * for each field will be assigned.
 * @param {Object} id (Optional) The id of the Record. The id is used by the
 * {@link Ext.data.Store} object which owns the Record to index its collection
 * of Records (therefore this id should be unique within each store). If an
 * id is not specified a {@link #phantom}
 * Record will be created with an {@link #Record.id automatically generated id}.
 */
Ext.define('Extensible.calendar.data.CalendarModel', {
    extend: 'Extensible.data.Model',
    
    requires: [
        'Extensible.calendar.data.CalendarMappings'
    ],
    
    mappingClass: 'Extensible.calendar.data.CalendarMappings',
    
    mappingIdProperty: 'CalendarId'
    
},
function() {
    this.reconfigure();
});
/*
 * A simple reusable store that loads static calendar field definitions into memory
 * and can be bound to the CalendarCombo widget and used for calendar color selection.
 */
Ext.define('Extensible.calendar.data.MemoryCalendarStore', {
    extend: 'Ext.data.Store',
    model: 'Extensible.calendar.data.CalendarModel',
    
    requires: [
        'Ext.data.proxy.Memory',
        'Ext.data.reader.Json',
        'Ext.data.writer.Json',
        'Extensible.calendar.data.CalendarModel',
        'Extensible.calendar.data.CalendarMappings'
    ],
    
    proxy: {
        type: 'memory',
        reader: {
            type: 'json',
            root: 'calendars'
        },
        writer: {
            type: 'json'
        }
    },

    autoLoad: true,
    
    initComponent: function() {
        this.sorters = this.sorters || [{
            property: Extensible.calendar.data.CalendarMappings.Title.name,
            direction: 'ASC'
        }];
        
        this.idProperty = this.idProperty || Extensible.calendar.data.CalendarMappings.CalendarId.name || 'id';
        
        this.fields = Extensible.calendar.data.CalendarModel.prototype.fields.getRange();
        
        this.callParent(arguments);
    }
});
/*
 * This is a simple in-memory store implementation that is ONLY intended for use with
 * calendar samples running locally in the browser with no external data source. Under
 * normal circumstances, stores that use a MemoryProxy are read-only and intended only
 * for displaying data read from memory. In the case of the calendar, it's still quite
 * useful to be able to deal with in-memory data for sample purposes (as many people
 * may not have PHP set up to run locally), but by default, updates will not work since the
 * calendar fully expects all CRUD operations to be supported by the store (and in fact
 * will break, for example, if phantom records are not removed properly). This simple
 * class gives us a convenient way of loading and updating calendar event data in memory,
 * but should NOT be used outside of the local samples.
 *
 * For a real-world store implementation see the remote sample (remote.js).
 */
Ext.define('Extensible.calendar.data.MemoryEventStore', {
    extend: 'Ext.data.Store',
    model: 'Extensible.calendar.data.EventModel',

    requires: [
        'Ext.data.proxy.Memory',
        'Ext.data.reader.Json',
        'Ext.data.writer.Json',
        'Extensible.calendar.data.EventModel',
        'Extensible.calendar.data.EventMappings'
    ],

    proxy: {
        type: 'memory',
        reader: {
            type: 'json',
            root: 'evts'
        },
        writer: {
            type: 'json'
        }
    },
    
    // Since we are faking persistence in memory, we also have to fake our primary
    // keys for things to work consistently. This starting id value will be auto-
    // incremented as records are created:
    idSeed: 2000,

    // private
    constructor: function(config) {
        config = config || {};

        this.callParent(arguments);

        this.sorters = this.sorters || [{
            property: Extensible.calendar.data.EventMappings.StartDate.name,
            direction: 'ASC'
        }];

        this.idProperty = this.idProperty || Extensible.calendar.data.EventMappings.EventId.mapping || 'id';

        this.fields = Extensible.calendar.data.EventModel.prototype.fields.getRange();

        // By default this shared example store will monitor its own CRUD events and
        // automatically show a page-level message for each event. This is simply a shortcut
        // so that each example doesn't have to provide its own messaging code, but this pattern
        // of handling messages at the store level could easily be implemented in an application
        // (see the source of test-app.js for an example of this). The autoMsg config is provided
        // to turn off this automatic messaging in any case where this store is used but the
        // default messaging is not desired.
        if (config.autoMsg !== false) {
            // Note that while the store provides individual add, update and remove events, those only
            // signify that records were added to the store, NOT that your changes were actually
            // persisted correctly in the back end (in remote scenarios). While this isn't an issue
            // with the MemoryProxy since everything is local, it's still harder to work with the
            // individual CRUD events since they have different APIs and quirks (notably the add and
            // update events both fire during record creation and it's difficult to differentiate a true
            // update from an update caused by saving the PK into a newly-added record). Because of all
            // this, in general the 'write' event is the best option for generically messaging after
            // CRUD persistance has actually succeeded.
            this.on('write', this.onWrite, this);
        }

        this.autoMsg = config.autoMsg;
        this.onCreateRecords = Ext.Function.createInterceptor(this.onCreateRecords, this.interceptCreateRecords);
        this.initRecs();
    },

    // private - override to make sure that any records added in-memory
    // still get a unique PK assigned at the data level
    interceptCreateRecords: function(records, operation, success) {
        if (success) {
            var i = 0,
                rec,
                len = records.length;

            for (; i < len; i++) {
                records[i].data[Extensible.calendar.data.EventMappings.EventId.name] = this.idSeed++;
            }
        }
    },

    // If the store started with preloaded inline data, we have to make sure the records are set up
    // properly as valid "saved" records otherwise they may get "added" on initial edit.
    initRecs: function() {
        this.each(function(rec){
            rec.store = this;
            rec.phantom = false;
        }, this);
    },

    // private
    onWrite: function(store, operation) {
        var me = this;

        if (Extensible.example && Extensible.example.msg) {
            var success = operation.wasSuccessful(),
                rec = operation.records[0],
                title = rec.data[Extensible.calendar.data.EventMappings.Title.name];

            switch (operation.action) {
                case 'create':
                    Extensible.example.msg('Add', 'Added "' + Ext.value(title, '(No title)') + '"');
                    break;
                case 'update':
                    Extensible.example.msg('Update', 'Updated "' + Ext.value(title, '(No title)') + '"');
                    break;
                case 'destroy':
                    Extensible.example.msg('Delete', 'Deleted "' + Ext.value(title, '(No title)') + '"');
                    break;
            }
        }
    },

    // private - override the default logic for memory storage
    onProxyLoad: function(operation) {
        var me = this,
            successful = operation.wasSuccessful(),
            resultSet = operation.getResultSet(),
            records = [];

        if (me.data && me.data.length > 0) {
            // this store has already been initially loaded, so do not reload
            // and lose updates to the store, just use store's latest data
            me.totalCount = me.data.length;
            records = me.data.items;
        }
        else {
            // this is the initial load, so defer to the proxy's result
            if (resultSet) {
                records = resultSet.records;
                me.totalCount = resultSet.total;
            }
            if (successful) {
                me.loadRecords(records, operation);
            }
        }

        me.loading = false;
        me.fireEvent('load', me, records, successful);
    }
});
/* @private
 * This is an internal helper class for the calendar views and should not be overridden.
 * It is responsible for the base event rendering logic underlying all views based on a 
 * box-oriented layout that supports day spanning (MonthView, MultiWeekView, DayHeaderView).
 */
Ext.define('Extensible.calendar.util.WeekEventRenderer', {
    
    requires: ['Ext.core.DomHelper'],
    
    statics: {
        /**
         * Retrieve the event layout table row for the specified week and row index. If
         * the row does not already exist it will get created and appended to the DOM.
         * This method does not check against the max allowed events -- it is the responsibility
         * of calling code to ensure that an event row at the specified index is really needed.
         */
        getEventRow: function(viewId, weekIndex, rowIndex) {
            var indexOffset = 1, //skip the first row with date #'s
                weekRow = Ext.get(viewId + '-wk-' + weekIndex),
                eventRow,
                weekTable;
            
            if (weekRow) {
                weekTable = weekRow.child('.ext-cal-evt-tbl', true);
                eventRow = weekTable.tBodies[0].childNodes[rowIndex + indexOffset];
                
                if (!eventRow) {
                    eventRow = Ext.core.DomHelper.append(weekTable.tBodies[0], '<tr></tr>');
                }
            }
            return Ext.get(eventRow);
        },
        
        /**
         * Render an individual event
         * @private
         */
        renderEvent: function(event, weekIndex, dayIndex, eventIndex, dayCount, currentDate, renderConfig) {
            var eventMappings = Extensible.calendar.data.EventMappings,
                eventData = event.data || event.event.data,
                startOfWeek = Ext.Date.clone(currentDate),
                endOfWeek = Extensible.Date.add(startOfWeek, {days: dayCount - dayIndex, millis: -1}),
                eventRow = this.getEventRow(renderConfig.viewId, weekIndex, eventIndex),
                eventEndDate = (event.event || event).getEndDate(),
                daysToEventEnd = Extensible.Date.diffDays(currentDate, eventEndDate) + 1,
                // Restrict the max span to the current week only since this is for the cuurent week's markup
                colspan = Math.min(daysToEventEnd, dayCount - dayIndex);
            
            // The view passes a template function to use when rendering the events.
            // These are special data values that get passed back to the template.
            eventData._weekIndex = weekIndex;
            eventData._renderAsAllDay = eventData[eventMappings.IsAllDay.name] || event.isSpanStart;
            eventData.spanLeft = eventData[eventMappings.StartDate.name].getTime() < startOfWeek.getTime();
            eventData.spanRight = eventEndDate.getTime() > endOfWeek.getTime();
            eventData.spanCls = (eventData.spanLeft ? (eventData.spanRight ?
                'ext-cal-ev-spanboth' : 'ext-cal-ev-spanleft') : (eventData.spanRight ? 'ext-cal-ev-spanright' : ''));
            
            var cellConfig = {
                tag: 'td',
                cls: 'ext-cal-ev',
                // This is where the passed template gets processed and the markup returned
                cn: renderConfig.tpl.apply(renderConfig.templateDataFn(eventData))
            };
            
            if (colspan > 1) {
                cellConfig.colspan = colspan;
            }
            Ext.core.DomHelper.append(eventRow, cellConfig);
        },
        
        /**
         * Events are collected into a big multi-dimensional array in the view, then passed here
         * for rendering. The event grid consists of an array of weeks (1-n), each of which contains an
         * array of days (1-7), each of which contains an array of events and span placeholders (0-n). 
         * @param {Object} o An object containing all of the supported config options (see
         * Extensible.calendar.view.Month.renderItems() to see what gets passed).
         * @private
         */
        render: function(config) {
            // var-apalooza ;) since we're looping a lot, minimize initial declarations
            var me = this,
                spaceChar = '&#160;',
                weekIndex = 0,
                eventGrid = config.eventGrid,
                currentDate = Ext.Date.clone(config.viewStart),
                currentDateString = '',
                eventTpl = config.tpl,
                maxEventsPerDay = config.maxEventsPerDay != undefined ? config.maxEventsPerDay : 999,
                weekCount = config.weekCount < 1 ? 6 : config.weekCount,
                dayCount = config.weekCount == 1 ? config.dayCount : 7,
                eventRow,
                dayIndex,
                weekGrid,
                eventIndex,
                skippedEventCount,
                dayGrid,
                eventCount,
                currentEvent,
                cellConfig,
                eventData;
            
            // Loop through each week in the overall event grid
            for (; weekIndex < weekCount; weekIndex++) {
                dayIndex = 0;
                weekGrid = eventGrid[weekIndex];
                
                // Loop through each day in the current week grid
                for (; dayIndex < dayCount; dayIndex++) {
                    currentDateString = Ext.Date.format(currentDate, 'Ymd');
                    
                    // Make sure there is actually a day to process events for first
                    if (weekGrid && weekGrid[dayIndex]) {
                        eventIndex = 0;
                        skippedEventCount = 0;
                        dayGrid = weekGrid[dayIndex];
                        eventCount = dayGrid.length;
                        
                        // Loop through each event in the current day grid. Note that this grid can
                        // also contain placeholders representing segments of spanning events, though
                        // for simplicity's sake these will all be referred to as "events" in comments.
                        for(; eventIndex < eventCount; eventIndex++){
                            if (!dayGrid[eventIndex]) {
                                // There is no event at the current index
                                if (eventIndex >= maxEventsPerDay) {
                                    // We've already hit the max count of displayable event rows, so
                                    // skip adding any additional empty row markup. In this case, since
                                    // there is no event we don't track it as a skipped event as below.
                                    continue;
                                }
                                // Insert an empty TD since there is no event at this index
                                eventRow = me.getEventRow(config.viewId, weekIndex, eventIndex);
                                Ext.core.DomHelper.append(eventRow, {
                                    tag: 'td',
                                    cls: 'ext-cal-ev',
                                    html: spaceChar,
                                    //style: 'outline: 1px solid red;', // helpful for debugging
                                    id: config.viewId + '-empty-' + eventCount + '-day-' + currentDateString
                                });
                            }
                            else {
                                if (eventIndex >= maxEventsPerDay) {
                                    // We've hit the max count of displayable event rows, but since there
                                    // is an event at the current index we have to track the count of events
                                    // that aren't being rendered so that we can provide the proper count
                                    // when displaying the "more events" link below.
                                    skippedEventCount++;
                                    continue;
                                }
                                currentEvent = dayGrid[eventIndex];
                                
                                // We only want to insert the markup for an event that does not span days, or
                                // if it does span, only for the initial instance (not any of its placeholders
                                // in the event grid, which are there only to reserve the space in the layout).
                                if (!currentEvent.isSpan || currentEvent.isSpanStart) {
                                    me.renderEvent(currentEvent, weekIndex, dayIndex, eventIndex,
                                        dayCount, currentDate, config);
                                }
                            }
                        }
                        
                        // We're done processing all of the events for the current day. Time to insert the
                        // "more events" link or the last empty TD for the day, if needed.
                        
                        if (skippedEventCount > 0) {
                            // We hit one or more events in the grid that could not be displayed since the max
                            // events per day count was exceeded, so add the "more events" link.
                            eventRow = me.getEventRow(config.viewId, weekIndex, maxEventsPerDay);
                            Ext.core.DomHelper.append(eventRow, {
                                tag: 'td',
                                cls: 'ext-cal-ev-more',
                                //style: 'outline: 1px solid blue;', // helpful for debugging
                                id: 'ext-cal-ev-more-' + Ext.Date.format(currentDate, 'Ymd'),
                                cn: {
                                    tag: 'a',
                                    html: Ext.String.format(config.getMoreText(skippedEventCount), skippedEventCount)
                                }
                            });
                        }
                        else if (eventCount < config.evtMaxCount[weekIndex]) {
                            // We did NOT hit the max event count, meaning that we are now left with a gap in
                            // the layout table which we need to fill with one last empty TD.
                            eventRow = me.getEventRow(config.viewId, weekIndex, eventCount);
                            if (eventRow) {
                                cellConfig = {
                                    tag: 'td',
                                    cls: 'ext-cal-ev',
                                    html: spaceChar,
                                    //style: 'outline: 1px solid green;', // helpful for debugging
                                    id: config.viewId + '-empty-' + (eventCount + 1) + '-day-' + currentDateString
                                };
                                
                                // It's easy to determine at this point how many extra rows are needed, so
                                // just add a rowspan rather than multiple dummy TDs if needed.
                                var rowspan = config.evtMaxCount[weekIndex] - eventCount;
                                if (rowspan > 1) {
                                    cellConfig.rowspan = rowspan;
                                }
                                Ext.core.DomHelper.append(eventRow, cellConfig);
                            }
                        }
                        // Else the event count for the current day equals the max event count, so the current
                        // day is completely filled up with no additional placeholder markup needed.
                    }
                    else {
                        // There are no events for the current day, so no need to go through all the logic
                        // above -- simply append an empty TD spanning the total row count for the week.
                        eventRow = me.getEventRow(config.viewId, weekIndex, 0);
                        if (eventRow) {
                            cellConfig = {
                                tag: 'td',
                                cls: 'ext-cal-ev',
                                html: spaceChar,
                                //style: 'outline: 1px solid purple;', // helpful for debugging
                                id: config.viewId + '-empty-day-' + currentDateString
                            };
                            
                            if (config.evtMaxCount[weekIndex] > 1) {
                                cellConfig.rowspan = config.evtMaxCount[weekIndex];
                            }
                            Ext.core.DomHelper.append(eventRow, cellConfig);
                        }
                    }
                    
                    // Move to the next date and restart the loop
                    currentDate = Extensible.Date.add(currentDate, {days: 1});
                }
            }
        }
    }
});
/**
 * @class Extensible.calendar.form.field.CalendarCombo
 * @extends Ext.form.field.ComboBox
 * <p>A custom combo used for choosing from the list of available calendars to assign an event to. You must
 * pass a populated calendar store as the store config or the combo will not work.</p>
 * <p>This is pretty much a standard combo that is simply pre-configured for the options needed by the
 * calendar components. The default configs are as follows:<pre><code>
fieldLabel: 'Calendar',
triggerAction: 'all',
queryMode: 'local',
forceSelection: true,
width: 200
</code></pre>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.form.field.CalendarCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: 'widget.extensible.calendarcombo',
    
    requires: ['Extensible.calendar.data.CalendarMappings'],
    
    fieldLabel: 'Calendar',
    triggerAction: 'all',
    queryMode: 'local',
    forceSelection: true,
    selectOnFocus: true,
    
    // private
    defaultCls: 'x-cal-default',
    hiddenCalendarCls: 'ext-cal-hidden',
    
    // private
    initComponent: function(){
        this.valueField = Extensible.calendar.data.CalendarMappings.CalendarId.name;
        this.displayField = Extensible.calendar.data.CalendarMappings.Title.name;
    
        this.listConfig = Ext.apply(this.listConfig || {}, {
            getInnerTpl: this.getListItemTpl
        });
        
        this.store.on('update', this.refreshColorCls, this);
        
        this.callParent(arguments);
    },
    
    getListItemTpl: function(displayField) {
        return '<div class="x-combo-list-item x-cal-{' + Extensible.calendar.data.CalendarMappings.ColorId.name +
                '}"><div class="ext-cal-picker-icon">&#160;</div>{' + displayField + '}</div>';
    },
    
    // private
    afterRender: function(){
        this.callParent(arguments);
        
        this.wrap = this.el.down('.x-form-item-body');
        this.wrap.addCls('ext-calendar-picker');
        
        this.icon = Ext.core.DomHelper.append(this.wrap, {
            tag: 'div', cls: 'ext-cal-picker-icon ext-cal-picker-mainicon'
        });
    },
    
    /* @private
     * Refresh the color CSS class based on the current field value
     */
    refreshColorCls: function() {
        var me = this,
            calendarMappings = Extensible.calendar.data.CalendarMappings,
            colorCls = '',
            value = me.getValue();
        
        if (!me.wrap) {
            return me;
        }
        if (me.currentStyleClss !== undefined) {
            me.wrap.removeCls(me.currentStyleClss);
        }
        
        if (!Ext.isEmpty(value)) {
            if (Ext.isArray(value)) {
                value = value[0];
            }
            if (!value.data) {
                // this is a calendar id, need to get the record first then use its color
                value = this.store.findRecord(calendarMappings.CalendarId.name, value);
            }
            colorCls = 'x-cal-' + (value.data ? value.data[calendarMappings.ColorId.name] : value);
        }
        
        me.currentStyleClss = colorCls;
        
//        if (value && value.data && value.data[calendarMappings.IsHidden.name] === true) {
//            colorCls += ' ' + me.hiddenCalendarCls;
//        }
        me.wrap.addCls(colorCls);
        
        return me;
    },
    
    // inherited docs
    setValue: function(value) {
        if (!value && this.store.getCount() > 0) {
            // ensure that a valid value is always set if possible
            value = this.store.getAt(0).data[Extensible.calendar.data.CalendarMappings.CalendarId.name];
        }
        
        this.callParent(arguments);
        
        this.refreshColorCls();
    }
});
// Not currently used
/*
 * @class Extensible.form.field.DateRangeLayout
 * @extends Ext.layout.container.Container
 * @markdown
 * @private
 */
Ext.define('Extensible.form.field.DateRangeLayout', {
    extend: 'Ext.layout.container.Container',
    alias: ['layout.extensible.daterange'],
    
    onLayout: function() {
        var me = this,
            shadowCt = me.getShadowCt(),
            owner = me.owner,
            singleLine = owner.isSingleLine();
        
        me.owner.suspendLayout = true;
        
        if (singleLine) {
            shadowCt.getComponent('row1').add(owner.startDate, owner.startTime, owner.toLabel, 
                owner.endTime, owner.endDate, owner.allDay);
        }
        else {
            shadowCt.getComponent('row1').add(owner.startDate, owner.startTime, owner.toLabel);
            shadowCt.getComponent('row2').add(owner.endDate, owner.endTime, owner.allDay);
        }
        
        if (!shadowCt.rendered) {
            shadowCt.render(me.getRenderTarget());
        }

        shadowCt.doComponentLayout();
        owner.setHeight(shadowCt.getHeight()-5);
        
        delete me.owner.suspendLayout;
    },

    /**
     * @private
     * Creates and returns the shadow vbox container that will be used to arrange the owner's items
     */
    getShadowCt: function() {
        var me = this,
            items = [];

        if (!me.shadowCt) {
            me.shadowCt = Ext.createWidget('container', {
                layout: 'auto',
                anchor: '100%',
                ownerCt: me.owner,
                items: [{
                    xtype: 'container',
                    itemId: 'row1',
                    layout: 'hbox',
                    defaults:{
                        margins:'0 5 0 0'
                    }
                },{
                    xtype: 'container',
                    itemId: 'row2',
                    layout: 'hbox',
                    defaults:{
                        margins:'0 5 0 0'
                    }
                }]
            });
        }
        
        return me.shadowCt;
    },
    
    // We don't want to render any items to the owner directly, that gets handled by each column's own layout
    renderItems: Ext.emptyFn
});
/**
 * @class Extensible.form.field.DateRange
 * @extends Ext.form.Field
 * <p>A combination field that includes start and end dates and times, as well as an optional all-day checkbox.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.form.field.DateRange', {
    extend: 'Ext.form.FieldContainer',
    alias: 'widget.extensible.daterangefield',
    
    requires: [
        'Ext.form.field.Date',
        'Ext.form.field.Time',
        'Ext.form.Label',
        'Ext.form.field.Checkbox'
    ],
    
    /**
     * @cfg {String} toText
     * The text to display in between the date/time fields (defaults to 'to')
     */
    toText: 'to',
    /**
     * @cfg {String} allDayText
     * The text to display as the label for the all day checkbox (defaults to 'All day')
     */
    allDayText: 'All day',
    /**
     * @cfg {String/Boolean} singleLine
     * <code>true</code> to render the fields all on one line, <code>false</code> to break the start
     * date/time and end date/time into two stacked rows of fields to preserve horizontal space
     * (defaults to <code>true</code>).
     */
    singleLine: true,
    /*
     * @cfg {Number} singleLineMinWidth -- not currently used
     * If {@link singleLine} is set to 'auto' it will use this value to determine whether to render the field on one
     * line or two. This value is the approximate minimum width required to render the field on a single line, so if
     * the field's container is narrower than this value it will automatically be rendered on two lines.
     */
    //singleLineMinWidth: 490,
    /**
     * @cfg {String} dateFormat
     * The date display format used by the date fields (defaults to 'n/j/Y') 
     */
    dateFormat: 'n/j/Y',
    
    // private
    fieldLayout: {
        type: 'hbox',
        defaultMargins: { top: 0, right: 5, bottom: 0, left: 0 }
    },
    
    // private
    initComponent: function() {
        var me = this;
        /**
         * @cfg {String} timeFormat
         * The time display format used by the time fields. By default the DateRange uses the
         * {@link Extensible.Date.use24HourTime} setting and sets the format to 'g:i A' for 12-hour time (e.g., 1:30 PM) 
         * or 'G:i' for 24-hour time (e.g., 13:30). This can also be overridden by a static format string if desired.
         */
        me.timeFormat = me.timeFormat || (Extensible.Date.use24HourTime ? 'G:i' : 'g:i A');
        
        me.addCls('ext-dt-range');
        
        if (me.singleLine) {
            me.layout = me.fieldLayout;
            me.items = me.getFieldConfigs();
        }
        else {
            me.items = [{
                xtype: 'container',
                layout: me.fieldLayout,
                items: [
                    me.getStartDateConfig(),
                    me.getStartTimeConfig(),
                    me.getDateSeparatorConfig()
                ]
            },{
                xtype: 'container',
                layout: me.fieldLayout,
                items: [
                    me.getEndDateConfig(),
                    me.getEndTimeConfig(),
                    me.getAllDayConfig()
                ]
            }];
        }
        
        me.callParent(arguments);
        me.initRefs();
    },
    
    initRefs: function() {
        var me = this;
        me.startDate = me.down('#' + me.id + '-start-date');
        me.startTime = me.down('#' + me.id + '-start-time');
        me.endTime = me.down('#' + me.id + '-end-time');
        me.endDate = me.down('#' + me.id + '-end-date');
        me.allDay = me.down('#' + me.id + '-allday');
        me.toLabel = me.down('#' + me.id + '-to-label');
    },
    
    getFieldConfigs: function() {
        var me = this;
        return [
            me.getStartDateConfig(),
            me.getStartTimeConfig(),
            me.getDateSeparatorConfig(),
            me.getEndTimeConfig(),
            me.getEndDateConfig(),
            me.getAllDayConfig()
        ];
    },
    
    getLayoutItems: function(singleLine) {
        var me = this;
        return singleLine ? me.items.items : [[
            me.startDate, me.startTime, me.toLabel
        ],[
            me.endDate, me.endTime, me.allDay
        ]];
    },
    
    getStartDateConfig: function() {
        return {
            xtype: 'datefield',
            id: this.id + '-start-date',
            format: this.dateFormat,
            width: 100,
            listeners: {
                'change': {
                    fn: function(){
                        this.onFieldChange('date', 'start');
                    },
                    scope: this
                }
            }
        };
    },
    
    getStartTimeConfig: function() {
        return {
            xtype: 'timefield',
            id: this.id + '-start-time',
            hidden: this.showTimes === false,
            labelWidth: 0,
            hideLabel: true,
            width: 90,
            format: this.timeFormat,
            listeners: {
                'select': {
                    fn: function(){
                        this.onFieldChange('time', 'start');
                    },
                    scope: this
                }
            }
        };
    },
    
    getEndDateConfig: function() {
        return {
            xtype: 'datefield',
            id: this.id + '-end-date',
            format: this.dateFormat,
            hideLabel: true,
            width: 100,
            listeners: {
                'change': {
                    fn: function(){
                        this.onFieldChange('date', 'end');
                    },
                    scope: this
                }
            }
        };
    },
    
    getEndTimeConfig: function() {
        return {
            xtype: 'timefield',
            id: this.id + '-end-time',
            hidden: this.showTimes === false,
            labelWidth: 0,
            hideLabel: true,
            width: 90,
            format: this.timeFormat,
            listeners: {
                'select': {
                    fn: function(){
                        this.onFieldChange('time', 'end');
                    },
                    scope: this
                }
            }
        };
    },
    
    getAllDayConfig: function() {
        return {
            xtype: 'checkbox',
            id: this.id + '-allday',
            hidden: this.showTimes === false || this.showAllDay === false,
            boxLabel: this.allDayText,
            margins: { top: 2, right: 5, bottom: 0, left: 0 },
            handler: this.onAllDayChange,
            scope: this
        };
    },
    
    onAllDayChange: function(chk, checked) {
        this.startTime.setVisible(!checked);
        this.endTime.setVisible(!checked);
    },
    
    getDateSeparatorConfig: function() {
        return {
            xtype: 'label',
            id: this.id + '-to-label',
            text: this.toText,
            margins: { top: 4, right: 5, bottom: 0, left: 0 }
        };
    },
    
    isSingleLine: function() {
        var me = this;
        
        if (me.calculatedSingleLine === undefined) {
            if(me.singleLine == 'auto'){
                var ownerCtEl = me.ownerCt.getEl(),
                    w = me.ownerCt.getWidth() - ownerCtEl.getPadding('lr'),
                    el = ownerCtEl.down('.x-panel-body');
                    
                if(el){
                    w -= el.getPadding('lr');
                }
                
                el = ownerCtEl.down('.x-form-item-label');
                if(el){
                    w -= el.getWidth() - el.getPadding('lr');
                }
                singleLine = w <= me.singleLineMinWidth ? false : true;
            }
            else {
                me.calculatedSingleLine = me.singleLine !== undefined ? me.singleLine : true;
            }
        }
        return me.calculatedSingleLine;
    },
    
    // private
//    onRender: function(ct, position){
//        if(!this.el){
//            this.startDate = Ext.create('Ext.form.DateField', {
//                id: this.id+'-start-date',
//                format: this.dateFormat,
//                width:100,
//                listeners: {
//                    'change': {
//                        fn: function(){
//                            this.onFieldChange('date', 'start');
//                        },
//                        scope: this
//                    }
//                }
//            });
//            this.startTime = Ext.create('Ext.form.TimeField', {
//                id: this.id+'-start-time',
//                hidden: this.showTimes === false,
//                labelWidth: 0,
//                hideLabel:true,
//                width:90,
//                listeners: {
//                    'select': {
//                        fn: function(){
//                            this.onFieldChange('time', 'start');
//                        },
//                        scope: this
//                    }
//                }
//            });
//            this.endTime = Ext.create('Ext.form.TimeField', {
//                id: this.id+'-end-time',
//                hidden: this.showTimes === false,
//                labelWidth: 0,
//                hideLabel:true,
//                width:90,
//                listeners: {
//                    'select': {
//                        fn: function(){
//                            this.onFieldChange('time', 'end');
//                        },
//                        scope: this
//                    }
//                }
//            })
//            this.endDate = Ext.create('Ext.form.DateField', {
//                id: this.id+'-end-date',
//                format: this.dateFormat,
//                hideLabel:true,
//                width:100,
//                listeners: {
//                    'change': {
//                        fn: function(){
//                            this.onFieldChange('date', 'end');
//                        },
//                        scope: this
//                    }
//                }
//            });
//            this.allDay = Ext.create('Ext.form.Checkbox', {
//                id: this.id+'-allday',
//                hidden: this.showTimes === false || this.showAllDay === false,
//                boxLabel: this.allDayText,
//                handler: function(chk, checked){
//                    this.startTime.setVisible(!checked);
//                    this.endTime.setVisible(!checked);
//                },
//                scope: this
//            });
//            this.toLabel = Ext.create('Ext.form.Label', {
//                xtype: 'label',
//                id: this.id+'-to-label',
//                text: this.toText
//            });
            
//            var singleLine = this.singleLine;
//            if(singleLine == 'auto'){
//                var el, w = this.ownerCt.getWidth() - this.ownerCt.getEl().getPadding('lr');
//                if(el = this.ownerCt.getEl().child('.x-panel-body')){
//                    w -= el.getPadding('lr');
//                }
//                if(el = this.ownerCt.getEl().child('.x-form-item-label')){
//                    w -= el.getWidth() - el.getPadding('lr');
//                }
//                singleLine = w <= this.singleLineMinWidth ? false : true;
//            }
//            
//            this.fieldCt = Ext.create('Ext.Container', {
//                autoEl: {id:this.id}, //make sure the container el has the field's id
//                cls: 'ext-dt-range',
//                renderTo: ct,
//                layout: 'table',
//                layoutConfig: {
//                    columns: singleLine ? 6 : 3
//                },
//                defaults: {
//                    hideParent: true
//                },
//                items:[
//                    this.startDate,
//                    this.startTime,
//                    this.toLabel,
//                    singleLine ? this.endTime : this.endDate,
//                    singleLine ? this.endDate : this.endTime,
//                    this.allDay
//                ]
//            });
//            
//            this.fieldCt.ownerCt = this;
//            this.el = this.fieldCt.getEl();
//            this.items = Ext.create('Ext.util.MixedCollection');
//            this.items.addAll([this.startDate, this.endDate, this.toLabel, this.startTime, this.endTime, this.allDay]);
//        }
//        
//        this.callParent(arguments);
//        
//        if(!singleLine){
//            this.el.child('tr').addCls('ext-dt-range-row1');
//        }
//    },

    // private
    onFieldChange: function(type, startend){
        this.checkDates(type, startend);
        this.fireEvent('change', this, this.getValue());
    },
        
    // private
    checkDates: function(type, startend){
        var me = this,
            typeCap = type === 'date' ? 'Date' : 'Time',
            startField = this['start' + typeCap],
            endField = this['end' + typeCap],
            startValue = me.getDT('start'),
            endValue = me.getDT('end');

        if(startValue > endValue){
            if(startend=='start'){
                endField.setValue(startValue);
            }else{
                startField.setValue(endValue);
                me.checkDates(type, 'start');
            }
        }
        if(type=='date'){
            me.checkDates('time', startend);
        }
    },
    
    /**
     * Returns an array containing the following values in order:<div class="mdetail-params"><ul>
     * <li><b><code>DateTime</code></b> : <div class="sub-desc">The start date/time</div></li>
     * <li><b><code>DateTime</code></b> : <div class="sub-desc">The end date/time</div></li>
     * <li><b><code>Boolean</code></b> : <div class="sub-desc">True if the dates are all-day, false 
     * if the time values should be used</div></li><ul></div>
     * @return {Array} The array of return values
     */
    getValue: function(){
        return [
            this.getDT('start'), 
            this.getDT('end'),
            this.allDay.getValue()
        ];
    },
    
    // private getValue helper
    getDT: function(startend){
        var time = this[startend+'Time'].getValue(),
            dt = this[startend+'Date'].getValue();
            
        if(Ext.isDate(dt)){
            dt = Ext.Date.format(dt, this[startend + 'Date'].format);
        }
        else{
            return null;
        };
        if(time && time != ''){
            time = Ext.Date.format(time, this[startend+'Time'].format);
            var val = Ext.Date.parseDate(dt + ' ' + time, this[startend+'Date'].format + ' ' + this[startend+'Time'].format);
            return val;
            //return Ext.Date.parseDate(dt+' '+time, this[startend+'Date'].format+' '+this[startend+'Time'].format);
        }
        return Ext.Date.parseDate(dt, this[startend+'Date'].format);
        
    },
    
    /**
     * Sets the values to use in the date range.
     * @param {Array/Date/Object} v The value(s) to set into the field. Valid types are as follows:<div class="mdetail-params"><ul>
     * <li><b><code>Array</code></b> : <div class="sub-desc">An array containing, in order, a start date, end date and all-day flag.
     * This array should exactly match the return type as specified by {@link #getValue}.</div></li>
     * <li><b><code>DateTime</code></b> : <div class="sub-desc">A single Date object, which will be used for both the start and
     * end dates in the range.  The all-day flag will be defaulted to false.</div></li>
     * <li><b><code>Object</code></b> : <div class="sub-desc">An object containing properties for StartDate, EndDate and IsAllDay
     * as defined in {@link Extensible.calendar.data.EventMappings}.</div></li><ul></div>
     */
    setValue: function(v){
        if(!v) {
            return;
        }
        var me = this,
            eventMappings = Extensible.calendar.data.EventMappings,
            startDateName = eventMappings.StartDate.name;
            
        if(Ext.isArray(v)){
            me.setDT(v[0], 'start');
            me.setDT(v[1], 'end');
            me.allDay.setValue(!!v[2]);
        }
        else if(Ext.isDate(v)){
            me.setDT(v, 'start');
            me.setDT(v, 'end');
            me.allDay.setValue(false);
        }
        else if(v[startDateName]){ //object
            me.setDT(v[startDateName], 'start');
            if(!me.setDT(v[eventMappings.EndDate.name], 'end')){
                me.setDT(v[startDateName], 'end');
            }
            me.allDay.setValue(!!v[eventMappings.IsAllDay.name]);
        }
    },
    
    // private setValue helper
    setDT: function(dt, startend){
        if(dt && Ext.isDate(dt)){
            this[startend + 'Date'].setValue(dt);
            this[startend + 'Time'].setValue(Ext.Date.format(dt, this[startend + 'Time'].format));
            return true;
        }
    },
    
    // inherited docs
    isDirty: function(){
        var dirty = false;
        if(this.rendered && !this.disabled) {
            this.items.each(function(item){
                if (item.isDirty()) {
                    dirty = true;
                    return false;
                }
            });
        }
        return dirty;
    },
    
    // inherited docs
    reset : function(){
        this.delegateFn('reset');
    },
    
    // private
    delegateFn : function(fn){
        this.items.each(function(item){
            if (item[fn]) {
                item[fn]();
            }
        });
    },
    
    // private
    beforeDestroy: function(){
        Ext.destroy(this.fieldCt);
        this.callParent(arguments);
    },
    
    /**
     * @method getRawValue
     * @hide
     */
    getRawValue : Ext.emptyFn,
    /**
     * @method setRawValue
     * @hide
     */
    setRawValue : Ext.emptyFn
});
/**
 * @class Extensible.calendar.form.field.ReminderCombo
 * @extends Ext.form.field.ComboBox
 * <p>A custom combo used for choosing a reminder setting for an event.</p>
 * <p>This is pretty much a standard combo that is simply pre-configured for the options needed by the
 * calendar components. The default configs are as follows:<pre><code>
width: 200,
fieldLabel: 'Reminder',
queryMode: 'local',
triggerAction: 'all',
forceSelection: true,
displayField: 'desc',
valueField: 'value',
noneText: 'None',
atStartTimeText: 'At start time',
reminderValueFormat: '{0} {1} before start'
</code></pre>
 * <p>To customize the descriptions in the dropdown list override the following methods: 
 * {@link #getMinutesText}, {@link #getHoursText}, {@link #getDaysText} and {@link #getWeeksText}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.form.field.ReminderCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: 'widget.extensible.remindercombo',
    
    requires: ['Ext.data.ArrayStore'],
    
    fieldLabel: 'Reminder',
    queryMode: 'local',
    triggerAction: 'all',
    forceSelection: true,
    displayField: 'desc',
    valueField: 'value',
    noneText: 'None',
    atStartTimeText: 'At start time',
    reminderValueFormat: '{0} {1} before start',
    
    // the following are all deprecated in favor of the corresponding get* template methods.
    // they are still here only for backwards-compatibility and will be removed in a future release.
    minutesText: 'minutes',
    hourText: 'hour',
    hoursText: 'hours',
    dayText: 'day',
    daysText: 'days',
    weekText: 'week',
    weeksText: 'weeks',
    
    // private
    initComponent: function() {
        this.store = this.store || Ext.create('Ext.data.ArrayStore', {
            fields: ['value', 'desc'],
            idIndex: 0,
            data: this.getValueList()
        });
        
        this.callParent(arguments);
    },
    
    /**
     * Returns the list of reminder values used as the contents of the combo list. This method is provided so that
     * the value list can be easily overridden as needed.
     * @return {Array} A 2-dimensional array of type [{String}, {String}] which contains the value and description
     * respectively of each item in the combo list. By default the value is the number of minutes for the selected 
     * time value (e.g., value 120 == '2 hours') with empty string for no value, but these can be set to anything.
     */
    getValueList: function(){
        var me = this,
            fmt = me.reminderValueFormat,
            stringFormat = Ext.String.format;
            
        return [
            ['', me.noneText],
            ['0', me.atStartTimeText],
            ['5', stringFormat(fmt, '5', me.getMinutesText(5))],
            ['15', stringFormat(fmt, '15', me.getMinutesText(15))],
            ['30', stringFormat(fmt, '30', me.getMinutesText(30))],
            ['60', stringFormat(fmt, '1', me.getHoursText(1))],
            ['90', stringFormat(fmt, '1.5', me.getHoursText(1.5))],
            ['120', stringFormat(fmt, '2', me.getHoursText(2))],
            ['180', stringFormat(fmt, '3', me.getHoursText(3))],
            ['360', stringFormat(fmt, '6', me.getHoursText(6))],
            ['720', stringFormat(fmt, '12', me.getHoursText(12))],
            ['1440', stringFormat(fmt, '1', me.getDaysText(1))],
            ['2880', stringFormat(fmt, '2', me.getDaysText(2))],
            ['4320', stringFormat(fmt, '3', me.getDaysText(3))],
            ['5760', stringFormat(fmt, '4', me.getDaysText(4))],
            ['7200', stringFormat(fmt, '5', me.getDaysText(5))],
            ['10080', stringFormat(fmt, '1', me.getWeeksText(1))],
            ['20160', stringFormat(fmt, '2', me.getWeeksText(2))]
        ]
    },
    
    /**
     * Returns the unit text to use for a reminder that has a specified number of minutes
     * prior to the due time (defaults to 'minute' when the passed value === 1, else 'minutes').
     * @param {Number} numMinutes The number of minutes prior to the due time
     * @return {String} The unit text
     */
    getMinutesText: function(numMinutes){
        return numMinutes === 1 ? this.minuteText : this.minutesText;
    },
    /**
     * Returns the unit text to use for a reminder that has a specified number of hours
     * prior to the due time (defaults to 'hour' when the passed value === 1, else 'hours').
     * @param {Number} numHours The number of hours prior to the due time
     * @return {String} The unit text
     */
    getHoursText: function(numHours){
        return numHours === 1 ? this.hourText : this.hoursText;
    },
    /**
     * Returns the unit text to use for a reminder that has a specified number of days
     * prior to the due time (defaults to 'day' when the passed value === 1, else 'days').
     * @param {Number} numDays The number of days prior to the due time
     * @return {String} The unit text
     */
    getDaysText: function(numDays){
        return numDays === 1 ? this.dayText : this.daysText;
    },
    /**
     * Returns the unit text to use for a reminder that has a specified number of weeks
     * prior to the due time (defaults to 'week' when the passed value === 1, else 'weeks').
     * @param {Number} numWeeks The number of weeks prior to the due time
     * @return {String} The unit text
     */
    getWeeksText: function(numWeeks){
        return numWeeks === 1 ? this.weekText : this.weeksText;
    },
    
    // inherited docs
    initValue : function(){
        if(this.value !== undefined){
            this.setValue(this.value);
        }
        else{
            this.setValue('');
        }
        this.originalValue = this.getValue();
    }
});
/**
 * @class Extensible.calendar.util.ColorPicker
 * @extends Ext.picker.Color
 * Simple color picker class for choosing colors specifically for calendars. This is a lightly modified version
 * of the default Ext color picker that is based on calendar ids rather than hex color codes so that the colors
 * can be easily modified via CSS and automatically applied to calendars. The specific colors used by default are
 * also chosen to provide good color contrast when displayed in calendars.
</code></pre>
 * @constructor
 * Create a new color picker
 * @param {Object} config The config object
 * @xtype extensible.calendarcolorpicker
 */
Ext.define('Extensible.calendar.util.ColorPicker', {
    extend: 'Ext.picker.Color',
    alias: 'widget.extensible.calendarcolorpicker',
    
    requires: ['Ext.XTemplate'],
    
    // private
    colorCount: 32,
    
    /**
     * @cfg {Function} handler
     * Optional. A function that will handle the select event of this color picker.
     * The handler is passed the following parameters:<div class="mdetail-params"><ul>
     * <li><code>picker</code> : ColorPicker<div class="sub-desc">The picker instance.</div></li>
     * <li><code>colorId</code> : String<div class="sub-desc">The id that identifies the selected color and relates it to a calendar.</div></li>
     * </ul></div>
     */
    
    constructor: function() {
        this.renderTpl = Ext.create('Ext.XTemplate', 
            '<tpl for="colors"><a href="#" class="x-cal-{.}" hidefocus="on">' +
            '<em><span unselectable="on">&#160;</span></em></a></tpl>');
        
        this.callParent(arguments);
    },
    
    // private
    initComponent: function(){
        this.callParent(arguments);
        
        this.addCls('x-calendar-palette');
            
        if(this.handler){
            this.on('select', this.handler, this.scope || this, {
                delegate: 'a'
            });
        }
        
        this.colors = [];
        for(var i=1; i<=this.colorCount; i++){
            this.colors.push(i);
        }
    },
    
    // private
    handleClick : function(e, t){
        e.preventDefault();
        
        var colorId = t.className.split('x-cal-')[1];
        this.select(colorId);
    },
    
    /**
     * Selects the specified color in the palette (fires the {@link #select} event)
     * @param {Number} colorId The id that identifies the selected color and relates it to a calendar
     * @param {Boolean} suppressEvent (optional) True to stop the select event from firing. Defaults to <tt>false</tt>.
     */
    select : function(colorId, suppressEvent){
        var me = this,
            selectedCls = me.selectedCls,
            value = me.value;
            
        if (!me.rendered) {
            me.value = colorId;
            return;
        }
        
        if (colorId != value || me.allowReselect) {
            var el = me.el;

            if (me.value) {
                el.down('.x-cal-' + value).removeCls(selectedCls);
            }
            el.down('.x-cal-' + colorId).addCls(selectedCls);
            me.value = colorId;
            
            if (suppressEvent !== true) {
                me.fireEvent('select', me, colorId);
            }
        }
    }
});
/**
 * @private
 * @class Extensible.calendar.gadget.CalendarListMenu
 * @extends Ext.menu.Menu
 * <p>A menu containing a {@link Extensible.calendar.util.ColorPicker color picker} for choosing calendar colors, 
 * as well as other calendar-specific options.</p>
 * @xtype extensible.calendarlistmenu
 */
Ext.define('Extensible.calendar.gadget.CalendarListMenu', {
    extend: 'Ext.menu.Menu',
    alias: 'widget.extensible.calendarlistmenu',
    
    requires: ['Extensible.calendar.util.ColorPicker'],
    
    /**
     * @cfg {Boolean} hideOnClick
     * False to continue showing the menu after a color is selected, defaults to true.
     */
    hideOnClick : true,
    /**
     * @cfg {Boolean} ignoreParentClicks
     * True to ignore clicks on any item in this menu that is a parent item (displays a submenu) 
     * so that the submenu is not dismissed when clicking the parent item (defaults to true).
     */
    ignoreParentClicks: true,
    /**
     * @cfg {String} displayOnlyThisCalendarText
     * The text to display for the 'Display only this calendar' option in the menu.
     */
    displayOnlyThisCalendarText: 'Display only this calendar',
    /**
     * @cfg {Number} calendarId
     * The id of the calendar to be associated with this menu. This calendarId will be passed
     * back with any events from this menu to identify the calendar to be acted upon. The calendar
     * id can also be changed at any time after creation by calling {@link setCalendar}.
     */
    
    /** 
     * @cfg {Boolean} enableScrolling
     * @hide 
     */
    enableScrolling : false,
    /** 
     * @cfg {Number} maxHeight
     * @hide 
     */
    /** 
     * @cfg {Number} scrollIncrement
     * @hide 
     */
    /**
     * @event click
     * @hide
     */
    /**
     * @event itemclick
     * @hide
     */
    
    /**
     * @property palette
     * @type ColorPicker
     * The {@link Extensible.calendar.util.ColorPicker ColorPicker} instance for this CalendarListMenu
     */
    
    // private
    initComponent : function(){
        this.addEvents(
            'showcalendar',
            'hidecalendar',
            'radiocalendar',
            'colorchange'
        );
        
        Ext.apply(this, {
            items: [{
                text: this.displayOnlyThisCalendarText,
                iconCls: 'extensible-cal-icon-cal-show',
                handler: Ext.bind(this.handleRadioCalendarClick, this)
            }, '-', {
                xtype: 'extensible.calendarcolorpicker',
                id: this.id + '-calendar-color-picker',
                handler: Ext.bind(this.handleColorSelect, this)
            }]
        });
        
        this.addClass('x-calendar-list-menu');
        this.callParent(arguments);
    },
    
    // private
    afterRender: function(){
        this.callParent(arguments);
        
        this.palette = this.down('#' + this.id + '-calendar-color-picker');
        
        if(this.colorId){
            this.palette.select(this.colorId, true);
        }
    },
    
    // private
    handleRadioCalendarClick: function(e, t){
        this.fireEvent('radiocalendar', this, this.calendarId);
    },
    
    // private
    handleColorSelect: function(cp, selColorId){
        this.fireEvent('colorchange', this, this.calendarId, selColorId, this.colorId);
        this.colorId = selColorId;
        this.menuHide();
    },
    
    /**
     * Sets the calendar id and color id to be associated with this menu. This should be called each time the
     * menu is shown relative to a new calendar.
     * @param {Number} calendarId The id of the calendar to be associated
     * @param {Number} colorId The id of the color to be pre-selected in the color palette
     * @return {Extensible.calendar.gadget.CalendarListMenu} this
     */
    setCalendar: function(id, cid){
        this.calendarId = id;
        this.colorId = cid;
        
        if(this.rendered){
            this.palette.select(cid, true);
        }
        return this;
    },

    // private
    menuHide : function(){
        if(this.hideOnClick){
            this.hide();
        }
    }
});
/**
 * @class Extensible.calendar.gadget.CalendarListPanel
 * @extends Ext.Panel
 * <p>This is a {@link Ext.Panel panel} subclass that renders a list of available calendars
 * @constructor
 * @param {Object} config The config object
 * @xtype extensible.calendarlist
 */
Ext.define('Extensible.calendar.gadget.CalendarListPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.extensible.calendarlist',
    
    requires: [
        'Ext.XTemplate',
        'Extensible.calendar.gadget.CalendarListMenu'
    ],
    
    title: 'Calendars',
    collapsible: true,
    autoHeight: true,
    layout: 'fit',
    menuSelector: 'em',
    width: 100, // this should be overridden by this container's layout
    
    /**
     * @cfg {Ext.data.Store} store
     * A {@link Ext.data.Store store} containing records of type {@link Extensible.calendar.data.CalendarModel CalendarRecord}.
     * This is a required config and is used to populate the calendar list.  The CalendarList widget will also listen for events from
     * the store and automatically refresh iteself in the event that the underlying calendar records in the store change.
     */
    
    // private
    initComponent: function(){
        this.addCls('x-calendar-list');
        this.callParent(arguments);
    },
    
    // private
    afterRender : function(ct, position){
        this.callParent(arguments);
        
        if(this.store){
            this.setStore(this.store, true);
        }
        this.refresh();
        
        this.body.on('click', this.onClick, this);
        this.body.on('mouseover', this.onMouseOver, this, {delegate: 'li'});
        this.body.on('mouseout', this.onMouseOut, this, {delegate: 'li'});
    },
    
    // private
    getListTemplate : function(){
        if(!this.tpl){
            this.tpl = !(Ext.isIE || Ext.isOpera) ? 
                Ext.create('Ext.XTemplate', 
                    '<ul class="x-unselectable"><tpl for=".">',
                        '<li id="{cmpId}" class="ext-cal-evr {colorCls} {hiddenCls}">{title}<em>&#160;</em></li>',
                    '</tpl></ul>'
                )
                : Ext.create('Ext.XTemplate',
                    '<ul class="x-unselectable"><tpl for=".">',
                        '<li id="{cmpId}" class="ext-cal-evo {colorCls} {hiddenCls}">',
                            '<div class="ext-cal-evm">',
                                '<div class="ext-cal-evi">{title}<em>&#160;</em></div>',
                            '</div>',
                        '</li>',
                    '</tpl></ul>'
                );
            this.tpl.compile();
        }
        return this.tpl;
    },
    
    /**
     * Sets the store used to display the available calendars. It should contain 
     * records of type {@link Extensible.calendar.data.CalendarModel CalendarRecord}.
     * @param {Ext.data.Store} store
     */
    setStore : function(store, initial){
        if(!initial && this.store){
            this.store.un("load", this.refresh, this);
            this.store.un("add", this.refresh, this);
            this.store.un("remove", this.refresh, this);
            this.store.un("update", this.onUpdate, this);
            this.store.un("clear", this.refresh, this);
        }
        if(store){
            store.on("load", this.refresh, this);
            store.on("add", this.refresh, this);
            store.on("remove", this.refresh, this);
            store.on("update", this.onUpdate, this);
            store.on("clear", this.refresh, this);
        }
        this.store = store;
    },
    
    // private
    onUpdate : function(ds, rec, operation){
        // ignore EDIT notifications, only refresh after a commit
        if(operation == Ext.data.Record.COMMIT){
            this.refresh();
        }
    },
    
    /**
     * Refreshes the calendar list so that it displays based on the most current state of
     * the underlying calendar store. Usually this method does not need to be called directly
     * as the control is automatically bound to the store's events, but it is available in the
     * event that a manual refresh is ever needed.
     */
    refresh: function(){
        if(this.skipRefresh){
            return;
        }
        var data = [], i = 0, o = null,
            CM = Extensible.calendar.data.CalendarMappings,
            recs = this.store.getRange(),
            len = recs.length;
            
        for(; i < len; i++){
            o = {
                cmpId: this.id + '__' + recs[i].data[CM.CalendarId.name],
                title: recs[i].data[CM.Title.name],
                colorCls: this.getColorCls(recs[i].data[CM.ColorId.name])
            };
            if(recs[i].data[CM.IsHidden.name] === true){
                o.hiddenCls = 'ext-cal-hidden';
            }
            data[data.length] = o;
        }
        this.getListTemplate().overwrite(this.body, data);
    },
    
    // private
    getColorCls: function(colorId){
        return 'x-cal-'+colorId+'-ad';
    },
    
    // private
    toggleCalendar: function(id, commit){
        var rec = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, id),
            CM = Extensible.calendar.data.CalendarMappings,
            isHidden = rec.data[CM.IsHidden.name]; 
        
        rec.set([CM.IsHidden.name], !isHidden);
        
        if(commit !== false){
            rec.commit();
        }
    },
    
    // private
    showCalendar: function(id, commit){
        var rec = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, id);
        if(rec.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] === true){
            this.toggleCalendar(id, commit);
        }
    },
    
    // private
    hideCalendar: function(id, commit){
        var rec = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, id);
        if(rec.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] !== true){
            this.toggleCalendar(id, commit);
        }
    },
    
    // private
    radioCalendar: function(id){
        var i = 0, recId,
            calendarId = Extensible.calendar.data.CalendarMappings.CalendarId.name,
            recs = this.store.getRange(),
            len = recs.length;
            
        for(; i < len; i++){
            recId = recs[i].data[calendarId];
            // make a truthy check so that either numeric or string ids can match
            if(recId == id){
                this.showCalendar(recId, false);
            }
            else{
                this.hideCalendar(recId, false);
            }
        }
        
        // store.commitChanges() just loops over each modified record and calls rec.commit(),
        // which in turns fires an update event that would cause a full refresh for each record.
        // To avoid this we simply set a flag and make sure we only refresh once per commit set.
        this.skipRefresh = true;
        this.store.sync();
        delete this.skipRefresh;
        this.refresh();
    },
    
    // private
    onMouseOver: function(e, t){
        Ext.fly(t).addCls('hover');
    },
    
    // private
    onMouseOut: function(e, t){
        Ext.fly(t).removeCls('hover');
    },
    
    // private
    getCalendarId: function(el){
        return el.id.split('__')[1];
    },
    
    // private
    getCalendarItemEl: function(calendarId){
        return Ext.get(this.id+'__'+calendarId);
    },
    
    // private
    onClick : function(e, t){
        var el;
        if(el = e.getTarget(this.menuSelector, 3, true)){
            this.showEventMenu(el, e.getXY());
        }
        else if(el = e.getTarget('li', 3, true)){
            this.toggleCalendar(this.getCalendarId(el));
        } 
    },
    
    // private
    handleColorChange: function(menu, id, colorId, origColorId){
        var rec = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, id);
        rec.data[Extensible.calendar.data.CalendarMappings.ColorId.name] = colorId;
        rec.commit();
    },
    
    // private
    handleRadioCalendar: function(menu, id){
        this.radioCalendar(id);
    },
    
    // private
    showEventMenu : function(el, xy){
        var id = this.getCalendarId(el.parent('li')),
            rec = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, id);
            colorId = rec.data[Extensible.calendar.data.CalendarMappings.ColorId.name];
            
        if(!this.menu){
            this.menu = Ext.create('Extensible.calendar.gadget.CalendarListMenu');
            this.menu.on('colorchange', this.handleColorChange, this);
            this.menu.on('radiocalendar', this.handleRadioCalendar, this);
        }
        this.menu.setCalendar(id, colorId);
        this.menu.showAt(xy);
    }
});
/**
 * @class Extensible.calendar.menu.Event
 * @extends Ext.menu.Menu
 * The context menu displayed for calendar events in any {@link Extensible.calendar.view.AbstractCalendar
 * CalendarView} subclass.
 * @xtype extensible.eventcontextmenu
 */
Ext.define('Extensible.calendar.menu.Event', {
    extend: 'Ext.menu.Menu',
    alias: 'widget.extensible.eventcontextmenu',
    
    requires: ['Ext.menu.DatePicker'],
    
    /**
     * @cfg {Boolean} hideOnClick
     * False to continue showing the menu after a color is selected, defaults to true.
     */
    hideOnClick : true,
    /**
     * @cfg {Boolean} ignoreParentClicks
     * True to ignore clicks on any item in this menu that is a parent item (displays a submenu)
     * so that the submenu is not dismissed when clicking the parent item (defaults to true).
     */
    ignoreParentClicks: true,
    /**
     * @cfg {String} editDetailsText
     * The text to display for the 'Edit Details' option in the menu.
     */
    editDetailsText: 'Edit Details',
    /**
     * @cfg {String} deleteText
     * The text to display for the 'Delete' option in the menu.
     */
    deleteText: 'Delete',
    /**
     * @cfg {String} moveToText
     * The text to display for the 'Move to...' option in the menu.
     */
    moveToText: 'Move to...',
    /**
     * @cfg {String} copyToText
     * The text to display for the copy option in the menu
     */
    copyToText: 'Copy to...',
    /**
     * @cfg {Boolean} enableScrolling
     * @hide
     */
    enableScrolling : false,
    /**
     * @cfg {Number} maxHeight
     * @hide
     */
    /**
     * @cfg {Number} scrollIncrement
     * @hide
     */
    /**
     * @event click
     * @hide
     */
    /**
     * @event itemclick
     * @hide
     */
    
    // private
    initComponent : function(){
        this.addEvents(
            /**
             * @event editdetails
             * Fires when the user selects the option to edit the event details
             * (by default, in an instance of {@link Extensible.calendar.form.EventDetails}. Handling code should
             * transfer the current event record to the appropriate instance of the detailed form by showing
             * the form and calling {@link Extensible.calendar.form.EventDetails#loadRecord loadRecord}.
             * @param {Extensible.calendar.menu.Event} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} that is currently being edited
             * @param {Ext.Element} el The element associated with this context menu
             */
            'editdetails',
            /**
             * @event eventdelete
             * Fires after the user selectes the option to delete an event. Note that this menu does not actually
             * delete the event from the data store. This is simply a notification that the menu option was
             * selected -- it is the responsibility of handling code to perform the deletion and any clean
             * up required.
             * @param {Extensible.calendar.menu.Event} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} for the event to be deleted
             * @param {Ext.Element} el The element associated with this context menu
             */
            'eventdelete',
            /**
             * @event eventmove
             * Fires after the user selects a date in the calendar picker under the "move event" menu option.
             * Note that this menu does not actually update the event in the data store. This is simply a
             * notification that the menu option was selected -- it is the responsibility of handling code
             * to perform the move action and any clean up required.
             * @param {Extensible.calendar.menu.Event} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} for the event to be moved
             * @param {Date} dt The new start date for the event (the existing event start time will be preserved)
             */
            'eventmove',
            /**
             * @event eventcopy
             * Fires after the user selects a date in the calendar picker under the "copy event" menu option.
             * Note that this menu does not actually update the event in the data store. This is simply a
             * notification that the menu option was selected -- it is the responsibility of handling code
             * to perform the copy action.
             * @param {Extensible.calendar.menu.Event} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} for the event to be copied
             * @param {Date} dt The start date for the event copy (the existing event start time will
             * be preserved)
             */
            'eventcopy'
        );
        
        this.buildMenu();
        this.callParent(arguments);
    },
    
    /**
     * Overrideable method intended for customizing the menu items. This should only to be used for overriding
     * or called from a subclass and should not be called directly from application code.
     */
    buildMenu: function() {
        var me = this;
        
        if(me.rendered){
            return;
        }
        me.dateMenu = Ext.create('Ext.menu.DatePicker', {
            scope: me,
            handler: me.onEventMoveSelected
        });
        me.copyMenu = Ext.create('Ext.menu.DatePicker', {
            scope: me,
            handler: me.onEventCopySelected
        });
        
        Ext.apply(me, {
            items: [{
                text: me.editDetailsText,
                iconCls: 'extensible-cal-icon-evt-edit',
                scope: me,
                handler: function(){
                    me.fireEvent('editdetails', me, me.rec, me.ctxEl);
                }
            },{
                text: me.deleteText,
                iconCls: 'extensible-cal-icon-evt-del',
                scope: me,
                handler: function(){
                    me.fireEvent('eventdelete', me, me.rec, me.ctxEl);
                }
            },'-',{
                text: me.moveToText,
                iconCls: 'extensible-cal-icon-evt-move',
                menu: me.dateMenu
            },{
                text: me.copyToText,
                iconCls: 'extensible-cal-icon-evt-copy',
                menu: me.copyMenu
            }]
        });
    },
    
    onEventMoveSelected: function(datePicker, selectedDate){
        this.doCopyOrMove(selectedDate, 'move');
    },
    
    onEventCopySelected: function(datePicker, selectedDate) {
        this.doCopyOrMove(selectedDate, 'copy');
    },
    
    doCopyOrMove: function(selectedDate, mode) {
        selectedDate = Extensible.Date.copyTime(
            this.rec.data[Extensible.calendar.data.EventMappings.StartDate.name], selectedDate);
        
        this.fireEvent('event' + mode, this, this.rec, selectedDate);
    },
    
    /**
     * Shows the specified event at the given XY position.
     * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
     * record} for the event
     * @param {Ext.Element} el The element associated with this context menu
     * @param {Array} xy The X & Y [x, y] values for the position at which to show the menu (coordinates
     * are page-based)
     */
    showForEvent: function(rec, el, xy) {
        var me = this,
            startDate = rec.data[Extensible.calendar.data.EventMappings.StartDate.name];
        
        me.rec = rec;
        me.ctxEl = el;
        me.dateMenu.picker.setValue(startDate);
        me.copyMenu.picker.setValue(startDate);
        me.showAt(xy);
    },
    
    // private
    onHide: function(){
        this.callParent(arguments);
        delete this.ctxEl;
    }
});
/**
 * @class Extensible.calendar.form.EventDetails
 * @extends Ext.form.FormPanel
 * <p>A custom form used for detailed editing of events.</p>
 * <p>This is pretty much a standard form that is simply pre-configured for the options needed by the
 * calendar components. It is also configured to automatically bind records of type {@link Extensible.calendar.data.EventModel}
 * to and from the form.</p>
 * <p>This form also provides custom events specific to the calendar so that other calendar components can be easily
 * notified when an event has been edited via this component.</p>
 * <p>The default configs are as follows:</p><pre><code>
    labelWidth: 65,
    labelWidthRightCol: 65,
    colWidthLeft: '.9',
    colWidthRight: '.1',
    title: 'Event Form',
    titleTextAdd: 'Add Event',
    titleTextEdit: 'Edit Event',
    titleLabelText: 'Title',
    datesLabelText: 'When',
    reminderLabelText: 'Reminder',
    notesLabelText: 'Notes',
    locationLabelText: 'Location',
    webLinkLabelText: 'Web Link',
    calendarLabelText: 'Calendar',
    repeatsLabelText: 'Repeats',
    saveButtonText: 'Save',
    deleteButtonText: 'Delete',
    cancelButtonText: 'Cancel',
    bodyStyle: 'padding:20px 20px 10px;',
    border: false,
    buttonAlign: 'center',
    autoScroll: true,
    recurrence: false
</code></pre>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.form.EventDetails', {
    extend: 'Ext.form.Panel',
    alias: 'widget.extensible.eventeditform',
    
    requires: [
        'Extensible.form.field.DateRange',
        'Extensible.calendar.form.field.ReminderCombo',
        'Extensible.calendar.data.EventMappings',
        'Extensible.calendar.form.field.CalendarCombo',
        'Extensible.form.recurrence.Fieldset',
        'Ext.layout.container.Column',
        'Extensible.form.recurrence.RangeEditWindow'
    ],
    
    labelWidth: 65,
    labelWidthRightCol: 65,
    colWidthLeft: '.9',
    colWidthRight: '.1',
    title: 'Event Form',
    titleTextAdd: 'Add Event',
    titleTextEdit: 'Edit Event',
    titleLabelText: 'Title',
    datesLabelText: 'When',
    reminderLabelText: 'Reminder',
    notesLabelText: 'Notes',
    locationLabelText: 'Location',
    webLinkLabelText: 'Web Link',
    calendarLabelText: 'Calendar',
    repeatsLabelText: 'Repeats',
    saveButtonText: 'Save',
    deleteButtonText: 'Delete',
    cancelButtonText: 'Cancel',
    bodyStyle: 'padding:20px 20px 10px;',
    border: false,
    buttonAlign: 'center',
    autoScroll: true,
    
    /**
     * @cfg {Boolean} recurrence
     * @since 2.0.0
     * True to show the recurrence field, false to hide it (default). Note that recurrence requires
     * something on the server-side that can parse the iCal RRULE format in order to generate the
     * instances of recurring events to display on the calendar, so this field should only be enabled
     * if the server supports it.
     */
    recurrence: false,
    
    /**
     * @cfg {Boolean} allowDefaultAdd
     * @since 2.0.0
     * True to allow the user to save the initial default record displayed in the form while in Add mode
     * and the record is not dirty (default). If false, the form save action will be treated as a cancel action
     * if no editing was performed while in Add mode and the record will not be added. Note that this setting
     * does not apply when in Edit mode. The save action will always be treated as cancel in Edit mode if
     * the form is not dirty.
     *
     * When this option is true any blank or default field values should be allowed by the back end
     * system handling the operation. For example, by default if the event title is blank the calendar views
     * will substitute the value of {@link Extensible.calendar.view.AbstractCalendar#defaultEventTitleText
     * defaultEventTitleText} when displaying it. Any custom fields might require similar custom handling.
     */
    allowDefaultAdd: true,
    
    // private properties:
    layout: 'column',
    
    // private
    initComponent: function(){
        
        this.addEvents({
            /**
             * @event eventadd
             * Fires after a new event is added
             * @param {Extensible.calendar.form.EventDetails} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was added
             */
            eventadd: true,
            /**
             * @event eventupdate
             * Fires after an existing event is updated
             * @param {Extensible.calendar.form.EventDetails} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was updated
             */
            eventupdate: true,
            /**
             * @event eventdelete
             * Fires after an event is deleted
             * @param {Extensible.calendar.form.EventDetails} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was deleted
             */
            eventdelete: true,
            /**
             * @event eventcancel
             * Fires after an event add/edit operation is canceled by the user and no store update took place
             * @param {Extensible.calendar.form.EventDetails} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was canceled
             */
            eventcancel: true
        });
                
        this.titleField = Ext.create('Ext.form.TextField', {
            fieldLabel: this.titleLabelText,
            name: Extensible.calendar.data.EventMappings.Title.name,
            anchor: '70%'
        });
        this.dateRangeField = Ext.create('Extensible.form.field.DateRange', {
            fieldLabel: this.datesLabelText,
            singleLine: false,
            anchor: '70%',
            listeners: {
                'change': Ext.bind(this.onDateChange, this)
            }
        });
        this.reminderField = Ext.create('Extensible.calendar.form.field.ReminderCombo', {
            name: Extensible.calendar.data.EventMappings.Reminder.name,
            fieldLabel: this.reminderLabelText,
            anchor: '70%'
        });
        this.notesField = Ext.create('Ext.form.TextArea', {
            fieldLabel: this.notesLabelText,
            name: Extensible.calendar.data.EventMappings.Notes.name,
            grow: true,
            growMax: 150,
            anchor: '70%'
        });
        this.locationField = Ext.create('Ext.form.TextField', {
            fieldLabel: this.locationLabelText,
            name: Extensible.calendar.data.EventMappings.Location.name,
            anchor: '70%'
        });
        this.urlField = Ext.create('Ext.form.TextField', {
            fieldLabel: this.webLinkLabelText,
            name: Extensible.calendar.data.EventMappings.Url.name,
            anchor: '70%'
        });
        
        // var leftFields = [this.titleField, this.dateRangeField, this.reminderField],
            // rightFields = [this.notesField, this.locationField, this.urlField];
            
        var rightFields = [],
            leftFields  = [this.titleField, this.dateRangeField, this.reminderField,
                           this.notesField, this.locationField, this.urlField];
            
        if(this.recurrence){
            this.recurrenceField = Ext.create('Extensible.form.recurrence.Fieldset', {
                recurrenceOptions: this.recurrence,
                name: Extensible.calendar.data.EventMappings.RRule.name,
                fieldLabel: this.repeatsLabelText,
                anchor: '70%'
            });
            leftFields.splice(2, 0, this.recurrenceField);
        }
        
        if(this.calendarStore){
            this.calendarField = Ext.create('Extensible.calendar.form.field.CalendarCombo', {
                store: this.calendarStore,
                fieldLabel: this.calendarLabelText,
                name: Extensible.calendar.data.EventMappings.CalendarId.name,
                anchor: '70%'
            });
            leftFields.splice(2, 0, this.calendarField);
        }
        
        // Now that all fields are in one column by default, make sure we use
        // the largest configured label width for all fields:
        var labelWidth = Math.max(this.labelWidthRightCol, this.labelWidth);
        
        this.items = [{
            id: this.id+'-left-col',
            columnWidth: this.colWidthLeft,
            layout: 'anchor',
            fieldDefaults: {
                labelWidth: labelWidth
            },
            border: false,
            items: leftFields
        },{
            id: this.id+'-right-col',
            columnWidth: this.colWidthRight,
            layout: 'anchor',
            fieldDefaults: {
                labelWidth: labelWidth
            },
            border: false,
            items: rightFields
        }];
        
        this.fbar = [{
            text:this.saveButtonText, scope: this, handler: this.onSave
        },{
            itemId:this.id+'-del-btn', text:this.deleteButtonText, scope:this, handler:this.onDelete
        },{
            text:this.cancelButtonText, scope: this, handler: this.onCancel
        }];
        
        this.addCls('ext-evt-edit-form');
        
        Ext.apply(this.initialConfig, {
            trackResetOnLoad: true
        });
        
        this.callParent(arguments);
    },
    
    // private
    onDateChange: function(dateRangeField, val){
        if(this.recurrenceField){
            this.recurrenceField.setStartDate(val[0]);
        }
    },
    
    // inherited docs
    loadRecord: function(rec) {
        var me = this,
            EventMappings = Extensible.calendar.data.EventMappings;
        
        me.form.reset().loadRecord.apply(me.form, arguments);
        me.activeRecord = rec;
        me.dateRangeField.setValue(rec.data);
        
        if (me.recurrenceField) {
            me.recurrenceField.setStartDate(rec.data[EventMappings.StartDate.name]);
            me.recurrenceField.setValue(rec.data[EventMappings.RRule.name]);
            
            if (!rec.data[EventMappings.RInstanceStartDate.name]) {
                // If the record is new we have to set the instance start date explicitly to match the
                // field's default so that it does not show up later as dirty if it is not edited:
                rec.data[EventMappings.RInstanceStartDate.name] = rec.getStartDate();
            }
        }
        
        if (me.calendarField) {
            me.calendarField.setValue(rec.data[EventMappings.CalendarId.name]);
        }
        
        if (rec.phantom) {
            me.setTitle(me.titleTextAdd);
            me.down('#' + me.id + '-del-btn').hide();
        }
        else {
            me.setTitle(me.titleTextEdit);
            me.down('#' + me.id + '-del-btn').show();
        }
        
        // Using setValue() results in dirty fields, so we reset the field state
        // after loading the form so that the current values are the "original" values
        me.form.getFields().each(function(item) {
            item.resetOriginalValue();
        });
        
        me.titleField.focus();
    },
    
    updateRecord: function(record) {
        var fields = record.fields,
            values = this.getForm().getValues(),
            EventMappings = Extensible.calendar.data.EventMappings,
            name,
            obj = {};

        fields.each(function(f) {
            name = f.name;
            if (name in values) {
                obj[name] = values[name];
            }
        });
        
        var dates = this.dateRangeField.getValue(),
            allday = obj[EventMappings.IsAllDay.name] = dates[2],
            // Clear times for all day events so that they are stored consistently
            startDate = allday ? Extensible.Date.clearTime(dates[0]) : dates[0],
            endDate = allday ? Extensible.Date.clearTime(dates[1]) : dates[1],
            singleDayDurationConfig = { days: 1 };
        
        // The full length of a day based on the minimum event time resolution:
        singleDayDurationConfig[Extensible.calendar.data.EventModel.resolution] = -1;
        
        obj[EventMappings.StartDate.name] = startDate;
        
        // If the event is all day, calculate the end date as midnight of the day after the end
        // date minus 1 unit based on the EventModel resolution, e.g. 23:59:00 on the end date
        obj[EventMappings.EndDate.name] = allday ?
            Extensible.Date.add(endDate, singleDayDurationConfig) : endDate;
        
        if (EventMappings.Duration) {
            obj[EventMappings.Duration.name] = Extensible.Date.diff(startDate, obj[EventMappings.EndDate.name],
                Extensible.calendar.data.EventModel.resolution);
        }
        
        record.set(obj);
        
        return record.dirty || (record.phantom && this.allowDefaultAdd);
    },
    
    // private
    onCancel: function(){
        this.cleanup(true);
        this.fireEvent('eventcancel', this, this.activeRecord);
    },
    
    // private
    cleanup: function(hide){
        if (this.activeRecord) {
            this.activeRecord.reject();
        }
        delete this.activeRecord;
        
        if (this.form.isDirty()) {
            this.form.reset();
        }
    },
    
    // private
    onSave: function(){
        var me = this,
            originalHasRecurrence = me.activeRecord.isRecurring();
        
        if (!me.form.isValid() && !me.allowDefaultAdd) {
            return;
        }
        
        if (!me.updateRecord(me.activeRecord)) {
            me.onCancel();
            return;
        }
        
        if (me.activeRecord.phantom) {
            me.fireEvent('eventadd', me, me.activeRecord);
        }
        else {
            if (originalHasRecurrence) {
                // We only need to prompt when editing an existing recurring event. If a normal
                // event is edited to make it recurring just do a standard update.
                me.onRecurrenceUpdate();
            }
            else {
                me.fireEvent('eventupdate', me, me.activeRecord);
            }
        }
    },
    
    // private
    onRecurrenceUpdate: function() {
        Extensible.form.recurrence.RangeEditWindow.prompt({
            callback: this.onRecurrenceEditModeSelected,
            scope: this
        });
    },
    
    // private
    onRecurrenceEditModeSelected: function(editMode) {
        var me = this;
        
        if (editMode) {
            me.activeRecord.data[Extensible.calendar.data.EventMappings.REditMode.name] = editMode;
            me.fireEvent('eventupdate', me, me.activeRecord, me.animateTarget);
        }
    },

    // private
    onDelete: function(){
        this.fireEvent('eventdelete', this, this.activeRecord);
    }
});
/**
 * @class Extensible.calendar.form.EventWindow
 * @extends Ext.Window
 * <p>A custom window containing a basic edit form used for quick editing of events.</p>
 * <p>This window also provides custom events specific to the calendar so that other calendar components can be easily
 * notified when an event has been edited via this component.</p>
 * <p>The default configs are as follows:</p><pre><code>
    // Locale configs
    titleTextAdd: 'Add Event',
    titleTextEdit: 'Edit Event',
    width: 600,
    labelWidth: 65,
    detailsLinkText: 'Edit Details...',
    savingMessage: 'Saving changes...',
    deletingMessage: 'Deleting event...',
    saveButtonText: 'Save',
    deleteButtonText: 'Delete',
    cancelButtonText: 'Cancel',
    titleLabelText: 'Title',
    datesLabelText: 'When',
    calendarLabelText: 'Calendar',
    
    // General configs
    closeAction: 'hide',
    modal: false,
    resizable: false,
    constrain: true,
    buttonAlign: 'left',
    editDetailsLinkClass: 'edit-dtl-link',
    enableEditDetails: true,
    bodyStyle: 'padding: 8px 10px 5px;',
    layout: 'fit'
</code></pre>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.form.EventWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.extensible.eventeditwindow',
    
    requires: [
        'Ext.form.Panel',
        'Extensible.calendar.data.EventModel',
        'Extensible.calendar.data.EventMappings',
        'Extensible.form.recurrence.RangeEditWindow'
    ],
    
    // Locale configs
    titleTextAdd: 'Add Event',
    titleTextEdit: 'Edit Event',
    width: 610,
    labelWidth: 75,
    detailsLinkText: 'Edit Details...',
    savingMessage: 'Saving changes...',
    deletingMessage: 'Deleting event...',
    saveButtonText: 'Save',
    deleteButtonText: 'Delete',
    cancelButtonText: 'Cancel',
	patientLabelTex     : 'Patient',            // GaiaEHR
	categoryLabelTex    : 'Category',           // GaiaEHR
	facilityLabelTex    : 'Facility',           // GaiaEHR
	billingLabelTex     : 'Billing Facility',   // GaiaEHR
	statusLabelTex      : 'Status',             // GaiaEHR
	titleLabelText      : 'Notes',              // GaiaEHR
	datesLabelText      : 'When',               // GaiaEHR
	calendarLabelText   : 'Provider',           // GaiaEHR
    
    // General configs
    closeAction: 'hide',
    modal: false,
    resizable: false,
    constrain: true,
    //buttonAlign: 'left',
    editDetailsLinkClass: 'edit-dtl-link',
    enableEditDetails: true,
    layout: 'fit',
    
    formPanelConfig: {
        border: false
    },
    
    /**
     * @cfg {Boolean} allowDefaultAdd
     * @since 2.0.0
     * True to allow the user to save the initial default record displayed in the form while in Add mode
     * and the record is not dirty (default). If false, the form save action will be treated as a cancel action
     * if no editing was performed while in Add mode and the record will not be added. Note that this setting
     * does not apply when in Edit mode. The save action will always be treated as cancel in Edit mode if
     * the form is not dirty.
     *
     * When this option is true any blank or default field values should be allowed by the back end
     * system handling the operation. For example, by default if the event title is blank the calendar views
     * will substitute the value of {@link Extensible.calendar.view.AbstractCalendar#defaultEventTitleText
     * defaultEventTitleText} when displaying it. Any custom fields might require similar custom handling.
     */
    allowDefaultAdd: true,
    
    // private
    initComponent: function(){
        this.addEvents({
            /**
             * @event eventadd
             * Fires after a new event is added
             * @param {Extensible.calendar.form.EventWindow} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was added
             * @param {Ext.Element} el The target element
             */
            eventadd: true,
            /**
             * @event eventupdate
             * Fires after an existing event is updated
             * @param {Extensible.calendar.form.EventWindow} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was updated
             * @param {Ext.Element} el The target element
             */
            eventupdate: true,
            /**
             * @event eventdelete
             * Fires after an event is deleted
             * @param {Extensible.calendar.form.EventWindow} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was deleted
             * @param {Ext.Element} el The target element
             */
            eventdelete: true,
            /**
             * @event eventcancel
             * Fires after an event add/edit operation is canceled by the user and no store update took place
             * @param {Extensible.calendar.form.EventWindow} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was canceled
             * @param {Ext.Element} el The target element
             */
            eventcancel: true,
            /**
             * @event editdetails
             * Fires when the user selects the option in this window to continue editing in the detailed edit form
             * (by default, an instance of {@link Extensible.calendar.form.EventDetails}. Handling code should hide this window
             * and transfer the current event record to the appropriate instance of the detailed form by showing it
             * and calling {@link Extensible.calendar.form.EventDetails#loadRecord loadRecord}.
             * @param {Extensible.calendar.form.EventWindow} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} that is currently being edited
             * @param {Ext.Element} el The target element
             */
            editdetails: true
        });
        
        this.fbar = this.getFooterBarConfig();
        
        this.callParent(arguments);
    },
    
    getFooterBarConfig: function() {
        var cfg = [{
                text: this.saveButtonText,
                itemId: this.id + '-save-btn',
                disabled: false,
                handler: this.onSave,
                scope: this
            },{
                text: this.deleteButtonText,
                itemId: this.id + '-delete-btn',
                disabled: false,
                handler: this.onDelete,
                scope: this,
                hideMode: 'offsets' // IE requires this
            },{
                text: this.cancelButtonText,
                itemId: this.id + '-cancel-btn',
                disabled: false,
                handler: this.onCancel,
                scope: this
            }];
        
        if(this.enableEditDetails !== false){
            cfg.unshift({
                xtype: 'tbtext',
                itemId: this.id + '-details-btn',
                text: '<a href="#" class="' + this.editDetailsLinkClass + '">' + this.detailsLinkText + '</a>'
            });
        }
        return cfg;
    },
    
    // private
    onRender : function(ct, position){
        this.formPanel = Ext.create('Ext.FormPanel', Ext.applyIf({
            fieldDefaults: {
                labelWidth: this.labelWidth
            },
            items: this.getFormItemConfigs()
        }, this.formPanelConfig));
        
        this.add(this.formPanel);
        
        this.callParent(arguments);
    },

	getFormItemConfigs: function() {
		var items = [{
			xtype     : 'patienlivetsearch',                                            // GaiaEHR
			itemId    : this.id + '-patient_search',
			name      : Extensible.calendar.data.EventMappings.Patient.name,
			emptyText : 'Search for patient',
			hideLabel : false,
			fieldLabel: this.patientLabelTex,
			anchor    : '100%',
			listeners : {
				scope : this,
				select: this.onPatientLiveSearchSelect
			}
		},{
			xtype     : 'textfield',                                                    // GaiaEHR
			itemId    : this.id + '-title',
			name      : Extensible.calendar.data.EventMappings.Title.name,
			anchor    : '100%',
			readOnly  : true,
			fieldLabel: this.patientLabelTex
		},{
			xtype     : 'mitos.calcategoriescombobox',                                  // GaiaEHR
			itemId    : this.id + '-category',
			name      : Extensible.calendar.data.EventMappings.Category.name,
			fieldLabel: this.categoryLabelTex,
			anchor    : '100%'
		},{
			xtype     : 'mitos.activefacilitiescombo',                                  // GaiaEHR
			itemId    : this.id + '-facility',
			name      : Extensible.calendar.data.EventMappings.BillingFacility.name,
			fieldLabel: this.facilityLabelTex,
			anchor    : '100%'
		},{
			xtype     : 'mitos.billingfacilitiescombo',                                 // GaiaEHR
			itemId    : this.id + '-billingfacility',
			name      : Extensible.calendar.data.EventMappings.Facility.name,
			fieldLabel: this.billingLabelTex,
			anchor    : '100%'
		},{
			xtype     : 'textfield',                                                    // GaiaEHR
			itemId    : this.id + '-notes',
			name      : Extensible.calendar.data.EventMappings.Notes.name,
			fieldLabel: this.titleLabelText,
			anchor    : '100%'
		},{
			xtype     : 'extensible.daterangefield',                                    // GaiaEHR
			itemId    : this.id + '-dates',
			name      : 'dates',
			anchor    : '95%',
			fieldLabel: this.datesLabelText
		},{
			xtype     : 'mitos.calstatuscombobox',                                      // GaiaEHR
			itemId    : this.id + '-status',
			name      : Extensible.calendar.data.EventMappings.Status.name,
			fieldLabel: this.statusLabelTex,
			anchor    : '100%'
		}];

		if(this.calendarStore) {
			items.push({
				xtype     : 'extensible.calendarcombo',
				itemId    : this.id + '-calendar',
				name      : Extensible.calendar.data.EventMappings.CalendarId.name,
				anchor    : '100%',
				fieldLabel: this.calendarLabelText,
				store     : this.calendarStore
			});
		}

		return items;
	},

	onPatientLiveSearchSelect:function(field){
		var Field = field.up('form').getComponent(this.id + '-title'),
			value = field.rawValue;
		Field.setValue(value);
	},

    // private
    afterRender: function(){
        this.callParent(arguments);
		
		this.el.addCls('ext-cal-event-win');
        
        this.initRefs();
        
        // This junk spacer item gets added to the fbar by Ext (fixed in 4.0.2)
        var junkSpacer = this.getDockedItems('toolbar')[0].items.items[0];
        if (junkSpacer.el.hasCls('x-component-default')) {
            Ext.destroy(junkSpacer);
        }
    },
    
    initRefs: function() {
        // toolbar button refs
        this.saveButton = this.down('#' + this.id + '-save-btn');
        this.deleteButton = this.down('#' + this.id + '-delete-btn');
        this.cancelButton = this.down('#' + this.id + '-cancel-btn');
        this.detailsButton = this.down('#' + this.id + '-details-btn');
        
        if (this.detailsButton) {
            this.detailsButton.getEl().on('click', this.onEditDetailsClick, this);
        }
        
        // form item refs
        this.titleField = this.down('#' + this.id + '-title');
        this.dateRangeField = this.down('#' + this.id + '-dates');
        this.calendarField = this.down('#' + this.id + '-calendar');
    },
    
    // private
    onEditDetailsClick: function(e){
        e.stopEvent();
        this.updateRecord(this.activeRecord, true);
        this.fireEvent('editdetails', this, this.activeRecord, this.animateTarget);
    },
	
	/**
     * Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
     * @param {Ext.data.Record/Object} o Either a {@link Ext.data.Record} if showing the form
     * for an existing event in edit mode, or a plain object containing a StartDate property (and
     * optionally an EndDate property) for showing the form in add mode.
     * @param {String/Element} animateTarget (optional) The target element or id from which the window should
     * animate while opening (defaults to null with no animation)
     * @return {Ext.Window} this
     */
    show: function(o, animateTarget){
        var me = this,
            EventMappings = Extensible.calendar.data.EventMappings,
            form, rec;
        
		// Work around the CSS day cell height hack needed for initial render in IE8/strict:
		me.animateTarget = (Ext.isIE8 && Ext.isStrict) ? null : animateTarget;

        me.callParent([me.animateTarget, function(){
            me.titleField.focus(false, 100);
        }, me]);
        
        form = me.formPanel.form;
        
        // Only show the delete button if the data includes an EventID, otherwise
        // we're adding a new record
        me.deleteButton[o.data && o.data[EventMappings.EventId.name] ? 'show' : 'hide']();
        
        if (o.data) {
            rec = o;

	        me.formPanel.getComponent(this.id + '-patient_search').hide();    //GaiaEHR
	        me.formPanel.getComponent(this.id + '-title').show();             //GaiaEHR

			me.setTitle(rec.phantom ? me.titleTextAdd : me.titleTextEdit);
            form.loadRecord(rec);
        }
        else {

	        me.formPanel.getComponent(this.id + '-patient_search').show();    //GaiaEHR
	        me.formPanel.getComponent(this.id + '-title').hide();             //GaiaEHR

            me.setTitle(me.titleTextAdd);

            var start = o[EventMappings.StartDate.name],
                end = o[EventMappings.EndDate.name] || Extensible.Date.add(start, {hours: 1});
                
            rec = Ext.create('Extensible.calendar.data.EventModel');
            
            rec.data[EventMappings.StartDate.name] = start;
            rec.data[EventMappings.EndDate.name] = end;
            
            rec.data[EventMappings.IsAllDay.name] = !!o[EventMappings.IsAllDay.name] ||
                (start.getDate() !== Extensible.Date.add(end, {millis: 1}).getDate());
            
            rec.data[EventMappings.CalendarId.name] = me.calendarStore ?
                    me.calendarStore.getAt(0).data[Extensible.calendar.data.CalendarMappings.CalendarId.name] : '';
            
            if (EventMappings.Duration) {
                rec.data[EventMappings.Duration.name] = Extensible.Date.diff(start, end,
                    Extensible.calendar.data.EventModel.resolution);
            }
            
            form.reset();
            form.loadRecord(rec);
        }
        
        rec.data[EventMappings.RInstanceStartDate.name] = rec.getStartDate();
        
        me.dateRangeField.setValue(rec.data);
        me.activeRecord = rec;
        
        // Using setValue() results in dirty fields, so we reset the field state
        // after loading the form so that the current values are the "original" values
        form.getFields().each(function(item) {
            item.resetOriginalValue();
        });
        
		return me;
    },
    
    // private
    roundTime: function(dt, incr){
        incr = incr || 15;
        var m = parseInt(dt.getMinutes(), 10);
        return dt.add('mi', incr - (m % incr));
    },
    
    // private
    onCancel: function(){
        this.cleanup(true);
		this.fireEvent('eventcancel', this, this.activeRecord, this.animateTarget);
    },

    // private
    cleanup: function(hide){
        if (this.activeRecord) {
            this.activeRecord.reject();
        }
        delete this.activeRecord;
		
        if (hide===true) {
			// Work around the CSS day cell height hack needed for initial render in IE8/strict:
			//var anim = afterDelete || (Ext.isIE8 && Ext.isStrict) ? null : this.animateTarget;
            this.hide();
        }
    },
    
    updateRecord: function(record, keepEditing) {
        var fields = record.fields,
            values = this.formPanel.getForm().getValues(),
            EventMappings = Extensible.calendar.data.EventMappings,
            name,
            obj = {},
            modified;

        fields.each(function(f) {
            name = f.name;
            if (name in values) {
                obj[name] = values[name];
            }
        });
        
        var dates = this.dateRangeField.getValue(),
            allday = obj[EventMappings.IsAllDay.name] = dates[2],
            // Clear times for all day events so that they are stored consistently
            startDate = allday ? Extensible.Date.clearTime(dates[0]) : dates[0],
            endDate = allday ? Extensible.Date.clearTime(dates[1]) : dates[1],
            singleDayDurationConfig = { days: 1 };
        
        // The full length of a day based on the minimum event time resolution:
        singleDayDurationConfig[Extensible.calendar.data.EventModel.resolution] = -1;
        
        obj[EventMappings.StartDate.name] = startDate;
        
        // If the event is all day, calculate the end date as midnight of the day after the end
        // date minus 1 unit based on the EventModel resolution, e.g. 23:59:00 on the end date
        obj[EventMappings.EndDate.name] = allday ?
            Extensible.Date.add(endDate, singleDayDurationConfig) : endDate;
        
        if (EventMappings.Duration) {
            obj[EventMappings.Duration.name] = Extensible.Date.diff(startDate, obj[EventMappings.EndDate.name],
                Extensible.calendar.data.EventModel.resolution);
        }

        record.beginEdit();
        record.set(obj);
        
        if (!keepEditing || !modified) {
            record.endEdit();
        }

        return record.dirty || (record.phantom && this.allowDefaultAdd);
    },
    
    // private
    onSave: function(){
        var me = this,
            form = me.formPanel.form,
            originalHasRecurrence = me.activeRecord.isRecurring();
        
        if (!form.isDirty() && !me.allowDefaultAdd) {
            me.onCancel();
            return;
        }
        if (!form.isValid()) {
            return;
        }
        
        if (!me.updateRecord(me.activeRecord)) {
            me.onCancel();
            return;
        }
        
        if (me.activeRecord.phantom) {
            me.fireEvent('eventadd', me, me.activeRecord, me.animateTarget);
        }
        else {
            if (originalHasRecurrence) {
                // We only need to prompt when editing an existing recurring event. If a normal
                // event is edited to make it recurring just do a standard update.
                me.onRecurrenceUpdate();
            }
            else {
                me.fireEvent('eventupdate', me, me.activeRecord, me.animateTarget);
            }
        }
    },
    
    // private
    onRecurrenceUpdate: function() {
        Extensible.form.recurrence.RangeEditWindow.prompt({
            callback: this.onRecurrenceEditModeSelected,
            scope: this
        });
    },
    
    // private
    onRecurrenceEditModeSelected: function(editMode) {
        var me = this;
        
        if (editMode) {
            me.activeRecord.data[Extensible.calendar.data.EventMappings.REditMode.name] = editMode;
            me.fireEvent('eventupdate', me, me.activeRecord, me.animateTarget);
        }
    },
    
    // private
    onDelete: function() {
		this.fireEvent('eventdelete', this, this.activeRecord, this.animateTarget);
    }
});
/**
 * @class Extensible.calendar.view.AbstractCalendar
 * @extends Ext.BoxComponent
 * <p>This is an abstract class that serves as the base for other calendar views. This class is not
 * intended to be directly instantiated.</p>
 * <p>When extending this class to create a custom calendar view, you must provide an implementation
 * for the <code>renderItems</code> method, as there is no default implementation for rendering events
 * The rendering logic is totally dependent on how the UI structures its data, which
 * is determined by the underlying UI template (this base class does not have a template).</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.AbstractCalendar', {
    extend: 'Ext.Component',

    requires: [
        'Ext.CompositeElement',
        'Extensible.calendar.form.EventDetails',
        'Extensible.calendar.form.EventWindow',
        'Extensible.calendar.menu.Event',
        'Extensible.calendar.dd.DragZone',
        'Extensible.calendar.dd.DropZone',
        'Extensible.form.recurrence.RangeEditWindow'
    ],

    /**
     * @cfg {Ext.data.Store} eventStore
     * The {@link Ext.data.Store store} which is bound to this calendar and contains {@link Extensible.calendar.data.EventModel EventRecords}.
     * Note that this is an alias to the default {@link #store} config (to differentiate that from the optional {@link #calendarStore}
     * config), and either can be used interchangeably.
     */
    /**
     * @cfg {Ext.data.Store} calendarStore
     * The {@link Ext.data.Store store} which is bound to this calendar and contains {@link Extensible.calendar.data.CalendarModel CalendarRecords}.
     * This is an optional store that provides multi-calendar (and multi-color) support. If available an additional field for selecting the
     * calendar in which to save an event will be shown in the edit forms. If this store is not available then all events will simply use
     * the default calendar (and color).
     */
    /*
     * @cfg {Boolean} recurrence
     * True to show the recurrence field, false to hide it (default). Note that recurrence requires
     * something on the server-side that can parse the iCal RRULE format in order to generate the
     * instances of recurring events to display on the calendar, so this field should only be enabled
     * if the server supports it.
     */
    recurrence: false,
    
    // @private
    // At the moment these are used, but not required to be modified. In the future, these may be used
    // for customizing how recurrence data is requested and processed.
    recurrenceOptions: {
        expansionMode: 'remote',
        expansionParam: {
            name: 'singleEvents',
            value: true
        }
    },

    /**
     * @cfg {Boolean} readOnly
     * True to prevent clicks on events or the view from providing CRUD capabilities, false to enable CRUD (the default).
     */
    /**
     * @cfg {Number} startDay
     * The 0-based index for the day on which the calendar week begins (0=Sunday, which is the default)
     */
    startDay : 0,
    /**
     * @cfg {Boolean} spansHavePriority
     * Allows switching between two different modes of rendering events that span multiple days. When true,
     * span events are always sorted first, possibly at the expense of start dates being out of order (e.g.,
     * a span event that starts at 11am one day and spans into the next day would display before a non-spanning
     * event that starts at 10am, even though they would not be in date order). This can lead to more compact
     * layouts when there are many overlapping events. If false (the default), events will always sort by start date
     * first which can result in a less compact, but chronologically consistent layout.
     */
    spansHavePriority: false,
    /**
     * @cfg {Boolean} trackMouseOver
     * Whether or not the view tracks and responds to the browser mouseover event on contained elements (defaults to
     * true). If you don't need mouseover event highlighting you can disable this.
     */
    trackMouseOver: true,
    /**
     * @cfg {Boolean} enableFx
     * Determines whether or not visual effects for CRUD actions are enabled (defaults to true). If this is false
     * it will override any values for {@link #enableAddFx}, {@link #enableUpdateFx} or {@link enableRemoveFx} and
     * all animations will be disabled.
     */
    enableFx: true,
    /**
     * @cfg {Boolean} enableAddFx
     * True to enable a visual effect on adding a new event (the default), false to disable it. Note that if
     * {@link #enableFx} is false it will override this value. The specific effect that runs is defined in the
     * {@link #doAddFx} method.
     */
    enableAddFx: true,
    /**
     * @cfg {Boolean} enableUpdateFx
     * True to enable a visual effect on updating an event, false to disable it (the default). Note that if
     * {@link #enableFx} is false it will override this value. The specific effect that runs is defined in the
     * {@link #doUpdateFx} method.
     */
    enableUpdateFx: false,
    /**
     * @cfg {Boolean} enableRemoveFx
     * True to enable a visual effect on removing an event (the default), false to disable it. Note that if
     * {@link #enableFx} is false it will override this value. The specific effect that runs is defined in the
     * {@link #doRemoveFx} method.
     */
    enableRemoveFx: true,
    /**
     * @cfg {Boolean} enableDD
     * True to enable drag and drop in the calendar view (the default), false to disable it
     */
    enableDD: true,
    /**
     * @cfg {Boolean} enableContextMenus
     * True to enable automatic right-click context menu handling in the calendar views (the default), false to disable
     * them. Different context menus are provided when clicking on events vs. the view background.
     */
    enableContextMenus: true,
    /**
     * @cfg {Boolean} suppressBrowserContextMenu
     * When {@link #enableContextMenus} is true, the browser context menu will automatically be suppressed whenever a
     * custom context menu is displayed. When this option is true, right-clicks on elements that do not have a custom
     * context menu will also suppress the default browser context menu (no menu will be shown at all). When false,
     * the browser context menu will still show if the right-clicked element has no custom menu (this is the default).
     */
    suppressBrowserContextMenu: false,
    /**
     * @cfg {Boolean} monitorResize
     * True to monitor the browser's resize event (the default), false to ignore it. If the calendar view is rendered
     * into a fixed-size container this can be set to false. However, if the view can change dimensions (e.g., it's in
     * fit layout in a viewport or some other resizable container) it is very important that this config is true so that
     * any resize event propagates properly to all subcomponents and layouts get recalculated properly.
     */
    monitorResize: true,
    /**
     * @cfg {String} todayText
     * The text to display in the current day's box in the calendar when {@link #showTodayText} is true (defaults to 'Today')
     */
    todayText: 'Today',
    /**
     * @cfg {String} ddCreateEventText
     * The text to display inside the drag proxy while dragging over the calendar to create a new event (defaults to
     * 'Create event for {0}' where {0} is a date range supplied by the view)
     */
    ddCreateEventText: 'Create event for {0}',
    /**
     * @cfg {String} ddCopyEventText
     * The text to display inside the drag proxy while alt-dragging an event to copy it (defaults to
     * 'Copy event to {0}' where {0} is the updated event start date/time supplied by the view)
     */
    ddCopyEventText: 'Copy event to {0}',
    /**
     * @cfg {String} ddMoveEventText
     * The text to display inside the drag proxy while dragging an event to reposition it (defaults to
     * 'Move event to {0}' where {0} is the updated event start date/time supplied by the view)
     */
    ddMoveEventText: 'Move event to {0}',
    /**
     * @cfg {String} ddResizeEventText
     * The string displayed to the user in the drag proxy while dragging the resize handle of an event (defaults to
     * 'Update event to {0}' where {0} is the updated event start-end range supplied by the view). Note that
     * this text is only used in views
     * that allow resizing of events.
     */
    ddResizeEventText: 'Update event to {0}',
    /**
     * @cfg {String} defaultEventTitleText
     * The default text to display as the title of an event that has a null or empty string title value (defaults to '(No title)')
     */
    defaultEventTitleText: '(No title)',
    /**
     * @cfg {String} dateParamStart
     * The param name representing the start date of the current view range that's passed in requests to retrieve events
     * when loading the view (defaults to 'startDate').
     */
    dateParamStart: 'startDate',
    /**
     * @cfg {String} dateParamEnd
     * The param name representing the end date of the current view range that's passed in requests to retrieve events
     * when loading the view (defaults to 'endDate').
     */
    dateParamEnd: 'endDate',
    /**
     * @cfg {String} dateParamFormat
     * The format to use for date parameters sent with requests to retrieve events for the calendar (defaults to 'Y-m-d', e.g. '2010-10-31')
     */
    dateParamFormat: 'Y-m-d',
    /**
     * @cfg {Boolean} editModal
     * True to show the default event editor window modally over the entire page, false to allow user interaction with the page
     * while showing the window (the default). Note that if you replace the default editor window with some alternate component this
     * config will no longer apply.
     */
    editModal: false,
    /**
     * @cfg {Boolean} enableEditDetails
     * True to show a link on the event edit window to allow switching to the detailed edit form (the default), false to remove the
     * link and disable detailed event editing.
     */
    enableEditDetails: true,
    /**
     * @cfg {String} weekendCls
     * A CSS class to apply to weekend days in the current view (defaults to 'ext-cal-day-we' which highlights weekend days in light blue).
     * To disable this styling set the value to null or ''.
     */
    weekendCls: 'ext-cal-day-we',
    /**
     * @cfg {String} prevMonthCls
     * A CSS class to apply to any days that fall in the month previous to the current view's month (defaults to 'ext-cal-day-prev' which
     * highlights previous month days in light gray). To disable this styling set the value to null or ''.
     */
    prevMonthCls: 'ext-cal-day-prev',
    /**
     * @cfg {String} nextMonthCls
     * A CSS class to apply to any days that fall in the month after the current view's month (defaults to 'ext-cal-day-next' which
     * highlights next month days in light gray). To disable this styling set the value to null or ''.
     */
    nextMonthCls: 'ext-cal-day-next',
    /**
     * @cfg {String} todayCls
     * A CSS class to apply to the current date when it is visible in the current view (defaults to 'ext-cal-day-today' which
     * highlights today in yellow). To disable this styling set the value to null or ''.
     */
    todayCls: 'ext-cal-day-today',
    /**
     * @cfg {String} hideMode
     * <p>How this component should be hidden. Supported values are <tt>'visibility'</tt>
     * (css visibility), <tt>'offsets'</tt> (negative offset position) and <tt>'display'</tt>
     * (css display).</p>
     * <br><p><b>Note</b>: For calendar views the default is 'offsets' rather than the Ext JS default of
     * 'display' in order to preserve scroll position after hiding/showing a scrollable view like Day or Week.</p>
     */
    hideMode: 'offsets',
    /**
     * @cfg {String} notifyOnExceptionTitle
     * @since 2.0.0
     * The notification title used by the {@link #notifyOnException} method when a server error occurs
     * (defaults to "Server Error").
     */
    notifyOnExceptionTitle: 'Server Error',
    /**
     * @cfg {String} notifyOnExceptionText
     * @since 2.0.0
     * The notification starting text used by the {@link #notifyOnException} method when a server error occurs
     * (defaults to "The action failed with the following response:"). The text of the error is appended.
     */
    notifyOnExceptionText: 'The action failed with the following response:',
    /**
     * @cfg {String} notifyOnExceptionDefaultMessage
     * @since 2.0.0
     * The default notification message text used by the {@link #notifyOnException} method when a server error occurs
     * and no error message is returned from the server (defaults to "An unknown error occurred").
     */
    notifyOnExceptionDefaultMessage: 'An unknown error occurred',
    
    /**
     * @property ownerCalendarPanel
     * @type Extensible.calendar.CalendarPanel
     * If this view is hosted inside a {@link Extensible.calendar.CalendarPanel CalendarPanel} this property will reference
     * it. If the view was created directly outside of a CalendarPanel this property will be null. Read-only.
     */

    //private properties -- do not override:
    weekCount: 1,
    dayCount: 1,
    eventSelector : '.ext-cal-evt',
    eventOverClass: 'ext-evt-over',
    eventElIdDelimiter: '-evt-',
    dayElIdDelimiter: '-day-',
    recurringInstanceIdDelimiter: '-rid-',

    /**
     * Returns a string of HTML template markup to be used as the body portion of the event template created
     * by {@link #getEventTemplate}. This provides the flexibility to customize what's in the body without
     * having to override the entire XTemplate. This string can include any valid {@link Ext.Template} code, and
     * any data tokens accessible to the containing event template can be referenced in this string.
     * @return {String} The body template string
     */
    getEventBodyMarkup : Ext.emptyFn, // must be implemented by a subclass

    /**
     * <p>Returns the XTemplate that is bound to the calendar's event store (it expects records of type
     * {@link Extensible.calendar.data.EventModel}) to populate the calendar views with events. Internally this method
     * by default generates different markup for browsers that support CSS border radius and those that don't.
     * This method can be overridden as needed to customize the markup generated.</p>
     * <p>Note that this method calls {@link #getEventBodyMarkup} to retrieve the body markup for events separately
     * from the surrounding container markup.  This provides the flexibility to customize what's in the body without
     * having to override the entire XTemplate. If you do override this method, you should make sure that your
     * overridden version also does the same.</p>
     * @return {Ext.XTemplate} The event XTemplate
     */
    getEventTemplate : Ext.emptyFn, // must be implemented by a subclass

    /**
     * This is undefined by default, but can be implemented to allow custom CSS classes and template data to be
     * conditionally applied to events during rendering. This function will be called with the parameter list shown
     * below and is expected to return the CSS class name (or empty string '' for none) that will be added to the
     * event element's wrapping div. To apply multiple class names, simply return them space-delimited within the
     * string (e.g., 'my-class another-class'). Example usage, applied in a CalendarPanel config:
     * <pre><code>
// This example assumes a custom field of 'IsHoliday' has been added to EventRecord
viewConfig: {
    getEventClass: function(rec, allday, templateData, store) {
        if (rec.data.IsHoliday) {
            templateData.iconCls = 'holiday';
            return 'evt-holiday';
        }
        templateData.iconCls = 'plain';
        return '';
    },
    getEventBodyMarkup: function() {
        // This is simplified, but shows the symtax for how you could add a
        // custom placeholder that maps back to the templateData property created
        // in getEventClass. Note that this is standard Ext template syntax.
        if (!this.eventBodyMarkup) {
            this.eventBodyMarkup = '&lt;span class="{iconCls}">&lt;/span> {Title}';
        }
        return this.eventBodyMarkup;
    }
}
</code></pre>
     * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} being rendered
     * @param {Boolean} isAllDay A flag indicating whether the event will be <em>rendered</em> as an all-day event. Note that this
     * will not necessarily correspond with the value of the <tt>EventRecord.IsAllDay</tt> field &mdash; events that span multiple
     * days will be rendered using the all-day event template regardless of the field value. If your logic for this function
     * needs to know whether or not the event will be rendered as an all-day event, this value should be used.
     * @param {Object} templateData A plain JavaScript object that is empty by default. You can add custom properties
     * to this object that will then be passed into the event template for the specific event being rendered. If you have
     * overridden the default event template and added custom data placeholders, you can use this object to pass the data
     * into the template that will replace those placeholders.
     * @param {Ext.data.Store} store The Event data store in use by the view
     * @method getEventClass
     * @return {String} A space-delimited CSS class string (or '')
     */

    // private
    initComponent: function() {
        this.setStartDate(this.startDate || new Date());

        this.callParent(arguments);

        if (this.readOnly === true) {
            this.addCls('ext-cal-readonly');
        }

        this.addEvents({
            /**
             * @event eventsrendered
             * Fires after events are finished rendering in the view
             * @param {Extensible.calendar.view.AbstractCalendar} this
             */
            eventsrendered: true,
            /**
             * @event eventclick
             * Fires after the user clicks on an event element. This is a cancelable event, so returning false from a
             * handler will cancel the click without displaying the event editor view. This could be useful for
             * validating the rules by which events should be editable by the user.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that was clicked on
             * @param {HTMLNode} el The DOM node that was clicked on
             */
            eventclick: true,
            /**
             * @event eventover
             * Fires anytime the mouse is over an event element
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that the cursor is over
             * @param {HTMLNode} el The DOM node that is being moused over
             */
            eventover: true,
            /**
             * @event eventout
             * Fires anytime the mouse exits an event element
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that the cursor exited
             * @param {HTMLNode} el The DOM node that was exited
             */
            eventout: true,
            /**
             * @event beforedatechange
             * Fires before the start date of the view changes, giving you an opportunity to save state or anything else you may need
             * to do prior to the UI view changing. This is a cancelable event, so returning false from a handler will cancel both the
             * view change and the setting of the start date.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Date} startDate The current start date of the view (as explained in {@link #getStartDate}
             * @param {Date} newStartDate The new start date that will be set when the view changes
             * @param {Date} viewStart The first displayed date in the current view
             * @param {Date} viewEnd The last displayed date in the current view
             */
            beforedatechange: true,
            /**
             * @event datechange
             * Fires after the start date of the view has changed. If you need to cancel the date change you should handle the
             * {@link #beforedatechange} event and return false from your handler function.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Date} startDate The start date of the view (as explained in {@link #getStartDate}
             * @param {Date} viewStart The first displayed date in the view
             * @param {Date} viewEnd The last displayed date in the view
             */
            datechange: true,
            /**
             * @event rangeselect
             * Fires after the user drags on the calendar to select a range of dates/times in which to create an event. This is a
             * cancelable event, so returning false from a handler will cancel the drag operation and clean up any drag shim elements
             * without displaying the event editor view. This could be useful for validating that a user can only create events within
             * a certain range.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Object} dates An object containing the start (StartDate property) and end (EndDate property) dates selected
             * @param {Function} callback A callback function that MUST be called after the event handling is complete so that
             * the view is properly cleaned up (shim elements are persisted in the view while the user is prompted to handle the
             * range selection). The callback is already created in the proper scope, so it simply needs to be executed as a standard
             * function call (e.g., callback()).
             */
            rangeselect: true,
            /**
             * @event beforeeventcopy
             * Fires before an existing event is duplicated by the user view the "copy" command. This is a
             * cancelable event, so returning false from a handler will cancel the copy operation.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} for the event that will be copied
             * @param {Date} dt The new start date to be set in the copy (the end date will be automaticaly
             * adjusted to match the original event duration)
             */
            beforeeventcopy: true,
            /**
             * @event eventcopy
             * Fires after an event has been duplicated by the user via the "copy" command. If you need to
             * cancel the copy operation you should handle the {@link #beforeeventcopy} event and return
             * false from your handler function.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} for the event that was copied (with updated start and end dates)
             */
            eventcopy: true,
            /**
             * @event beforeeventmove
             * Fires before an event element is dragged by the user and dropped in a new position. This is a cancelable event, so
             * returning false from a handler will cancel the move operation. This could be useful for validating that a user can
             * only move events within a certain date range.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that will be moved
             * @param {Date} dt The new start date to be set (the end date will be automaticaly adjusted to match the event duration)
             */
            beforeeventmove: true,
            /**
             * @event eventmove
             * Fires after an event element has been dragged by the user and dropped in a new position. If you need to cancel the
             * move operation you should handle the {@link #beforeeventmove} event and return false from your handler function.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that was moved with
             * updated start and end dates
             */
            eventmove: true,
            /**
             * @event initdrag
             * Fires when a drag operation is initiated in the view
             * @param {Extensible.calendar.view.AbstractCalendar} this
             */
            initdrag: true,
            /**
             * @event dayover
             * Fires while the mouse is over a day element
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Date} dt The date that is being moused over
             * @param {Ext.Element} el The day Element that is being moused over
             */
            dayover: true,
            /**
             * @event dayout
             * Fires when the mouse exits a day element
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Date} dt The date that is exited
             * @param {Ext.Element} el The day Element that is exited
             */
            dayout: true,
            /**
             * @event editdetails
             * Fires when the user selects the option in this window to continue editing in the detailed edit form
             * (by default, an instance of {@link Extensible.calendar.form.EventDetails}. Handling code should hide this window
             * and transfer the current event record to the appropriate instance of the detailed form by showing it
             * and calling {@link Extensible.calendar.form.EventDetails#loadRecord loadRecord}.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} that is currently being edited
             * @param {Ext.Element} el The target element
             */
            editdetails: true,
            /**
             * @event eventadd
             * Fires after a new event has been added to the underlying store
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was added
             */
            eventadd: true,
            /**
             * @event eventupdate
             * Fires after an existing event has been updated
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was updated
             */
            eventupdate: true,
            /**
             * @event eventcancel
             * Fires after an event add/edit operation has been canceled by the user and no store update took place
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The new {@link Extensible.calendar.data.EventModel record} that was canceled
             */
            eventcancel: true,
            /**
             * @event beforeeventdelete
             * Fires before an event is deleted by the user. This is a cancelable event, so returning false from a handler
             * will cancel the delete operation.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that was deleted
             * @param {Ext.Element} el The target element
             */
            beforeeventdelete: true,
            /**
             * @event eventdelete
             * Fires after an event has been deleted by the user. If you need to cancel the delete operation you should handle the
             * {@link #beforeeventdelete} event and return false from your handler function.
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel record} for the event that was deleted
             * @param {Ext.Element} el The target element
             */
            eventdelete: true,
            /**
             * @event eventexception
             * Fires after an event has been processed via an Ext proxy and returned with an exception. This
             * could be because of a server error, or because the data returned <code>success: false</code>.
             *
             * The view provides default handling via the overrideable {@link #notifyOnException} method. If
             * any function handling this event returns false, the notifyOnException method will not be called.
             *
             * Note that only Server proxy and subclasses (including Ajax proxy) will raise this event.
             *
             * @param {Extensible.calendar.view.AbstractCalendar} this
             * @param {Object} response The raw response object returned from the server
             * @param {Ext.data.Operation} operation The operation that was processed
             * @since 2.0.0
             */
            eventexception: true
        });
    },

    // private
    afterRender: function() {
        this.callParent(arguments);

        this.renderTemplate();

        if (this.store) {
            this.setStore(this.store, true);
            if (this.store.deferLoad) {
                this.reloadStore(this.store.deferLoad);
                delete this.store.deferLoad;
            }
            else {
                this.store.initialParams = this.getStoreParams();
            }
        }
        if (this.calendarStore) {
            this.setCalendarStore(this.calendarStore, true);
        }

        this.on('resize', this.onResize, this);

        this.el.on({
            'mouseover': this.onMouseOver,
            'mouseout': this.onMouseOut,
            'click': this.onClick,
            //'resize': this.onResize,
            scope: this
        });

        // currently the context menu only contains CRUD actions so do not show it if read-only
        if (this.enableContextMenus && this.readOnly !== true) {
            this.el.on('contextmenu', this.onContextMenu, this);
        }

        this.el.unselectable();

        if (this.enableDD && this.readOnly !== true && this.initDD) {
            this.initDD();
        }

        this.on('eventsrendered', this.onEventsRendered);

        Ext.defer(this.forceSize, 100, this);
    },

    /**
     * Returns an object containing the start and end dates to be passed as params in all calls
     * to load the event store. The param names are customizable using {@link #dateParamStart}
     * and {@link #dateParamEnd} and the date format used in requests is defined by {@link #dateParamFormat}.
     * If you need to add additional parameters to be sent when loading the store see {@link #getStoreParams}.
     * @return {Object} An object containing the start and end dates
     */
    getStoreDateParams: function() {
        var o = {};
        o[this.dateParamStart] = Ext.Date.format(this.viewStart, this.dateParamFormat);
        o[this.dateParamEnd] = Ext.Date.format(this.viewEnd, this.dateParamFormat);
        return o;
    },

    /**
     * Returns an object containing all key/value params to be passed when loading the event store.
     * By default the returned object will simply be the same object returned by {@link #getStoreDateParams},
     * but this method is intended to be overridden if you need to pass anything in addition to start and end dates.
     * See the inline code comments when overriding for details.
     * @return {Object} An object containing all params to be sent when loading the event store
     */
    getStoreParams: function() {
        // This is needed if you require the default start and end dates to be included
        var params = this.getStoreDateParams();

        // Here is where you can add additional custom params, e.g.:
        // params.now = Ext.Date.format(new Date(), this.dateParamFormat);
        // params.foo = 'bar';
        // params.number = 123;

        return params;
    },

    /**
     * Reloads the view's underlying event store using the params returned from {@link #getStoreParams}.
     * Reloading the store is typically managed automatically by the view itself, but the method is
     * available in case a manual reload is ever needed.
     * @param {Object} options (optional) An object matching the format used by Store's {@link Ext.data.Store#load load} method
     */
    reloadStore: function(o) {
        Extensible.log('reloadStore');

        var recurrenceOptions = this.recurrenceOptions;

        o = Ext.isObject(o) ? o : {};
        o.params = o.params || {};

        Ext.apply(o.params, this.getStoreParams());

        if (this.recurrence && recurrenceOptions.expansionParam && recurrenceOptions.expansionMode === 'remote') {
            o.params[recurrenceOptions.expansionParam.name] = recurrenceOptions.expansionParam.value;
        }

        this.store.load(o);
    },

    // private
    onEventsRendered: function() {
        this.forceSize();
    },

    // private
    forceSize: function() {
        var el = this.el;
        
        if (el && el.down) {
            var hd = el.down('.ext-cal-hd-ct'),
                bd = el.down('.ext-cal-body-ct');

            if (!bd || !hd) {
                return;
            }

            var headerHeight = hd.getHeight(),
                sz = el.parent().getSize();

            bd.setHeight(sz.height - headerHeight);
        }
    },

    /**
     * Refresh the current view, optionally reloading the event store also. While this is normally
     * managed internally on any navigation and/or CRUD action, there are times when you might want
     * to refresh the view manually (e.g., if you'd like to reload using different {@link #getStoreParams params}).
     * @param {Boolean} reloadData True to reload the store data first, false to simply redraw the view using current
     * data (defaults to false)
     */
    refresh: function(reloadData) {
        if (!this.isActiveView()) {
            Extensible.log('refresh (AbstractCalendar), skipped for non-active view (' + this.id + ')');
            return;
        }
        Extensible.log('refresh (AbstractCalendar), reload = ' + reloadData);

        if (reloadData === true) {
            this.reloadStore();
        }
        else {
            this.prepareData();
            this.renderTemplate();
            this.renderItems();
        }
    },

    // private
    getWeekCount: function() {
        var days = Extensible.Date.diffDays(this.viewStart, this.viewEnd);
        return Math.ceil(days / this.dayCount);
    },
    
    // private
    prepareData: function() {
        var lastInMonth = Ext.Date.getLastDateOfMonth(this.startDate),
            w = 0,
            d = 0,
            row = 0,
            currentDt = Ext.Date.clone(this.viewStart),
            weeks = this.weekCount < 1 ? 6 : this.weekCount;

        this.eventGrid = [[]];
        this.allDayGrid = [[]];
        this.evtMaxCount = [];

        var evtsInView = this.store.queryBy(function(rec) {
            return this.isEventVisible(rec.data);
        }, this);
        
        var filterFn = function(rec) {
            var EventMappings = Extensible.calendar.data.EventMappings,
                startDt = Ext.Date.clearTime(rec.data[EventMappings.StartDate.name], true),
                startsOnDate = currentDt.getTime() === startDt.getTime(),
                spansFromPrevView = (w === 0 && d === 0 && (currentDt > rec.data[EventMappings.StartDate.name]));
    
            return startsOnDate || spansFromPrevView;
        };

        for(; w < weeks; w++) {
            this.evtMaxCount[w] = this.evtMaxCount[w] || 0;
            
            if (this.weekCount === -1 && currentDt > lastInMonth) {
                //current week is fully in next month so skip
                break;
            }
            this.eventGrid[w] = this.eventGrid[w] || [];
            this.allDayGrid[w] = this.allDayGrid[w] || [];

            for(d = 0; d < this.dayCount; d++) {
                if (evtsInView.getCount() > 0) {
                    var evts = evtsInView.filterBy(filterFn, this);

                    this.sortEventRecordsForDay(evts);
                    this.prepareEventGrid(evts, w, d);
                }
                currentDt = Extensible.Date.add(currentDt, {days: 1});
            }
        }
        this.currentWeekCount = w;
    },

    // private
    prepareEventGrid: function(evts, w, d) {
        var me = this,
            row = 0,
            dt = Ext.Date.clone(me.viewStart),
            maxEventsForDay;

        evts.each(function(evt) {
            var M = Extensible.calendar.data.EventMappings;

            if (Extensible.Date.diffDays(evt.data[M.StartDate.name], evt.data[M.EndDate.name]) > 0) {
                var daysInView = Extensible.Date.diffDays(
                    Extensible.Date.max(me.viewStart, evt.data[M.StartDate.name]),
                    Extensible.Date.min(me.viewEnd, evt.data[M.EndDate.name])) + 1;

                me.prepareEventGridSpans(evt, me.eventGrid, w, d, daysInView);
                me.prepareEventGridSpans(evt, me.allDayGrid, w, d, daysInView, true);
            }
            else {
                row = me.findEmptyRowIndex(w,d);
                me.eventGrid[w][d] = me.eventGrid[w][d] || [];
                me.eventGrid[w][d][row] = evt;

                if (evt.data[M.IsAllDay.name]) {
                    row = me.findEmptyRowIndex(w,d, true);
                    me.allDayGrid[w][d] = me.allDayGrid[w][d] || [];
                    me.allDayGrid[w][d][row] = evt;
                }
            }
            
            me.setMaxEventsForDay(w, d);

            return true;
        }, me);
    },
    
    // private
    setMaxEventsForDay: function(weekIndex, dayIndex) {
        var max = (this.maxEventsPerDay + 1) || 999;
        
        // If calculating the max event count for the day/week view header, use the allDayGrid
        // so that only all-day events displayed in that area get counted, otherwise count all events.
        var maxEventsForDay = this[this.isHeaderView ? 'allDayGrid' : 'eventGrid'][weekIndex][dayIndex] || [];
        
        this.evtMaxCount[weekIndex] = this.evtMaxCount[weekIndex] || 0;
        
        if (maxEventsForDay.length && this.evtMaxCount[weekIndex] < maxEventsForDay.length) {
            this.evtMaxCount[weekIndex] = Math.min(max, maxEventsForDay.length);
        }
    },

    // private
    prepareEventGridSpans: function(evt, grid, w, d, days, allday) {
        // this event spans multiple days/weeks, so we have to preprocess
        // the events and store special span events as placeholders so that
        // the render routine can build the necessary TD spans correctly.
        var w1 = w,
            d1 = d,
            row = this.findEmptyRowIndex(w,d,allday),
            dt = Ext.Date.clone(this.viewStart);

        var start = {
            event: evt,
            isSpan: true,
            isSpanStart: true,
            spanLeft: false,
            spanRight: (d === 6)
        };
        
        grid[w][d] = grid[w][d] || [];
        grid[w][d][row] = start;
        
        this.setMaxEventsForDay(w, d);
        
        while (--days) {
            dt = Extensible.Date.add(dt, {days: 1});
            
            if (dt > this.viewEnd) {
                break;
            }
            if (++d1 > 6) {
                // reset counters to the next week
                d1 = 0; w1++;
                row = this.findEmptyRowIndex(w1,0);
            }
            grid[w1] = grid[w1] || [];
            grid[w1][d1] = grid[w1][d1] || [];

            grid[w1][d1][row] = {
                event: evt,
                isSpan: true,
                isSpanStart: (d1 === 0),
                spanLeft: (w1 > w) && (d1 % 7 === 0),
                spanRight: (d1 === 6) && (days > 1)
            };
            
            // In this loop we are pre-processing empty span placeholders. In the case
            // where a given week might only contain such spans, we have to make this
            // max event check on each iteration to make sure that our empty placeholder
            // divs get created correctly even without "real" events:
            this.setMaxEventsForDay(w1, d1);
        }
    },

    // private
    findEmptyRowIndex: function(w, d, allday) {
        var grid = allday ? this.allDayGrid : this.eventGrid,
            day = grid[w] ? grid[w][d] || [] : [],
            i = 0,
            len = day.length;

        for (; i < len; i++) {
            if (day[i] === null) {
                return i;
            }
        }
        return len;
    },

    // private
    renderTemplate: function() {
        if (this.tpl) {
            this.tpl.overwrite(this.el, this.getTemplateParams());
            this.lastRenderStart = Ext.Date.clone(this.viewStart);
            this.lastRenderEnd = Ext.Date.clone(this.viewEnd);
        }
    },

    // private
    getTemplateParams: function() {
        return {
            viewStart: this.viewStart,
            viewEnd: this.viewEnd,
            startDate: this.startDate,
            dayCount: this.dayCount,
            weekCount: this.weekCount,
            weekendCls: this.weekendCls,
            prevMonthCls: this.prevMonthCls,
            nextMonthCls: this.nextMonthCls,
            todayCls: this.todayCls
        };
    },

    /**
     * Disable store event monitoring within this view. Note that if you do this the view will no longer
     * refresh itself automatically when CRUD actions occur. To enable store events see {@link #enableStoreEvents}.
     * @return {CalendarView} this
     */
    disableStoreEvents: function() {
        this.monitorStoreEvents = false;
        return this;
    },

    /**
     * Enable store event monitoring within this view if disabled by {@link #disbleStoreEvents}.
     * @return {CalendarView} this
     */
    enableStoreEvents: function(refresh) {
        this.monitorStoreEvents = true;
        if (refresh === true) {
            this.refresh();
        }
        return this;
    },

    // private
    onResize: function() {
        this.refresh(false);
    },

    // private
    onInitDrag: function() {
        this.fireEvent('initdrag', this);
    },

    // private
    onEventDrop: function(rec, dt, mode) {
        this[(mode || 'move') + 'Event'](rec, dt);
    },

    // private
    onCalendarEndDrag: function(start, end, onComplete) {
        // set this flag for other event handlers that might conflict while we're waiting
        this.dragPending = true;

        var dates = {},
            boundOnComplete = Ext.bind(this.onCalendarEndDragComplete, this, [onComplete]);

        dates[Extensible.calendar.data.EventMappings.StartDate.name] = start;
        dates[Extensible.calendar.data.EventMappings.EndDate.name] = end;

        if (this.fireEvent('rangeselect', this, dates, boundOnComplete) !== false) {
            this.showEventEditor(dates, null);
            
            if (this.editWin) {
                this.editWin.on('hide', boundOnComplete, this, {single:true});
            }
            else {
                boundOnComplete();
            }
        }
        else {
            // client code canceled the selection so clean up immediately
            this.onCalendarEndDragComplete(boundOnComplete);
        }
    },

    // private
    onCalendarEndDragComplete: function(onComplete) {
        // callback for the drop zone to clean up
        onComplete();
        // clear flag for other events to resume normally
        this.dragPending = false;
    },

    /**
     * Determine whether a store reload is required after a given CRUD operation.
     * @param {String} action One of 'create', 'update' or 'delete'
     * @param {Ext.data.Operation} operation The affected operation
     * @return {Boolean} true if a reload is required, else false
     */
    storeReloadRequired: function(action, operation) {
        // This is the default logic for all actions
        return operation.records[0].isRecurring();
    },

    // private
    onUpdate: function(store, operation, updateType) {
        if (this.hidden === true || this.monitorStoreEvents === false) {
            return;
        }
        if (updateType === Ext.data.Record.COMMIT) {
            Extensible.log('onUpdate');
            this.dismissEventEditor();

            this.refresh(this.storeReloadRequired('update', operation));

            var rec = operation.records[0];

            if (this.enableFx && this.enableUpdateFx) {
                this.doUpdateFx(this.getEventEls(rec.data[Extensible.calendar.data.EventMappings.EventId.name]), {
                    scope: this
                });
            }
        }
    },

    /**
     * Provides the element effect(s) to run after an event is updated. The method is passed a {@link Ext.CompositeElement}
     * that contains one or more elements in the DOM representing the event that was updated. The default
     * effect is {@link Ext.Element#highlight highlight}. Note that this method will only be called when
     * {@link #enableUpdateFx} is true (it is false by default).
     * @param {Ext.CompositeElement} el The {@link Ext.CompositeElement} representing the updated event
     * @param {Object} options An options object to be passed through to any Element.Fx methods. By default this
     * object only contains the current scope (<tt>{scope:this}</tt>) but you can also add any additional fx-specific
     * options that might be needed for a particular effect to this object.
     */
    doUpdateFx: function(els, o) {
        this.highlightEvent(els, null, o);
    },

    // private
    onAdd: function(store, operation) {
        var rec = operation.records[0];

        if (this.hidden === true || this.monitorStoreEvents === false) {
            return;
        }
        // if (rec._deleting) {
            // delete rec._deleting;
            // return;
        // }

        Extensible.log('onAdd');

        this.dismissEventEditor();
        //this.tempEventId = rec.id;

        this.refresh(this.storeReloadRequired('create', operation));

        // if (this.enableFx && this.enableAddFx) {
            // this.doAddFx(this.getEventEls(rec.data[Extensible.calendar.data.EventMappings.EventId.name]), {
                // scope: this
            // });
        // }
    },

    /**
     * Provides the element effect(s) to run after an event is added. The method is passed a {@link Ext.CompositeElement}
     * that contains one or more elements in the DOM representing the event that was added. The default
     * effect is {@link Ext.Element#fadeIn fadeIn}. Note that this method will only be called when
     * {@link #enableAddFx} is true (it is true by default).
     * @param {Ext.CompositeElement} el The {@link Ext.CompositeElement} representing the added event
     * @param {Object} options An options object to be passed through to any Element.Fx methods. By default this
     * object only contains the current scope (<tt>{scope:this}</tt>) but you can also add any additional fx-specific
     * options that might be needed for a particular effect to this object.
     */
    doAddFx: function(els, o) {
        els.fadeIn(Ext.apply(o, { duration: 2000 }));
    },

    // private
    onRemove: function(store, operation) {
        if (this.hidden === true || this.monitorStoreEvents === false) {
            return;
        }

        Extensible.log('onRemove');
        this.dismissEventEditor();

        var reloadRequired = this.storeReloadRequired('delete', operation),
            rec = operation.records[0];

        if (this.enableFx && this.enableRemoveFx) {
            this.doRemoveFx(this.getEventEls(rec.data[Extensible.calendar.data.EventMappings.EventId.name]), {
                remove: true,
                scope: this,
                callback: Ext.bind(this.refresh, this, [reloadRequired])
            });
        }
        else {
            this.getEventEls(rec.data[Extensible.calendar.data.EventMappings.EventId.name]).remove();
            this.refresh(reloadRequired);
        }
    },

    /**
     * Provides the element effect(s) to run after an event is removed. The method is passed a {@link Ext.CompositeElement}
     * that contains one or more elements in the DOM representing the event that was removed. The default
     * effect is {@link Ext.Element#fadeOut fadeOut}. Note that this method will only be called when
     * {@link #enableRemoveFx} is true (it is true by default).
     * @param {Ext.CompositeElement} el The {@link Ext.CompositeElement} representing the removed event
     * @param {Object} options An options object to be passed through to any Element.Fx methods. By default this
     * object contains the following properties:
     * <pre><code>
{
   remove: true, // required by fadeOut to actually remove the element(s)
   scope: this,  // required for the callback
   callback: fn  // required to refresh the view after the fx finish
}
     * </code></pre>
     * While you can modify this options object as needed if you change the effect used, please note that the
     * callback method (and scope) MUST still be passed in order for the view to refresh correctly after the removal.
     * Please see the inline code comments before overriding this method.
     */
    doRemoveFx: function(els, o) {
        // Please make sure you keep this entire code block or removing events might not work correctly!
        // Removing is a little different because we have to wait for the fx to finish, then we have to actually
        // refresh the view AFTER the fx are run (this is different than add and update).
        if (els.getCount() === 0 && Ext.isFunction(o.callback)) {
            // if there are no matching elements in the view make sure the callback still runs.
            // this can happen when an event accessed from the "more" popup is deleted.
            o.callback.call(o.scope || this);
        }
        else {
            // If you'd like to customize the remove fx do so here. Just make sure you
            // DO NOT override the default callback property on the options object, and that
            // you still pass that object in whatever fx method you choose.
            els.fadeOut(o);
        }
    },

    /**
     * Visually highlights an event using {@link Ext.Fx#highlight} config options.
     * @param {Ext.CompositeElement} els The element(s) to highlight
     * @param {Object} color (optional) The highlight color. Should be a 6 char hex
     * color without the leading # (defaults to yellow: 'ffff9c')
     * @param {Object} o (optional) Object literal with any of the {@link Ext.Fx} config
     * options. See {@link Ext.Fx#highlight} for usage examples.
     */
    highlightEvent: function(els, color, o) {
        if (this.enableFx) {
            if (Ext.isIE || Ext.isOpera) {
                // Fun IE/Opera handling:
                var highlightEl;
                
                els.each(function(el) {
                    el.highlight(color, Ext.applyif ({attr:'color'}, o));
                    var highlightEl = el.down('.ext-cal-evm');
                    
                    if (highlightEl) {
                        highlightEl.highlight(color, o);
                    }
                }, this);
            }
            else {
                els.highlight(color, o);
            }
        }
    },

    /**
     * Retrieve an Event object's id from its corresponding node in the DOM.
     * @param {String/Element/HTMLElement} el An {@link Ext.Element}, DOM node or id
     */
//    getEventIdFromEl: function(el) {
//        el = Ext.get(el);
//        var id = el.id.split(this.eventElIdDelimiter)[1];
//        if (id.indexOf('-w_') > -1) {
//            //This id has the index of the week it is rendered in as part of the suffix.
//            //This allows events that span across weeks to still have reproducibly-unique DOM ids.
//            id = id.split('-w_')[0];
//        }
//        return id;
//    },
    getEventIdFromEl: function(el) {
        el = Ext.get(el);
        var parts, id = '', cls, classes = el.dom.className.split(' ');

        Ext.each(classes, function(cls) {
            parts = cls.split(this.eventElIdDelimiter);
            if (parts.length > 1) {
                id = parts[1];
                return false;
            }
        }, this);

        return id;
    },

    // private
    getEventId: function(eventId) {
        if (eventId === undefined && this.tempEventId) {
            // temp record id assigned during an add, will be overwritten later
            eventId = this.tempEventId;
        }
        return eventId;
    },

    /**
     *
     * @param {String} eventId
     * @param {Boolean} forSelect
     * @return {String} The selector class
     */
    getEventSelectorCls: function(eventId, forSelect) {
        var prefix = forSelect ? '.' : '',
            id = this.getEventId(eventId),
            cls = prefix + this.id + this.eventElIdDelimiter + id;

        return cls;
    },

    /**
     *
     * @param {String} eventId
     * @return {Ext.CompositeElement} The matching CompositeElement of nodes
     * that comprise the rendered event.  Any event that spans across a view
     * boundary will contain more than one internal Element.
     */
    getEventEls: function(eventId) {
        var els = this.el.select(this.getEventSelectorCls(this.getEventId(eventId), true), false);
        return Ext.create('Ext.CompositeElement', els);
    },

    /**
     * Returns true if the view is currently displaying today's date, else false.
     * @return {Boolean} True or false
     */
    isToday: function() {
        var today = Ext.Date.clearTime(new Date()).getTime();
        return this.viewStart.getTime() <= today && this.viewEnd.getTime() >= today;
    },

    // private
    isEventVisible: function(evt) {
        var M = Extensible.calendar.data.EventMappings,
            data = evt.data || evt,
            calRec = this.calendarStore ?
                this.calendarStore.findRecord(M.CalendarId.name, evt[M.CalendarId.name]) : null;

        if (calRec && calRec.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] === true) {
            // if the event is on a hidden calendar then no need to test the date boundaries
            return false;
        }

        var start = this.viewStart.getTime(),
            end = this.viewEnd.getTime(),
            evStart = data[M.StartDate.name].getTime(),
            evEnd = data[M.EndDate.name].getTime();

        return Extensible.Date.rangesOverlap(start, end, evStart, evEnd);
    },

    // private
    isOverlapping: function(evt1, evt2) {
        var ev1 = evt1.data ? evt1.data : evt1,
            ev2 = evt2.data ? evt2.data : evt2,
            M = Extensible.calendar.data.EventMappings,
            start1 = ev1[M.StartDate.name].getTime(),
            end1 = Extensible.Date.add(ev1[M.EndDate.name], {seconds: -1}).getTime(),
            start2 = ev2[M.StartDate.name].getTime(),
            end2 = Extensible.Date.add(ev2[M.EndDate.name], {seconds: -1}).getTime(),
            startDiff = Extensible.Date.diff(ev1[M.StartDate.name], ev2[M.StartDate.name], 'm');

            if (end1<start1) {
                end1 = start1;
            }
            if (end2<start2) {
                end2 = start2;
            }

//            var ev1startsInEv2 = (start1 >= start2 && start1 <= end2),
//            ev1EndsInEv2 = (end1 >= start2 && end1 <= end2),
//            ev1SpansEv2 = (start1 < start2 && end1 > end2),
            var evtsOverlap = Extensible.Date.rangesOverlap(start1, end1, start2, end2),
                minimumMinutes = this.minEventDisplayMinutes || 0, // applies in day/week body view only for vertical overlap
                ev1MinHeightOverlapsEv2 = minimumMinutes > 0 && (startDiff > -minimumMinutes && startDiff < minimumMinutes);

        //return (ev1startsInEv2 || ev1EndsInEv2 || ev1SpansEv2 || ev1MinHeightOverlapsEv2);
        return (evtsOverlap || ev1MinHeightOverlapsEv2);
    },

    // private
    isEventSpanning: function(evt) {
        var M = Extensible.calendar.data.EventMappings,
            data = evt.data || evt,
            diff;

        diff = Extensible.Date.diffDays(data[M.StartDate.name], data[M.EndDate.name]);

        //TODO: Prevent 00:00 end time from causing a span. This logic is OK, but
        //      other changes are still needed for it to work fully. Deferring for now.
//        if (diff <= 1 && Extensible.Date.isMidnight(data[M.EndDate.name])) {
//            return false;
//        }
        return diff > 0;
    },

    // private
    getDayEl: function(dt) {
        return Ext.get(this.getDayId(dt));
    },

    // private
    getDayId: function(dt) {
        if (Ext.isDate(dt)) {
            dt = Ext.Date.format(dt, 'Ymd');
        }
        return this.id + this.dayElIdDelimiter + dt;
    },

    /**
     * Returns the start date of the view, as set by {@link #setStartDate}. Note that this may not
     * be the first date displayed in the rendered calendar -- to get the start and end dates displayed
     * to the user use {@link #getViewBounds}.
     * @return {Date} The start date
     */
    getStartDate: function() {
        return this.startDate;
    },

    /**
     * Sets the start date used to calculate the view boundaries to display. The displayed view will be the
     * earliest and latest dates that match the view requirements and contain the date passed to this function.
     * @param {Date} dt The date used to calculate the new view boundaries
     */
    setStartDate: function(start, /*private*/reload) {
        var me = this;

        Extensible.log('setStartDate (base) '+Ext.Date.format(start, 'Y-m-d'));

        var cloneDt = Ext.Date.clone,
            cloneStartDate = me.startDate ? cloneDt(me.startDate) : null,
            cloneStart = cloneDt(start),
            cloneViewStart = me.viewStart ? cloneDt(me.viewStart) : null,
            cloneViewEnd = me.viewEnd ? cloneDt(me.viewEnd) : null;

        if (me.fireEvent('beforedatechange', me, cloneStartDate, cloneStart, cloneViewStart, cloneViewEnd) !== false) {
            me.startDate = Ext.Date.clearTime(start);
            me.setViewBounds(start);

            if (me.ownerCalendarPanel && me.ownerCalendarPanel.startDate !== me.startDate) {
                // Sync the owning CalendarPanel's start date directly, not via CalendarPanel.setStartDate(),
                // since that would in turn call this method again.
                me.ownerCalendarPanel.startDate = me.startDate;
            }

            if (me.rendered) {
                me.refresh(reload);
            }
            me.fireEvent('datechange', me, cloneDt(me.startDate), cloneDt(me.viewStart), cloneDt(me.viewEnd));
        }
    },

    // private
    setViewBounds: function(startDate) {
        var me = this,
            start = startDate || me.startDate,
            offset = start.getDay() - me.startDay,
            Dt = Extensible.Date;

        if (offset < 0) {
            // if the offset is negative then some days will be in the previous week so add a week to the offset
            offset += 7;
        }
        switch(this.weekCount) {
            case 0:
            case 1:
                me.viewStart = me.dayCount < 7 && !me.startDayIsStatic ?
                    start: Dt.add(start, {days: -offset, clearTime: true});
                me.viewEnd = Dt.add(me.viewStart, {days: me.dayCount || 7, seconds: -1});
                return;

            case -1:
                // auto by month
                start = Ext.Date.getFirstDateOfMonth(start);
                offset = start.getDay() - me.startDay;
                if (offset < 0) {
                    // if the offset is negative then some days will be in the previous week so add a week to the offset
                    offset += 7;
                }
                me.viewStart = Dt.add(start, {days: -offset, clearTime: true});

                // start from current month start, not view start:
                var end = Dt.add(start, {months: 1, seconds: -1});

                // fill out to the end of the week:
                offset = me.startDay;
                if (offset > end.getDay()) {
                    // if the offset is larger than the end day index then the last row will be empty so skip it
                    offset -= 7;
                }

                me.viewEnd = Dt.add(end, {days: 6 - end.getDay() + offset});
                return;

            default:
                me.viewStart = Dt.add(start, {days: -offset, clearTime: true});
                me.viewEnd = Dt.add(me.viewStart, {days: me.weekCount * 7, seconds: -1});
        }
    },

    /**
     * Returns the start and end boundary dates currently displayed in the view. The method
     * returns an object literal that contains the following properties:<ul>
     * <li><b>start</b> Date : <div class="sub-desc">The start date of the view</div></li>
     * <li><b>end</b> Date : <div class="sub-desc">The end date of the view</div></li></ul>
     * For example:<pre><code>
var bounds = view.getViewBounds();
alert('Start: '+bounds.start);
alert('End: '+bounds.end);
</code></pre>
     * @return {Object} An object literal containing the start and end values
     */
    getViewBounds: function() {
        return {
            start: this.viewStart,
            end: this.viewEnd
        };
    },

    /* private
     * Sort events for a single day for display in the calendar.  This sorts allday
     * events first, then non-allday events are sorted either based on event start
     * priority or span priority based on the value of {@link #spansHavePriority}
     * (defaults to event start priority).
     * @param {MixedCollection} evts A {@link Ext.util.MixedCollection MixedCollection}
     * of {@link #Extensible.calendar.data.EventModel EventRecord} objects
     */
    sortEventRecordsForDay: function(evts) {
        if (evts.length < 2) {
            return;
        }
        evts.sortBy(Ext.bind(function(evtA, evtB) {
            var a = evtA.data,
                b = evtB.data,
                M = Extensible.calendar.data.EventMappings;

            // Always sort all day events before anything else
            if (a[M.IsAllDay.name]) {
                return -1;
            }
            else if (b[M.IsAllDay.name]) {
                return 1;
            }
            if (this.spansHavePriority) {
                // This logic always weights span events higher than non-span events
                // (at the possible expense of start time order). This seems to
                // be the approach used by Google calendar and can lead to a more
                // visually appealing layout in complex cases, but event order is
                // not guaranteed to be consistent.
                var diff = Extensible.Date.diffDays;
                if (diff(a[M.StartDate.name], a[M.EndDate.name]) > 0) {
                    if (diff(b[M.StartDate.name], b[M.EndDate.name]) > 0) {
                        // Both events are multi-day
                        if (a[M.StartDate.name].getTime() === b[M.StartDate.name].getTime()) {
                            // If both events start at the same time, sort the one
                            // that ends later (potentially longer span bar) first
                            return b[M.EndDate.name].getTime() - a[M.EndDate.name].getTime();
                        }
                        return a[M.StartDate.name].getTime() - b[M.StartDate.name].getTime();
                    }
                    return -1;
                }
                else if (diff(b[M.StartDate.name], b[M.EndDate.name]) > 0) {
                    return 1;
                }
                return a[M.StartDate.name].getTime() - b[M.StartDate.name].getTime();
            }
            else {
                // Doing this allows span and non-span events to intermingle but
                // remain sorted sequentially by start time. This seems more proper
                // but can make for a less visually-compact layout when there are
                // many such events mixed together closely on the calendar.
                return a[M.StartDate.name].getTime() - b[M.StartDate.name].getTime();
            }
        }, this));
    },

    /**
     * Updates the view to contain the passed date
     * @param {Date} dt The date to display
     */
    moveTo: function(dt, /*private*/reload) {
        if (Ext.isDate(dt)) {
            this.setStartDate(dt, reload);
            return this.startDate;
        }
        return dt;
    },

    /**
     * Updates the view to the next consecutive date(s)
     * @return {Date} The new view start date
     */
    moveNext: function(/*private*/reload) {
        return this.moveTo(Extensible.Date.add(this.viewEnd, {days: 1}), reload);
    },

    /**
     * Updates the view to the previous consecutive date(s)
     * @return {Date} The new view start date
     */
    movePrev: function(/*private*/reload) {
        var days = Extensible.Date.diffDays(this.viewStart, this.viewEnd)+1;
        return this.moveDays(-days, reload);
    },

    /**
     * Shifts the view by the passed number of months relative to the currently set date
     * @param {Number} value The number of months (positive or negative) by which to shift the view
     * @return {Date} The new view start date
     */
    moveMonths: function(value, /*private*/reload) {
        return this.moveTo(Extensible.Date.add(this.startDate, {months: value}), reload);
    },

    /**
     * Shifts the view by the passed number of weeks relative to the currently set date
     * @param {Number} value The number of weeks (positive or negative) by which to shift the view
     * @return {Date} The new view start date
     */
    moveWeeks: function(value, /*private*/reload) {
        return this.moveTo(Extensible.Date.add(this.startDate, {days: value * 7}), reload);
    },

    /**
     * Shifts the view by the passed number of days relative to the currently set date
     * @param {Number} value The number of days (positive or negative) by which to shift the view
     * @return {Date} The new view start date
     */
    moveDays: function(value, /*private*/reload) {
        return this.moveTo(Extensible.Date.add(this.startDate, {days: value}), reload);
    },

    /**
     * Updates the view to show today
     * @return {Date} Today's date
     */
    moveToday: function(/*private*/reload) {
        return this.moveTo(new Date(), reload);
    },

    /**
     * Sets the event store used by the calendar to display {@link Extensible.calendar.data.EventModel events}.
     * @param {Ext.data.Store} store
     */
    setStore: function(store, initial) {
        var currStore = this.store;

        if (!initial && currStore) {
            currStore.un("load", this.onEventStoreLoad, this);
            currStore.un("clear", this.refresh, this);
            currStore.un("write", this.onWrite, this);
            // Note that this handler is attached to the proxy's exception event. In Ext 4 the store no longer
            // raises an exception event. Store.sync() does accept a callback argument in 4.1+, but in 4.0.x
            // unfortunately the only way to handle this is directly on the proxy, so for ease of compatibility
            // that's what we're doing here.
            currStore.getProxy().un("exception", this.onException, this);
        }
        if (store) {
            store.on("load", this.onEventStoreLoad, this);
            store.on("clear", this.refresh, this);
            store.on("write", this.onWrite, this);
            store.getProxy().on("exception", this.onException, this);
        }
        this.store = store;
    },
    
    // private
    onEventStoreLoad: function(store, recs, successful) {
        Extensible.log('AbstractCalendar.onEventStoreLoad: store loaded');
        this.refresh(false);
    },
    
    // private
    // No longer used, but kept here for compatibility
    onDataChanged: this.onEventStoreLoad,

    /**
     * This method handles internal housekeeping for cleaning up unsaved records in the store, and also
     * calls {@link #notifyOnException} to provide an easily overrideable mechanism for customizing if/how
     * the user should be notified when an error occurs.
     * @private
     */
    onException: function(proxy, response, operation) {
        // Form edits are explicitly canceled, but we may not know if a drag/drop operation
        // succeeded until after a server round trip. If the server action failed for any reason we have to
        // explicitly reject the changes so that the record doesn't stick around in the store's modified list
        // if the user cancels the action without successfully persisting the change to the server.
        Ext.each(operation.records, function(rec) {
            if (rec.dirty) {
                if (rec.phantom) {
                    rec.unjoin(this.eventStore);
                }
                else {
                    rec.reject();
                }
            }
        }, this);
        
        if (this.fireEvent('eventexception', this, response, operation) !== false) {
            this.notifyOnException(response, operation);
        }
    },
    
    // private
    getExceptionMessage: function(response) {
        var msg = '';
        
        if (response.responseText) {
            msg += '<br><b>responseText</b>: ' + Ext.decode(response.responseText).message;
        }
        if (response.message) {
            msg += '<br><b>message</b>: ' + response.message;
        }
        if (response.status) {
            msg += '<br><b>status</b>: ' + response.status;
        }
        if (response.statusText) {
            msg += '<br><b>statusText</b>: ' + response.statusText;
        }
        
        return msg || ('<br>' + this.notifyOnExceptionDefaultMessage);
    },
    
    /**
     * This is an overrideable method for notifying the user when an exception occurs while attempting to
     * process records via a proxy. The default implementation is to display a standard Ext MessageBox with
     * the returned error message, but you can override this method to provide any desired notification.
     *
     * Note that the view will also raise the {@link #eventexception} event automatically. Event handling
     * functions can return false to bypass this method if application-specific code might conditionally
     * handle exceptions, and still fall back to this method in other cases. To bypass this method globally
     * you can simply remove it like so (or you could do the same thing in a view subclass):
     * <pre><code>
Ext.override(Extensible.calendar.view.AbstractCalendar, {
    notifyOnException: Ext.emptyFn
});
     * </code></pre>
     * @param {Object} response The raw response object returned from the server
     * @param {Ext.data.Operation} operation The operation that was processed
     * @since 2.0.0
     */
    notifyOnException: function(response, operation) {
        Ext.Msg.alert(this.notifyOnExceptionTitle, this.notifyOnExceptionText + '<br>' +
            this.getExceptionMessage(response));
    },

    /**
     * Sets the calendar store used by the calendar (contains records of type {@link Extensible.calendar.data.CalendarModel CalendarRecord}).
     * @param {Ext.data.Store} store
     */
    setCalendarStore: function(store, initial) {
        if (!initial && this.calendarStore) {
            this.calendarStore.un("datachanged", this.refresh, this);
            this.calendarStore.un("add", this.refresh, this);
            this.calendarStore.un("remove", this.refresh, this);
            this.calendarStore.un("update", this.refresh, this);
        }
        if (store) {
            store.on("datachanged", this.refresh, this);
            store.on("add", this.refresh, this);
            store.on("remove", this.refresh, this);
            store.on("update", this.refresh, this);
        }
        this.calendarStore = store;
    },

    // private
    getEventRecord: function(id) {
        var idx = this.store.find(Extensible.calendar.data.EventMappings.EventId.name, id,
            0,     // start index
            false, // match any part of string
            true,  // case sensitive
            true   // force exact match
        );
        return this.store.getAt(idx);
    },

    // private
    getEventRecordFromEl: function(el) {
        return this.getEventRecord(this.getEventIdFromEl(el));
    },

    // private
    getEventEditor: function() {
        // only create one instance of the edit window, even if there are multiple CalendarPanels
        this.editWin = this.editWin || Ext.WindowMgr.get('ext-cal-editwin');

        if (!this.editWin) {
            this.editWin = Ext.create('Extensible.calendar.form.EventWindow', {
                id: 'ext-cal-editwin',
                calendarStore: this.calendarStore,
                modal: this.editModal,
                enableEditDetails: this.enableEditDetails,

                listeners: {
                    'eventadd': {
                        fn: function(win, rec, animTarget, options) {
                            //win.hide(animTarget);
                            win.currentView.onEventEditorAdd(null, rec, options);
                        },
                        scope: this
                    },
                    'eventupdate': {
                        fn: function(win, rec, animTarget, options) {
                            //win.hide(animTarget);
                            win.currentView.onEventEditorUpdate(null, rec, options);
                        },
                        scope: this
                    },
                    'eventdelete': {
                        fn: function(win, rec, animTarget, options) {
                            //win.hide(animTarget);
                            win.currentView.onEventEditorDelete(null, rec, options);
                        },
                        scope: this
                    },
                    'editdetails': {
                        fn: function(win, rec, animTarget, view) {
                            // explicitly do not animate the hide when switching to detail
                            // view as it looks weird visually
                            win.animateTarget = null;
                            win.hide();
                            win.currentView.fireEvent('editdetails', win.currentView, rec);
                        },
                        scope: this
                    },
                    'eventcancel': {
                        fn: function(win, rec, animTarget) {
                            this.dismissEventEditor(null, animTarget);
                            win.currentView.onEventEditorCancel();
                        },
                        scope: this
                    }
                }
            });
        }

        // allows the window to reference the current scope in its callbacks
        this.editWin.currentView = this;
        return this.editWin;
    },

    /**
     * Show the currently configured event editor view (by default the shared instance of
     * {@link Extensible.calendar.form.EventWindow EventEditWindow}).
     * @param {Extensible.calendar.data.EventModel} rec The event record
     * @param {Ext.Element/HTMLNode} animateTarget The reference element that is being edited. By default this is
     * used as the target for animating the editor window opening and closing. If this method is being overridden to
     * supply a custom editor this parameter can be ignored if it does not apply.
     * @return {Extensible.calendar.view.AbstractCalendar} this
     */
    showEventEditor: function(rec, animateTarget) {
        this.getEventEditor().show(rec, animateTarget, this);
        return this;
    },

    /**
     * Dismiss the currently configured event editor view (by default the shared instance of
     * {@link Extensible.calendar.form.EventWindow EventEditWindow}, which will be hidden).
     * @param {String} dismissMethod (optional) The method name to call on the editor that will dismiss it
     * (defaults to 'hide' which will be called on the default editor window)
     * @return {Extensible.calendar.view.AbstractCalendar} this
     */
    dismissEventEditor: function(dismissMethod, /*private*/ animTarget) {
        if (this.newRecord && this.newRecord.phantom) {
            this.store.remove(this.newRecord);
        }
        delete this.newRecord;

        // grab the manager's ref so that we dismiss it properly even if the active view has changed
        var editWin = Ext.WindowMgr.get('ext-cal-editwin');
        if (editWin) {
            editWin[dismissMethod ? dismissMethod : 'hide'](animTarget);
        }
        return this;
    },

    // private
    save: function() {
        // If the store is configured as autoSync:true the record's endEdit
        // method will have already internally caused a save to execute on
        // the store. We only need to save manually when autoSync is false,
        // otherwise we'll create duplicate transactions.
        if (!this.store.autoSync) {
            this.store.sync();
        }
    },

    // private
    onWrite: function(store, operation) {
        if (operation.wasSuccessful()) {
            //var rec = operation.records[0];

            switch(operation.action) {
                case 'create':
                    this.onAdd(store, operation);
                    break;
                case 'update':
                    this.onUpdate(store, operation, Ext.data.Record.COMMIT);
                    break;
                case 'destroy':
                    this.onRemove(store, operation);
                    break;
            }
        }
    },

    // private
    onEventEditorAdd: function(form, rec) {
        this.newRecord = rec;

        if (this.store.indexOf(rec) === -1) {
            this.store.add(rec);
        }
        this.save();
        this.fireEvent('eventadd', this, rec);
    },

    // private
    onEventEditorUpdate: function(form, rec) {
        this.save();
        this.fireEvent('eventupdate', this, rec);
    },

    // private
    onEventEditorDelete: function(form, rec) {
        rec._deleting = true;
        this.deleteEvent(rec);
    },

    // private
    onEventEditorCancel: function(form, rec) {
        this.fireEvent('eventcancel', this, rec);
    },

    // private -- called from subclasses
    onDayClick: function(dt, ad, el) {
        if (this.readOnly === true) {
            return;
        }
        if (this.fireEvent('dayclick', this, Ext.Date.clone(dt), ad, el) !== false) {
            var M = Extensible.calendar.data.EventMappings,
                data = {};

            data[M.StartDate.name] = dt;
            data[M.IsAllDay.name] = ad;

            this.showEventEditor(data, el);
        }
    },

    // private
    showEventMenu: function(el, xy) {
        var me = this;

        if (!me.eventMenu) {
            me.eventMenu = Ext.create('Extensible.calendar.menu.Event', {
                listeners: {
                    'editdetails': Ext.bind(me.onEditDetails, me),
                    'eventdelete': Ext.bind(me.onDeleteEvent, me),
                    'eventmove'  : Ext.bind(me.onMoveEvent, me),
                    'eventcopy'  : Ext.bind(me.onCopyEvent, me)
                }
            });
        }

        me.eventMenu.showForEvent(me.getEventRecordFromEl(el), el, xy);
        me.menuActive = true;
    },

    // private
    onCopyEvent: function(menu, rec, newStartDate) {
        this.menuActive = false;
        this.shiftEvent(rec, newStartDate, 'copy');
    },

    // private
    onMoveEvent: function(menu, rec, newStartDate) {
        this.menuActive = false;
        this.shiftEvent(rec, newStartDate, 'move');
    },

    /**
     * Create a copy of the event with a new start date, preserving the original event duration.
     * @param {Object} rec The original event {@link Extensible.calendar.data.EventModel record}
     * @param {Object} newStartDate The new start date. The end date of the created event copy will be adjusted
     * automatically to preserve the original duration.
     */
    copyEvent: function(rec, newStartDate) {
        this.shiftEvent(rec, newStartDate, 'copy');
    },

    /**
     * Move the event to a new start date, preserving the original event duration.
     * @param {Object} rec The event {@link Extensible.calendar.data.EventModel record}
     * @param {Object} newStartDate The new start date
     */
    moveEvent: function(rec, newStartDate) {
        this.shiftEvent(rec, newStartDate, 'move');
    },

    // private
    shiftEvent: function(rec, newStartDate, moveOrCopy) {
        var me = this,
            newRec;

        if (moveOrCopy === 'move') {
            if (Extensible.Date.compare(rec.getStartDate(), newStartDate) === 0) {
                // No changes, so we aren't actually moving. Copying to the same date is OK.
                return;
            }
            newRec = rec;
        }
        else {
            newRec = rec.clone();
        }

        if (me.fireEvent('beforeevent' + moveOrCopy, me, newRec, Ext.Date.clone(newStartDate)) !== false) {
            if (newRec.isRecurring()) {
                //if (me.recurrenceOptions.editSingleOnDrag) {
                    me.onRecurrenceEditModeSelected('single', newRec, newStartDate, moveOrCopy);
                //}
                // else {
                    // Extensible.form.recurrence.RangeEditWindow.prompt({
                        // callback: Ext.bind(me.onRecurrenceEditModeSelected, me, [newRec, newStartDate, moveOrCopy], true),
                        // editModes: ['single', 'future'],
                        // scope: me
                    // });
                // }
            }
            else {
                me.doShiftEvent(newRec, newStartDate, moveOrCopy);
            }
        }
    },

    // private
    onRecurrenceEditModeSelected: function(editMode, rec, newStartDate, moveOrCopy) {
        var EventMappings = Extensible.calendar.data.EventMappings;

        if (editMode) {
            if (moveOrCopy === 'copy') {
                rec.clearRecurrence();
            }
            rec.data[EventMappings.REditMode.name] = editMode;
            rec.data[EventMappings.RInstanceStartDate.name] = rec.getStartDate();
            this.doShiftEvent(rec, newStartDate, moveOrCopy);
        }
        // else user canceled
    },

    // private
    doShiftEvent: function(rec, newStartDate, moveOrCopy) {
        var EventMappings = Extensible.calendar.data.EventMappings,
            diff = newStartDate.getTime() - rec.getStartDate().getTime(),
            updateData = {};

        updateData[EventMappings.StartDate.name] = newStartDate;
        updateData[EventMappings.EndDate.name] = Extensible.Date.add(rec.getEndDate(), {millis: diff});

        rec.set(updateData);

        if (rec.phantom) {
            this.store.add(rec);
        }

        this.save();
        this.fireEvent('event' + moveOrCopy, this, rec);
    },

    // private
    onEditDetails: function(menu, rec, el) {
        this.fireEvent('editdetails', this, rec, el);
        this.menuActive = false;
    },

    // private
    // onRecurrenceMoveModeSelected: function(editMode, rec, newStartDate) {
        // if (editMode) {
            // rec.data[Extensible.calendar.data.EventMappings.REditMode.name] = editMode;
            // rec.data[Extensible.calendar.data.EventMappings.RInstanceStartDate.name] = rec.getStartDate();
            // this.doShiftEvent(rec, newStartDate, 'move');
        // }
        // // else user canceled
    // },

    // private
    onDeleteEvent: function(menu, rec, el) {
        rec._deleting = true;
        this.deleteEvent(rec, el);
        this.menuActive = false;
    },

    /**
     * Delete the specified event.
     * @param {Object} rec The event {@link Extensible.calendar.data.EventModel record}
     */
    deleteEvent: function(rec, /* private */el) {
        var me = this;

        if (me.fireEvent('beforeeventdelete', me, rec, el) !== false) {
            if (rec.isRecurring()) {
                Extensible.form.recurrence.RangeEditWindow.prompt({
                    callback: Ext.bind(me.onRecurrenceDeleteModeSelected, me, [rec, el], true),
                    scope: me
                });
            }
            else {
                me.doDeleteEvent(rec, el);
            }
        }
    },

    // private
    onRecurrenceDeleteModeSelected: function(editMode, rec, el) {
        if (editMode) {
            rec.data[Extensible.calendar.data.EventMappings.REditMode.name] = editMode;
            rec.data[Extensible.calendar.data.EventMappings.RInstanceStartDate.name] = rec.getStartDate();
            this.doDeleteEvent(rec, el);
        }
        // else user canceled
    },

    // private
    doDeleteEvent: function(rec, /* private */el) {
        this.store.remove(rec);
        this.save();
        this.fireEvent('eventdelete', this, rec, el);
    },

    // private
    onContextMenu: function(e, t) {
        var el = e.getTarget(this.eventSelector, 5, true),
            match = false;

        if (el) {
            this.dismissEventEditor().showEventMenu(el, e.getXY());
            match = true;
        }

        if (match || this.suppressBrowserContextMenu === true) {
            e.preventDefault();
        }
    },

    /*
     * Shared click handling.  Each specific view also provides view-specific
     * click handling that calls this first.  This method returns true if it
     * can handle the click (and so the subclass should ignore it) else false.
     */
    onClick: function(e, t) {
        var me = this,
            el = e.getTarget(me.eventSelector, 5);

        if (me.dropZone) {
            me.dropZone.clearShims();
        }
        if (me.menuActive === true) {
            // ignore the first click if a context menu is active (let it close)
            me.menuActive = false;
            return true;
        }
        if (el) {
            var id = me.getEventIdFromEl(el),
                rec = me.getEventRecord(id);
            
            if (rec && me.fireEvent('eventclick', me, rec, el) !== false) {
                if (me.readOnly !== true) {
                    me.showEventEditor(rec, el);
                }
            }
            return true;
        }
    },

    // private
    onMouseOver: function(e, t) {
        if (this.trackMouseOver !== false && (this.dragZone === undefined || !this.dragZone.dragging)) {
            if (!this.handleEventMouseEvent(e, t, 'over')) {
                this.handleDayMouseEvent(e, t, 'over');
            }
        }
    },

    // private
    onMouseOut: function(e, t) {
        if (this.trackMouseOver !== false && (this.dragZone === undefined || !this.dragZone.dragging)) {
            if (!this.handleEventMouseEvent(e, t, 'out')) {
                this.handleDayMouseEvent(e, t, 'out');
            }
        }
    },

    // private
    handleEventMouseEvent: function(e, t, type) {
        var el = e.getTarget(this.eventSelector, 5, true);
        
        if (el) {
            var rel = Ext.get(e.getRelatedTarget());
            
            if (el === rel || el.contains(rel)) {
                return true;
            }

            var evtId = this.getEventIdFromEl(el);

            if (this.eventOverClass !== '') {
                var els = this.getEventEls(evtId);
                els[type === 'over' ? 'addCls' : 'removeCls'](this.eventOverClass);
            }
            
            this.fireEvent('event' + type, this, this.getEventRecord(evtId), el);
            
            return true;
        }
        return false;
    },

    // private
    getDateFromId: function(id, delim) {
        var parts = id.split(delim);
        return parts[parts.length-1];
    },

    // private
    handleDayMouseEvent: function(e, t, type) {
        t = e.getTarget('td', 3);
        
        if (t) {
            if (t.id && t.id.indexOf(this.dayElIdDelimiter) > -1) {
                var dt = this.getDateFromId(t.id, this.dayElIdDelimiter),
                    rel = Ext.get(e.getRelatedTarget()),
                    relTD, relDate;

                if (rel) {
                    relTD = rel.is('td') ? rel : rel.up('td', 3);
                    relDate = relTD && relTD.id ? this.getDateFromId(relTD.id, this.dayElIdDelimiter) : '';
                }
                if (!rel || dt !== relDate) {
                    var el = this.getDayEl(dt);
                    
                    if (el && this.dayOverClass !== '') {
                        el[type === 'over' ? 'addCls' : 'removeCls'](this.dayOverClass);
                    }
                    this.fireEvent('day' + type, this, Ext.Date.parseDate(dt, "Ymd"), el);
                }
            }
        }
    },

    // private, MUST be implemented by subclasses
    renderItems: function() {
        throw 'This method must be implemented by a subclass';
    },

    /**
     * Returns true only if this is the active view inside of an owning
     * {@link Extensible.calendar.CalendarPanel CalendarPanel}. If it is not active, or
     * not hosted inside a CalendarPanel, returns false.
     * @return {Boolean} True if this is the active CalendarPanel view, else false
     * @since 2.0.0
     */
    isActiveView: function() {
        var calendarPanel = this.ownerCalendarPanel;
        return (calendarPanel && calendarPanel.getActiveView().id === this.id);
    },

    // private
    destroy: function() {
        this.callParent(arguments);

        if (this.el) {
            this.el.un('contextmenu', this.onContextMenu, this);
        }
        Ext.destroy(
            this.editWin,
            this.eventMenu,
            this.dragZone,
            this.dropZone
        );
    }
});
/*
 * This is the view used internally by the panel that displays overflow events in the
 * month view. Anytime a day cell cannot display all of its events, it automatically displays
 * a link at the bottom to view all events for that day. When clicked, a panel pops up that
 * uses this view to display the events for that day.
 */
Ext.define('Extensible.calendar.view.MonthDayDetail', {
    extend: 'Ext.Component',
    alias: 'widget.extensible.monthdaydetailview',
    
    requires: [
        'Ext.XTemplate',
        'Extensible.calendar.view.AbstractCalendar'
    ],
    
    initComponent : function(){
        this.callParent(arguments);
		
        this.addEvents({
            eventsrendered: true
		});
    },
	
    afterRender : function(){
        this.tpl = this.getTemplate();
		
        this.callParent(arguments);
		
        this.el.on({
            'click': this.view.onClick,
			'mouseover': this.view.onMouseOver,
			'mouseout': this.view.onMouseOut,
            scope: this.view
        });
    },
	
    getTemplate : function(){
        if(!this.tpl){
	        this.tpl = Ext.create('Ext.XTemplate',
                '<div class="ext-cal-mdv x-unselectable">',
	                '<table class="ext-cal-mvd-tbl" cellpadding="0" cellspacing="0">',
						'<tbody>',
							'<tpl for=".">',
		                        '<tr><td class="ext-cal-ev">{markup}</td></tr>',
							'</tpl>',
	                    '</tbody>',
	                '</table>',
                '</div>'
	        );
        }
        this.tpl.compile();
        return this.tpl;
    },
	
	update : function(dt){
		this.date = dt;
		this.refresh();
	},
	
    refresh : function(){
		if(!this.rendered){
			return;
		}
        var eventTpl = this.view.getEventTemplate(),
		
			templateData = [];
			
			evts = this.store.queryBy(function(rec){
                var thisDt = Ext.Date.clearTime(this.date, true).getTime(),
                    M = Extensible.calendar.data.EventMappings,
                    recStart = Ext.Date.clearTime(rec.data[M.StartDate.name], true).getTime(),
	            	startsOnDate = (thisDt == recStart),
					spansDate = false,
                    calId = rec.data[M.CalendarId.name],
                    calRec = this.calendarStore ? this.calendarStore.getById(calId) : null;
                    
                if(calRec && calRec.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] === true){
                    // if the event is on a hidden calendar then no need to test the date boundaries
                    return false;
                }
				
				if(!startsOnDate){
                    var recEnd = Ext.Date.clearTime(rec.data[M.EndDate.name], true).getTime();
	            	spansDate = recStart < thisDt && recEnd >= thisDt;
				}
	            return startsOnDate || spansDate;
	        }, this);
		
        Extensible.calendar.view.AbstractCalendar.prototype.sortEventRecordsForDay.call(this, evts);
        
		evts.each(function(evt){
            var item = evt.data,
                M = Extensible.calendar.data.EventMappings;
                
			item._renderAsAllDay = item[M.IsAllDay.name] || Extensible.Date.diffDays(item[M.StartDate.name], item[M.EndDate.name]) > 0;
            item.spanLeft = Extensible.Date.diffDays(item[M.StartDate.name], this.date) > 0;
            item.spanRight = Extensible.Date.diffDays(this.date, item[M.EndDate.name]) > 0;
            item.spanCls = (item.spanLeft ? (item.spanRight ? 'ext-cal-ev-spanboth' : 
                'ext-cal-ev-spanleft') : (item.spanRight ? 'ext-cal-ev-spanright' : ''));

			templateData.push({markup: eventTpl.apply(this.getTemplateEventData(item))});
		}, this);
		
		this.tpl.overwrite(this.el, templateData);
		this.fireEvent('eventsrendered', this, this.date, evts.getCount());
    },
	
	getTemplateEventData : function(evt){
		var data = this.view.getTemplateEventData(evt);
		data._elId = 'dtl-'+data._elId;
		return data;
	}
});
/**
 * @class Extensible.calendar.view.Month
 * @extends Extensible.calendar.view.AbstractCalendar
 * <p>Displays a calendar view by month. This class does not usually need ot be used directly as you can
 * use a {@link Extensible.calendar.CalendarPanel CalendarPanel} to manage multiple calendar views at once including
 * the month view.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.Month', {
    extend: 'Extensible.calendar.view.AbstractCalendar',
    alias: 'widget.extensible.monthview',
    
    requires: [
        'Ext.XTemplate',
        'Extensible.calendar.template.Month',
        'Extensible.calendar.util.WeekEventRenderer',
        'Extensible.calendar.view.MonthDayDetail'
    ],
    
    /**
     * @cfg {String} moreText
     * <p><b>Deprecated.</b> Please override {@link #getMoreText} instead.</p>
     * <p>The text to display in a day box when there are more events than can be displayed and a link is provided to
     * show a popup window with all events for that day (defaults to '+{0} more...', where {0} will be 
     * replaced by the number of additional events that are not currently displayed for the day).</p>
     * @deprecated
     */
    moreText: '+{0} more...',
    /**
     * @cfg {String} detailsTitleDateFormat
     * The date format for the title of the details panel that shows when there are hidden events and the "more" link 
     * is clicked (defaults to 'F j').
     */
    detailsTitleDateFormat: 'F j',
    /**
     * @cfg {Boolean} showTime
     * True to display the current time in today's box in the calendar, false to not display it (defaults to true)
     */
    showTime: true,
    /**
     * @cfg {Boolean} showTodayText
     * True to display the {@link #todayText} string in today's box in the calendar, false to not display it (defaults to true)
     */
    showTodayText: true,
    /**
     * @cfg {Boolean} showHeader
     * True to display a header beneath the navigation bar containing the week names above each week's column, false not to 
     * show it and instead display the week names in the first row of days in the calendar (defaults to false).
     */
    showHeader: false,
    /**
     * @cfg {Boolean} showWeekLinks
     * True to display an extra column before the first day in the calendar that links to the {@link Extensible.calendar.view.Week view}
     * for each individual week, false to not show it (defaults to false). If true, the week links can also contain the week 
     * number depending on the value of {@link #showWeekNumbers}.
     */
    showWeekLinks: false,
    /**
     * @cfg {Boolean} showWeekNumbers
     * True to show the week number for each week in the calendar in the week link column, false to show nothing (defaults to false).
     * Note that if {@link #showWeekLinks} is false this config will have no affect even if true.
     */
    showWeekNumbers: false,
    /**
     * @cfg {String} weekLinkOverClass
     * The CSS class name applied when the mouse moves over a week link element (only applies when {@link #showWeekLinks} is true,
     * defaults to 'ext-week-link-over').
     */
    weekLinkOverClass: 'ext-week-link-over',
    /**
     * @cfg {Number} morePanelMinWidth
     * When there are more events in a given day than can be displayed in the calendar view, the extra events
     * are hidden and a "{@link #getMoreText more events}" link is displayed. When clicked, the link pops up a
     * detail panel that displays all events for that day. By default the panel will be the same width as the day
     * box, but this config allows you to set the minimum width of the panel in the case where the width
     * of the day box is too narrow for the events to be easily readable (defaults to 220 pixels).
     */
    morePanelMinWidth: 220,
    
    //private properties -- do not override:
    daySelector: '.ext-cal-day',
    moreSelector : '.ext-cal-ev-more',
    weekLinkSelector : '.ext-cal-week-link',
    weekCount: -1, // defaults to auto by month
    dayCount: 7,
	moreElIdDelimiter: '-more-',
    weekLinkIdDelimiter: 'ext-cal-week-',
    
    // private
    initComponent : function(){
        this.callParent(arguments);
        
        this.addEvents({
            /**
             * @event dayclick
             * Fires after the user clicks within the view container and not on an event element. This is a cancelable event, so 
             * returning false from a handler will cancel the click without displaying the event editor view. This could be useful 
             * for validating that a user can only create events on certain days.
             * @param {Extensible.calendar.view.Month} this
             * @param {Date} dt The date/time that was clicked on
             * @param {Boolean} allday True if the day clicked on represents an all-day box, else false. Clicks within the 
             * MonthView always return true for this param.
             * @param {Ext.Element} el The Element that was clicked on
             */
            dayclick: true,
            /**
             * @event weekclick
             * Fires after the user clicks within a week link (when {@link #showWeekLinks is true)
             * @param {Extensible.calendar.view.Month} this
             * @param {Date} dt The start date of the week that was clicked on
             */
            weekclick: true,
            // inherited docs
            dayover: true,
            // inherited docs
            dayout: true
        });
    },
	
    // private
	initDD : function(){
		var cfg = {
			view: this,
			createText: this.ddCreateEventText,
			copyText: this.ddCopyEventText,
			moveText: this.ddMoveEventText,
            ddGroup : this.ddGroup || this.id+'-MonthViewDD'
		};
        
        this.dragZone = Ext.create('Extensible.calendar.dd.DragZone', this.el, cfg);
        this.dropZone = Ext.create('Extensible.calendar.dd.DropZone', this.el, cfg);
	},
    
    // private
    onDestroy : function(){
        Ext.destroy(this.ddSelector);
		Ext.destroy(this.dragZone);
		Ext.destroy(this.dropZone);
        
        this.callParent(arguments);
    },
    
    // private
    afterRender : function(){
        if(!this.tpl){
            this.tpl = Ext.create('Extensible.calendar.template.Month', {
                id: this.id,
                showTodayText: this.showTodayText,
                todayText: this.todayText,
                showTime: this.showTime,
                showHeader: this.showHeader,
                showWeekLinks: this.showWeekLinks,
                showWeekNumbers: this.showWeekNumbers
            });
            this.tpl.compile();
        }
        
        this.addCls('ext-cal-monthview ext-cal-ct');
        
        this.callParent(arguments);
    },
	
    // private
	onResize : function(){
		if (this.monitorResize) {
            this.maxEventsPerDay = this.getMaxEventsPerDay();
			this.refresh(false);
        }
	},
    
    // private
    forceSize: function(){
        // Compensate for the week link gutter width if visible
        if(this.showWeekLinks && this.el){
            var hd = this.el.down('.ext-cal-hd-days-tbl'),
                bgTbl = this.el.select('.ext-cal-bg-tbl'),
                evTbl = this.el.select('.ext-cal-evt-tbl'),
                wkLinkW = this.el.down('.ext-cal-week-link').getWidth(),
                w = this.el.getWidth()-wkLinkW;
            
            hd.setWidth(w);
            bgTbl.setWidth(w);
            evTbl.setWidth(w);
        }
        this.callParent(arguments);
    },
    
    //private
    initClock : function(){
        if(Ext.fly(this.id+'-clock') !== null){
            this.prevClockDay = new Date().getDay();
            if(this.clockTask){
                Ext.TaskManager.stop(this.clockTask);
            }
            this.clockTask = Ext.TaskManager.start({
                run: function(){ 
                    var el = Ext.fly(this.id+'-clock'),
                        t = new Date();
                        
                    if(t.getDay() == this.prevClockDay){
                        if(el){
                            el.update(Ext.Date.format(t, Extensible.Date.use24HourTime ? 'G:i' : 'g:ia'));
                        }
                    }
                    else{
                        this.prevClockDay = t.getDay();
                        this.moveTo(t);
                    }
                },
                scope: this,
                interval: 1000
            });
        }
    },
    
    /**
     * <p>Returns the text to display in a day box when there are more events than can be displayed and a link is 
     * provided to show a popup window with all events for that day (defaults to '+{0} more...', where {0} will be 
     * replaced by the number of additional events that are not currently displayed for the day).</p>
     * @param {Integer} numEvents The number of events currently hidden from view
     * @return {String} The text to display for the "more" link 
     */
    getMoreText: function(numEvents){
        return this.moreText;
    },

    // inherited docs
    getEventBodyMarkup : function(){
        if(!this.eventBodyMarkup){
            this.eventBodyMarkup = ['{Title}',
	            '<tpl if="_isReminder">',
	                '<i class="ext-cal-ic ext-cal-ic-rem">&#160;</i>',
	            '</tpl>',
	            '<tpl if="_isRecurring">',
	                '<i class="ext-cal-ic ext-cal-ic-rcr">&#160;</i>',
	            '</tpl>',
	            '<tpl if="spanLeft">',
	                '<i class="ext-cal-spl">&#160;</i>',
	            '</tpl>',
	            '<tpl if="spanRight">',
	                '<i class="ext-cal-spr">&#160;</i>',
	            '</tpl>'
	        ].join('');
        }
        return this.eventBodyMarkup;
    },
    
    // inherited docs
    getEventTemplate : function(){
        if(!this.eventTpl){
	        var tpl, body = this.getEventBodyMarkup();
            
	        tpl = !(Ext.isIE || Ext.isOpera) ? 
				Ext.create('Ext.XTemplate',
                    '<div class="{_extraCls} {spanCls} ext-cal-evt ext-cal-evr">',
		                body,
		            '</div>'
		        ) 
				: Ext.create('Ext.XTemplate',
		            '<tpl if="_renderAsAllDay">',
                        '<div class="{_extraCls} {spanCls} ext-cal-evt ext-cal-evo">',
		                    '<div class="ext-cal-evm">',
		                        '<div class="ext-cal-evi">',
		            '</tpl>',
		            '<tpl if="!_renderAsAllDay">',
                        '<div class="{_extraCls} ext-cal-evt ext-cal-evr">',
		            '</tpl>',
		            body,
		            '<tpl if="_renderAsAllDay">',
		                        '</div>',
		                    '</div>',
		            '</tpl>',
		                '</div>'
	        	);
            tpl.compile();
            this.eventTpl = tpl;
        }
        return this.eventTpl;
    },
    
    // private
    getTemplateEventData : function(evt){
		var M = Extensible.calendar.data.EventMappings,
            extraClasses = [this.getEventSelectorCls(evt[M.EventId.name])],
            data = {},
            recurring = evt[M.RRule.name] != '',
            colorCls = 'x-cal-default',
		    title = evt[M.Title.name],
            fmt = Extensible.Date.use24HourTime ? 'G:i ' : 'g:ia ';
        
        if(this.calendarStore && evt[M.CalendarId.name]){
            var rec = this.calendarStore.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, evt[M.CalendarId.name]);
            if(rec){
                colorCls = 'x-cal-' + rec.data[Extensible.calendar.data.CalendarMappings.ColorId.name];
            }
        }
        colorCls += (evt._renderAsAllDay ? '-ad' : '');
        extraClasses.push(colorCls);
        
        if (evt._renderAsAllDay) {
            extraClasses.push('ext-evt-block');
        }
        
        if(this.getEventClass){
            var rec = this.getEventRecord(evt[M.EventId.name]),
                cls = this.getEventClass(rec, !!evt._renderAsAllDay, data, this.store);
            extraClasses.push(cls);
        }
        
		data._extraCls = extraClasses.join(' ');
        data._isRecurring = evt[M.RRule.name] && evt[M.RRule.name] != '';
        data._isReminder = evt[M.Reminder.name] && evt[M.Reminder.name] != '';
        data.Title = (evt[M.IsAllDay.name] ? '' : Ext.Date.format(evt[M.StartDate.name], fmt)) + 
                (!title || title.length == 0 ? this.defaultEventTitleText : title);
        
        return Ext.applyIf(data, evt);
    },
    
    // private
	refresh : function(reloadData){
        Extensible.log('refresh (MonthView)');
		if(this.detailPanel){
			this.detailPanel.hide();
		}
		this.callParent(arguments);
        
        if(this.showTime !== false){
            this.initClock();
        }
	},
    
    // private
    renderItems : function(){
        Extensible.calendar.util.WeekEventRenderer.render({
            eventGrid: this.allDayOnly ? this.allDayGrid : this.eventGrid,
            viewStart: this.viewStart,
            tpl: this.getEventTemplate(),
            maxEventsPerDay: this.maxEventsPerDay,
            viewId: this.id,
            templateDataFn: Ext.bind(this.getTemplateEventData, this),
            evtMaxCount: this.evtMaxCount,
            weekCount: this.weekCount,
            dayCount: this.dayCount,
            getMoreText: Ext.bind(this.getMoreText, this)
        });
        this.fireEvent('eventsrendered', this);
    },
	
    // private
	getDayEl : function(dt){
		return Ext.get(this.getDayId(dt));
	},
	
    // private
	getDayId : function(dt){
		if(Ext.isDate(dt)){
            dt = Ext.Date.format(dt, 'Ymd');
		}
		return this.id + this.dayElIdDelimiter + dt;
	},
	
    // private
	getWeekIndex : function(dt){
		var el = this.getDayEl(dt).up('.ext-cal-wk-ct');
		return parseInt(el.id.split('-wk-')[1]);
	},
	
    // private
	getDaySize : function(contentOnly){
        var box = this.el.getBox(),
            padding = this.getViewPadding(),
            w = (box.width - padding.width) / this.dayCount,
            h = (box.height - padding.height) / this.getWeekCount();
            
		if(contentOnly){
            // measure last row instead of first in case text wraps in first row
			var hd = this.el.select('.ext-cal-dtitle').last().parent('tr');
			h = hd ? h-hd.getHeight(true) : h;
		}
		return {height: h, width: w};
	},
    
    // private
    getEventHeight : function() {
        if (!this.eventHeight) {
            var evt = this.el.select('.ext-cal-evt').first();
            if(evt){
                this.eventHeight = evt.parent('td').getHeight();
            }
            else {
                return 16; // no events rendered, so try setting this.eventHeight again later
            }
        }
        return this.eventHeight;
    },
	
    // private
	getMaxEventsPerDay : function(){
		var dayHeight = this.getDaySize(true).height,
			eventHeight = this.getEventHeight(),
            max = Math.max(Math.floor((dayHeight - eventHeight) / eventHeight), 0);
		
		return max;
	},
	
    // private
    getViewPadding: function(sides) {
        var sides = sides || 'tlbr',
            top = sides.indexOf('t') > -1,
            left = sides.indexOf('l') > -1,
            right = sides.indexOf('r') > -1,
            height = this.showHeader && top ? this.el.select('.ext-cal-hd-days-tbl').first().getHeight() : 0,
            width = 0;
        
        if (this.isHeaderView) {
            if (left) {
                width = this.el.select('.ext-cal-gutter').first().getWidth();
            }
            if (right) {
                width += this.el.select('.ext-cal-gutter-rt').first().getWidth();
            }
        }
        else if (this.showWeekLinks && left) {
            width = this.el.select('.ext-cal-week-link').first().getWidth();
        }
        
        return {
            height: height,
            width: width
        }
    },
    
    // private
	getDayAt : function(x, y){
		var box = this.el.getBox(),
            padding = this.getViewPadding('tl'), // top/left only since we only want the xy offsets
			daySize = this.getDaySize(),
            dayL = Math.floor(((x - box.x - padding.width) / daySize.width)),
            dayT = Math.floor(((y - box.y - padding.height) / daySize.height)),
			days = (dayT * 7) + dayL,
            dt = Extensible.Date.add(this.viewStart, {days: days});
        
		return {
			date: dt,
			el: this.getDayEl(dt)
		}
	},
    
    // inherited docs
    moveNext : function(){
        return this.moveMonths(1, true);
    },
    
    // inherited docs
    movePrev : function(){
        return this.moveMonths(-1, true);
    },
    
    // private
	onInitDrag : function(){
        this.callParent(arguments);
        
		Ext.select(this.daySelector).removeCls(this.dayOverClass);
		if(this.detailPanel){
			this.detailPanel.hide();
		}
	},
	
    // private
	onMoreClick : function(dt){
		if(!this.detailPanel){
	        this.detailPanel = Ext.create('Ext.Panel', {
				id: this.id+'-details-panel',
				title: Ext.Date.format(dt, this.detailsTitleDateFormat),
				layout: 'fit',
				floating: true,
				renderTo: Ext.getBody(),
				hideMode: 'offsets',
				tools: [{
					type: 'close',
					handler: function(e, t, p){
						p.ownerCt.hide();
					}
				}],
				items: {
					xtype: 'extensible.monthdaydetailview',
					id: this.id+'-details-view',
					date: dt,
					view: this,
					store: this.store,
                    calendarStore: this.calendarStore,
					listeners: {
                        'eventsrendered': Ext.bind(this.onDetailViewUpdated, this)
					}
				}
			});
            
            if(this.enableContextMenus && this.readOnly !== true){
                this.detailPanel.body.on('contextmenu', this.onContextMenu, this);
            }
		}
		else{
			this.detailPanel.setTitle(Ext.Date.format(dt, this.detailsTitleDateFormat));
		}
		this.detailPanel.getComponent(this.id+'-details-view').update(dt);
	},
	
    // private
	onDetailViewUpdated : function(view, dt, numEvents){
		var p = this.detailPanel,
			dayEl = this.getDayEl(dt),
			box = dayEl.getBox(),
			innerTplHeight = p.el.down('.ext-cal-mdv').getHeight(),
			header = p.getDockedItems('header')[0],
			frameSize = p.frameSize || {top:0, bottom:0},
			frameHeight = frameSize.top + frameSize.bottom + header.getHeight(),
			bodyHeight = innerTplHeight + frameHeight + 5,
			documentBodyHeight = Ext.getBody().getHeight() - 20,
			calculatedHeight = Math.min(bodyHeight, documentBodyHeight);
		
		// Check for overflow first -- if overflow is needed the scrollbar
		// will affect the body width in some browsers
        if (calculatedHeight === documentBodyHeight) {
            p.body.addCls('ext-cal-overflow-y');
        }
        else {
            p.body.removeCls('ext-cal-overflow-y');
        }
        // Now set the new calculated panel dimensions
		p.setWidth(Math.max(box.width, this.morePanelMinWidth));
		p.setHeight(calculatedHeight);
		
		p.show();
		p.getPositionEl().alignTo(dayEl, 't-t?');
	},
    
    // private
    onHide : function(){
        this.callParent(arguments);
        
        if(this.detailPanel){
            this.detailPanel.hide();
        }
    },
	
    // private
    onClick : function(e, t){
        if(this.detailPanel){
            this.detailPanel.hide();
        }
        if(el = e.getTarget(this.moreSelector, 3)){
            var dt = el.id.split(this.moreElIdDelimiter)[1];
            this.onMoreClick(Ext.Date.parseDate(dt, 'Ymd'));
            return;
        }
        if(el = e.getTarget(this.weekLinkSelector, 3)){
            var dt = el.id.split(this.weekLinkIdDelimiter)[1];
            this.fireEvent('weekclick', this, Ext.Date.parseDate(dt, 'Ymd'));
            return;
        }
        if(Extensible.calendar.view.Month.superclass.onClick.apply(this, arguments)){
            // The superclass handled the click already so exit
            return;
        }
        if(el = e.getTarget('td', 3)){
            if(el.id && el.id.indexOf(this.dayElIdDelimiter) > -1){
                var parts = el.id.split(this.dayElIdDelimiter),
                    dt = parts[parts.length-1];
                    
                //this.fireEvent('dayclick', this, Ext.Date.parseDate(dt, 'Ymd'), false, Ext.get(this.getDayId(dt)));
                this.onDayClick(Ext.Date.parseDate(dt, 'Ymd'), false, Ext.get(this.getDayId(dt)));
                return;
            }
        }
    },
    
    // private
    handleDayMouseEvent : function(e, t, type){
        var el = e.getTarget(this.weekLinkSelector, 3, true);
        if(el){
            el[type == 'over' ? 'addCls' : 'removeCls'](this.weekLinkOverClass);
            return;
        }
        this.callParent(arguments);
    },
    
    // private
    destroy: function(){
        this.callParent(arguments);
        
        if(this.detailsPanel){
            this.detailPanel.body.un('contextmenu', this.onContextMenu, this);
        }
    }
});
/**
 * @class Extensible.calendar.view.DayHeader
 * @extends Extensible.calendar.view.Month
 * <p>This is the header area container within the day and week views where all-day events are displayed.
 * Normally you should not need to use this class directly -- instead you should use {@link Extensible.calendar.view.Day DayView}
 * which aggregates this class and the {@link Extensible.calendar.view.DayBody DayBodyView} into the single unified view
 * presented by {@link Extensible.calendar.CalendarPanel CalendarPanel}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.DayHeader', {
    extend: 'Extensible.calendar.view.Month',
    alias: 'widget.extensible.dayheaderview',
    
    requires: [
        'Extensible.calendar.template.DayHeader'
    ],
    
    // private configs
    weekCount: 1,
    dayCount: 1,
    allDayOnly: true,
    monitorResize: false,
    isHeaderView: true,
    
    // The event is declared in MonthView but we're just overriding the docs:
    /**
     * @event dayclick
     * Fires after the user clicks within the view container and not on an event element. This is a cancelable event, so 
     * returning false from a handler will cancel the click without displaying the event editor view. This could be useful 
     * for validating that a user can only create events on certain days.
     * @param {Extensible.calendar.view.DayHeader} this
     * @param {Date} dt The date/time that was clicked on
     * @param {Boolean} allday True if the day clicked on represents an all-day box, else false. Clicks within the 
     * DayHeaderView always return true for this param.
     * @param {Ext.Element} el The Element that was clicked on
     */
    
    // private
    afterRender : function(){
        if(!this.tpl){
            this.tpl = Ext.create('Extensible.calendar.template.DayHeader', {
                id: this.id,
                showTodayText: this.showTodayText,
                todayText: this.todayText,
                showTime: this.showTime
            });
        }
        this.tpl.compile();
        this.addCls('ext-cal-day-header');
        
        this.callParent(arguments);
    },
    
    // private
    forceSize: Ext.emptyFn,
    
    // private
    refresh : function(reloadData){
        Extensible.log('refresh (DayHeaderView)');
        this.callParent(arguments);
        this.recalcHeaderBox();
    },
    
    // private
    recalcHeaderBox : function(){
        var tbl = this.el.down('.ext-cal-evt-tbl'),
            h = tbl.getHeight();
        
        this.el.setHeight(h+7);
        
        // These should be auto-height, but since that does not work reliably
        // across browser / doc type, we have to size them manually
        this.el.down('.ext-cal-hd-ad-inner').setHeight(h+5);
        this.el.down('.ext-cal-bg-tbl').setHeight(h+5);
    },
    
    // private
    moveNext : function() {
        return this.moveDays(this.dayCount, false);
    },

    // private
    movePrev : function() {
        return this.moveDays(-this.dayCount, false);
    },
    
    // private
    onClick : function(e, t){
        if(el = e.getTarget('td', 3)){
            if(el.id && el.id.indexOf(this.dayElIdDelimiter) > -1){
                var parts = el.id.split(this.dayElIdDelimiter),
                    dt = parts[parts.length-1];
                    
                this.onDayClick(Ext.Date.parseDate(dt, 'Ymd'), true, Ext.get(this.getDayId(dt, true)));
                return;
            }
        }
        this.callParent(arguments);
    },
    
    // inherited docs
    isActiveView: function() {
        var calendarPanel = this.ownerCalendarPanel;
        return (calendarPanel && calendarPanel.getActiveView().isDayView);
    }
});
/**
 * @class Extensible.calendar.view.DayBody
 * @extends Extensible.calendar.view.AbstractCalendar
 * <p>This is the scrolling container within the day and week views where non-all-day events are displayed.
 * Normally you should not need to use this class directly -- instead you should use {@link
 * Extensible.calendar.view.Day DayView} which aggregates this class and the {@link
 * Extensible.calendar.view.DayHeader DayHeaderView} into the single unified view
 * presented by {@link Extensible.calendar.CalendarPanel CalendarPanel}.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.DayBody', {
    extend: 'Extensible.calendar.view.AbstractCalendar',
    alias: 'widget.extensible.daybodyview',

    requires: [
        'Ext.XTemplate',
        'Extensible.calendar.template.DayBody',
        'Extensible.calendar.data.EventMappings',
        'Extensible.calendar.dd.DayDragZone',
        'Extensible.calendar.dd.DayDropZone'
    ],

    //private
    dayColumnElIdDelimiter: '-day-col-',
    hourIncrement: 60,

    //private
    initComponent : function(){
        this.callParent(arguments);

        if(this.readOnly === true){
            this.enableEventResize = false;
        }
        this.incrementsPerHour = this.hourIncrement / this.ddIncrement;
        this.minEventHeight = this.minEventDisplayMinutes / (this.hourIncrement / this.hourHeight);

        this.addEvents({
            /**
             * @event beforeeventresize
             * Fires after the user drags the resize handle of an event to resize it, but before the resize
             * operation is carried out. This is a cancelable event, so returning false from a handler will
             * cancel the resize operation.
             * @param {Extensible.calendar.view.DayBody} this
             * @param {Extensible.calendar.data.EventModel} rec The original {@link
             * Extensible.calendar.data.EventModel record} for the event that was resized
             * @param {Object} data An object containing the new start and end dates that will be set into the
             * event record if the event is not canceled. Format of the object is: {StartDate: [date], EndDate: [date]}
             */
            beforeeventresize: true,
            /**
             * @event eventresize
             * Fires after the user has drag-dropped the resize handle of an event and the resize operation is
             * complete. If you need to cancel the resize operation you should handle the {@link #beforeeventresize}
             * event and return false from your handler function.
             * @param {Extensible.calendar.view.DayBody} this
             * @param {Extensible.calendar.data.EventModel} rec The {@link Extensible.calendar.data.EventModel
             * record} for the event that was resized containing the updated start and end dates
             */
            eventresize: true,
            /**
             * @event dayclick
             * Fires after the user clicks within the view container and not on an event element. This is a
             * cancelable event, so returning false from a handler will cancel the click without displaying the event
             * editor view. This could be useful for validating that a user can only create events on certain days.
             * @param {Extensible.calendar.view.DayBody} this
             * @param {Date} dt The date/time that was clicked on
             * @param {Boolean} allday True if the day clicked on represents an all-day box, else false. Clicks
             * within the DayBodyView always return false for this param.
             * @param {Ext.Element} el The Element that was clicked on
             */
            dayclick: true
        });
    },

    //private
    initDD : function(){
        var cfg = {
            view: this,
            createText: this.ddCreateEventText,
            copyText: this.ddCopyEventText,
            moveText: this.ddMoveEventText,
            resizeText: this.ddResizeEventText,
            ddIncrement: this.ddIncrement,
            ddGroup: this.ddGroup || this.id+'-DayViewDD'
        };

        this.el.ddScrollConfig = {
            // scrolling is buggy in IE/Opera for some reason.  A larger vthresh
            // makes it at least functional if not perfect
            vthresh: Ext.isIE || Ext.isOpera ? 100 : 40,
            hthresh: -1,
            frequency: 50,
            increment: 100,
            ddGroup: this.ddGroup || this.id+'-DayViewDD'
        };

        this.dragZone = Ext.create('Extensible.calendar.dd.DayDragZone', this.el, Ext.apply({
            // disabled for now because of bugs in Ext 4 ScrollManager:
            //containerScroll: true
        }, cfg));

        this.dropZone = Ext.create('Extensible.calendar.dd.DayDropZone', this.el, cfg);
    },

    //private
    refresh : function(reloadData){
        Extensible.log('refresh (DayBodyView)');
        var top = this.el.getScroll().top;

        this.callParent(arguments);

        // skip this if the initial render scroll position has not yet been set.
        // necessary since IE/Opera must be deferred, so the first refresh will
        // override the initial position by default and always set it to 0.
        if(this.scrollReady){
            this.scrollTo(top);
        }
    },

    /**
     * Scrolls the container to the specified vertical position. If the view is large enough that
     * there is no scroll overflow then this method will have no affect.
     * @param {Number} y The new vertical scroll position in pixels
     * @param {Boolean} defer (optional) <p>True to slightly defer the call, false to execute immediately.</p>
     *
     * <p>This method will automatically defer itself for IE and Opera (even if you pass false) otherwise
     * the scroll position will not update in those browsers. You can optionally pass true, however, to
     * force the defer in all browsers, or use your own custom conditions to determine whether this is needed.</p>
     *
     * <p>Note that this method should not generally need to be called directly as scroll position is
     * managed internally.</p>
     */
    scrollTo : function(y, defer){
        defer = defer || (Ext.isIE || Ext.isOpera);
        if(defer){
            Ext.defer(function(){
                this.el.scrollTo('top', y);
                this.scrollReady = true;
            }, 10, this);
        }
        else{
            this.el.scrollTo('top', y);
            this.scrollReady = true;
        }
    },

    // private
    afterRender : function(){
        if(!this.tpl){
            this.tpl = Ext.create('Extensible.calendar.template.DayBody', {
                id: this.id,
                dayCount: this.dayCount,
                showTodayText: this.showTodayText,
                todayText: this.todayText,
                showTime: this.showTime,
                showHourSeparator: this.showHourSeparator,
                viewStartHour: this.viewStartHour,
                viewEndHour: this.viewEndHour,
                hourIncrement: this.hourIncrement,
                hourHeight: this.hourHeight
            });
        }
        this.tpl.compile();

        this.addCls('ext-cal-body-ct');

        this.callParent(arguments);

        // default scroll position to scrollStartHour (7am by default) or min view hour if later
        var startHour = Math.max(this.scrollStartHour, this.viewStartHour),
            scrollStart = Math.max(0, startHour - this.viewStartHour);

        if(scrollStart > 0){
            this.scrollTo(scrollStart * this.hourHeight);
        }
    },

    // private
    forceSize: Ext.emptyFn,

    // private -- called from DayViewDropZone
    onEventResize : function(rec, data){
        var me = this,
            EventMappings = Extensible.calendar.data.EventMappings,
            compareFn = Extensible.Date.compare;

        if (compareFn(rec.getStartDate(), data[EventMappings.StartDate.name]) === 0 &&
            compareFn(rec.getEndDate(), data[EventMappings.EndDate.name]) === 0) {
            // no changes
            return;
        }

        if (me.fireEvent('beforeeventresize', me, rec, data) !== false) {
            if (rec.isRecurring()) {
                if (me.recurrenceOptions.editSingleOnResize) {
                    me.onRecurrenceResizeModeSelected('single', rec, data);
                }
                else {
                    Extensible.form.recurrence.RangeEditWindow.prompt({
                        callback: Ext.bind(me.onRecurrenceResizeModeSelected, me, [rec, data], true),
                        scope: me
                    });
                }
            }
            else {
                me.doEventResize(rec, data);
            }
        }
    },

    // private
    onRecurrenceResizeModeSelected: function(editMode, rec, data) {
        var EventMappings = Extensible.calendar.data.EventMappings;

        if (editMode) {
            rec.data[EventMappings.REditMode.name] = editMode;
            rec.data[EventMappings.RInstanceStartDate.name] = rec.getStartDate();
            this.doEventResize(rec, data);
        }
        // else user canceled
    },

    doEventResize : function(rec, data){
        var EventMappings = Extensible.calendar.data.EventMappings,
            startDateName = EventMappings.StartDate.name,
            endDateName = EventMappings.EndDate.name,
            updateData = {};

        updateData[startDateName] = data[startDateName];
        updateData[endDateName] = data[endDateName];
        
        if (EventMappings.Duration) {
            updateData[EventMappings.Duration.name] = Extensible.Date.diff(data[startDateName], data[endDateName],
                Extensible.calendar.data.EventModel.resolution);
        }

        rec.set(updateData);

        this.save();

        this.fireEvent('eventupdate', this, rec);
        this.fireEvent('eventresize', this, rec);
    },

    // inherited docs
    getEventBodyMarkup : function(){
        if(!this.eventBodyMarkup){
            this.eventBodyMarkup = ['{Title}',
                '<tpl if="_isReminder">',
                    '<i class="ext-cal-ic ext-cal-ic-rem">&#160;</i>',
                '</tpl>',
                '<tpl if="_isRecurring">',
                    '<i class="ext-cal-ic ext-cal-ic-rcr">&#160;</i>',
                '</tpl>'
//                '<tpl if="spanLeft">',
//                    '<i class="ext-cal-spl">&#160;</i>',
//                '</tpl>',
//                '<tpl if="spanRight">',
//                    '<i class="ext-cal-spr">&#160;</i>',
//                '</tpl>'
            ].join('');
        }
        return this.eventBodyMarkup;
    },

    // inherited docs
    getEventTemplate : function(){
        if(!this.eventTpl){
            this.eventTpl = !(Ext.isIE || Ext.isOpera) ?
                Ext.create('Ext.XTemplate',
                    '<div id="{_elId}" class="{_extraCls} ext-cal-evt ext-cal-evr" ',
                            'style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">',
                        '<div class="ext-evt-bd">', this.getEventBodyMarkup(), '</div>',
                        this.enableEventResize ?
                            '<div class="ext-evt-rsz"><div class="ext-evt-rsz-h">&#160;</div></div>' : '',
                    '</div>'
                )
                : Ext.create('Ext.XTemplate',
                    '<div id="{_elId}" class="ext-cal-evt {_extraCls}" ',
                            'style="left: {_left}%; width: {_width}%; top: {_top}px;">',
                        '<div class="ext-cal-evb">&#160;</div>',
                        '<dl style="height: {_height}px;" class="ext-cal-evdm">',
                            '<dd class="ext-evt-bd">',
                                this.getEventBodyMarkup(),
                            '</dd>',
                            this.enableEventResize ?
                                '<div class="ext-evt-rsz"><div class="ext-evt-rsz-h">&#160;</div></div>' : '',
                        '</dl>',
                        '<div class="ext-cal-evb">&#160;</div>',
                    '</div>'
                );
            this.eventTpl.compile();
        }
        return this.eventTpl;
    },

    /**
     * <p>Returns the XTemplate that is bound to the calendar's event store (it expects records of type
     * {@link Extensible.calendar.data.EventModel}) to populate the calendar views with <strong>all-day</strong> events.
     * Internally this method by default generates different markup for browsers that support CSS border radius
     * and those that don't. This method can be overridden as needed to customize the markup generated.</p>
     * <p>Note that this method calls {@link #getEventBodyMarkup} to retrieve the body markup for events separately
     * from the surrounding container markup.  This provdes the flexibility to customize what's in the body without
     * having to override the entire XTemplate. If you do override this method, you should make sure that your
     * overridden version also does the same.</p>
     * @return {Ext.XTemplate} The event XTemplate
     */
    getEventAllDayTemplate : function(){
        if(!this.eventAllDayTpl){
            var tpl, body = this.getEventBodyMarkup();

            tpl = !(Ext.isIE || Ext.isOpera) ?
                Ext.create('Ext.XTemplate',
                    '<div class="{_extraCls} {spanCls} ext-cal-evt ext-cal-evr" ',
                            'style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">',
                        body,
                    '</div>'
                )
                : Ext.create('Ext.XTemplate',
                    '<div class="ext-cal-evt" ',
                            'style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">',
                        '<div class="{_extraCls} {spanCls} ext-cal-evo">',
                            '<div class="ext-cal-evm">',
                                '<div class="ext-cal-evi">',
                                    body,
                                '</div>',
                            '</div>',
                        '</div>',
                    '</div>'
                );
            tpl.compile();
            this.eventAllDayTpl = tpl;
        }
        return this.eventAllDayTpl;
    },

    // private
    getTemplateEventData : function(evt){
        var M = Extensible.calendar.data.EventMappings,
            extraClasses = [this.getEventSelectorCls(evt[M.EventId.name])],
            data = {},
            colorCls = 'x-cal-default',
            title = evt[M.Title.name],
            fmt = Extensible.Date.use24HourTime ? 'G:i ' : 'g:ia ',
            recurring = evt[M.RRule.name] !== '',
            rec;

        this.getTemplateEventBox(evt);

        if(this.calendarStore && evt[M.CalendarId.name]){
            rec = this.calendarStore.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name,
                evt[M.CalendarId.name]);

            if (rec) {
                colorCls = 'x-cal-' + rec.data[Extensible.calendar.data.CalendarMappings.ColorId.name];
            }
        }
        colorCls += (evt._renderAsAllDay ? '-ad' : '') + (Ext.isIE || Ext.isOpera ? '-x' : '');
        extraClasses.push(colorCls);

        extraClasses.push('ext-evt-block');

        if(this.getEventClass){
            rec = this.getEventRecord(evt[M.EventId.name]);
            var cls = this.getEventClass(rec, !!evt._renderAsAllDay, data, this.store);
            extraClasses.push(cls);
        }

        data._extraCls = extraClasses.join(' ');
        data._isRecurring = evt[M.RRule.name] && evt[M.RRule.name] !== '';
        data._isReminder = evt[M.Reminder.name] && evt[M.Reminder.name] !== '';
        data.Title = (evt[M.IsAllDay.name] ? '' : Ext.Date.format(evt[M.StartDate.name], fmt)) +
                (!title || title.length === 0 ? this.defaultEventTitleText : title);

        return Ext.applyIf(data, evt);
    },

    // private
    getEventPositionOffsets: function(){
        return {
            top: 0,
            height: -1
        };
    },

    // private
    getTemplateEventBox : function(evt){
        var heightFactor = this.hourHeight / this.hourIncrement,
            start = evt[Extensible.calendar.data.EventMappings.StartDate.name],
            end = evt[Extensible.calendar.data.EventMappings.EndDate.name],
            startOffset = Math.max(start.getHours() - this.viewStartHour, 0),
            endOffset = Math.min(end.getHours() - this.viewStartHour, this.viewEndHour - this.viewStartHour),
            startMins = startOffset * this.hourIncrement,
            endMins = endOffset * this.hourIncrement,
            viewEndDt = Extensible.Date.add(Ext.Date.clone(end), {hours: this.viewEndHour, clearTime: true}),
            evtOffsets = this.getEventPositionOffsets();

        if(start.getHours() >= this.viewStartHour){
            // only add the minutes if the start is visible, otherwise it offsets the event incorrectly
            startMins += start.getMinutes();
        }
        if(end <= viewEndDt){
            // only add the minutes if the end is visible, otherwise it offsets the event incorrectly
            endMins += end.getMinutes();
        }

        evt._left = 0;
        evt._width = 100;
        evt._top = startMins * heightFactor + evtOffsets.top;
        evt._height = Math.max(((endMins - startMins) * heightFactor), this.minEventHeight) + evtOffsets.height;
    },

    // private
    renderItems: function(){
        var day = 0,
            evt,
            evts = [];
        
        for(; day < this.dayCount; day++){
            var ev = 0,
                emptyCells = 0,
                skipped = 0,
                d = this.eventGrid[0][day],
                ct = d ? d.length : 0;

            for(; ev < ct; ev++){
                evt = d[ev];
                if(!evt){
                    continue;
                }
                var item = evt.data || evt.event.data,
                    M = Extensible.calendar.data.EventMappings,
                    ad = item[M.IsAllDay.name] === true,
                    span = this.isEventSpanning(evt.event || evt),
                    renderAsAllDay = ad || span;

                if(renderAsAllDay){
                    // this event is already rendered in the header view
                    continue;
                }
                Ext.apply(item, {
                    cls: 'ext-cal-ev',
                    _positioned: true
                });
                evts.push({
                    data: this.getTemplateEventData(item),
                    date: Extensible.Date.add(this.viewStart, {days: day})
                });
            }
        }

        // overlapping event pre-processing loop
        var i = 0,
            j = 0,
            overlapCols = [],
            l = evts.length,
            prevDt,
            evt2,
            dt;
        
        for(; i<l; i++){
            evt = evts[i].data;
            evt2 = null;
            dt = evt[Extensible.calendar.data.EventMappings.StartDate.name].getDate();

            for (j = 0; j < l; j++) {
                if (i === j) {
                    continue;
                }
                evt2 = evts[j].data;
                if(this.isOverlapping(evt, evt2)){
                    evt._overlap = evt._overlap === undefined ? 1 : evt._overlap+1;
                    if(i<j){
                        if (evt._overcol === undefined) {
                            evt._overcol = 0;
                        }
                        evt2._overcol = evt._overcol+1;
                        overlapCols[dt] = overlapCols[dt] ? Math.max(overlapCols[dt], evt2._overcol) : evt2._overcol;
                    }
                }
            }
        }

        // rendering loop
        for (i = 0; i < l; i++) {
            evt = evts[i].data;
            dt = evt[Extensible.calendar.data.EventMappings.StartDate.name].getDate();

            if(evt._overlap !== undefined){
                var colWidth = 100 / (overlapCols[dt]+1),
                    evtWidth = 100 - (colWidth * evt._overlap);

                evt._width = colWidth;
                evt._left = colWidth * evt._overcol;
            }
            var markup = this.getEventTemplate().apply(evt),
                target = this.id + '-day-col-' + Ext.Date.format(evts[i].date, 'Ymd');

            Ext.core.DomHelper.append(target, markup);
        }

        this.fireEvent('eventsrendered', this);
    },

    // private
    getDayEl : function(dt){
        return Ext.get(this.getDayId(dt));
    },

    // private
    getDayId : function(dt){
        if(Ext.isDate(dt)){
            dt = Ext.Date.format(dt, 'Ymd');
        }
        return this.id + this.dayColumnElIdDelimiter + dt;
    },

    // private
    getDaySize : function(){
        var box = this.el.down('.ext-cal-day-col-inner').getBox();
        return {height: box.height, width: box.width};
    },

    // private
    getDayAt : function(x, y){
        var sel = '.ext-cal-body-ct',
            xoffset = this.el.down('.ext-cal-day-times').getWidth(),
            viewBox = this.el.getBox(),
            daySize = this.getDaySize(false),
            relX = x - viewBox.x - xoffset,
            dayIndex = Math.floor(relX / daySize.width), // clicked col index
            scroll = this.el.getScroll(),
            row = this.el.down('.ext-cal-bg-row'), // first avail row, just to calc size
            rowH = row.getHeight() / this.incrementsPerHour,
            relY = y - viewBox.y - rowH + scroll.top,
            rowIndex = Math.max(0, Math.ceil(relY / rowH)),
            mins = rowIndex * (this.hourIncrement / this.incrementsPerHour),
            dt = Extensible.Date.add(this.viewStart, {days: dayIndex, minutes: mins, hours: this.viewStartHour}),
            el = this.getDayEl(dt),
            timeX = x;

        if(el){
            timeX = el.getLeft();
        }

        return {
            date: dt,
            el: el,
            // this is the box for the specific time block in the day that was clicked on:
            timeBox: {
                x: timeX,
                y: (rowIndex * this.hourHeight / this.incrementsPerHour) + viewBox.y - scroll.top,
                width: daySize.width,
                height: rowH
            }
        };
    },

    // private
    onClick : function(e, t){
        if(this.dragPending || Extensible.calendar.view.DayBody.superclass.onClick.apply(this, arguments)){
            // The superclass handled the click already so exit
            return;
        }
        if(e.getTarget('.ext-cal-day-times', 3) !== null){
            // ignore clicks on the times-of-day gutter
            return;
        }
        var el = e.getTarget('td', 3);
        if(el){
            if(el.id && el.id.indexOf(this.dayElIdDelimiter) > -1){
                var dt = this.getDateFromId(el.id, this.dayElIdDelimiter);
                this.onDayClick(Ext.Date.parseDate(dt, 'Ymd'), true, Ext.get(this.getDayId(dt)));
                return;
            }
        }
        var day = this.getDayAt(e.getX(), e.getY());
        if(day && day.date){
            this.onDayClick(day.date, false, null);
        }
    },

    // inherited docs
    isActiveView: function() {
        var calendarPanel = this.ownerCalendarPanel;
        return (calendarPanel && calendarPanel.getActiveView().isDayView);
    }
});
/**
 * @class Extensible.calendar.view.Day
 * @extends Ext.Container
 * <p>Unlike other calendar views, is not actually a subclass of {@link Extensible.calendar.view.AbstractCalendar CalendarView}.
 * Instead it is a {@link Ext.Container Container} subclass that internally creates and manages the layouts of
 * a {@link Extensible.calendar.view.DayHeader DayHeaderView} and a {@link Extensible.calendar.view.DayBody DayBodyView}. As such
 * DayView accepts any config values that are valid for DayHeaderView and DayBodyView and passes those through
 * to the contained views. It also supports the interface required of any calendar view and in turn calls methods
 * on the contained views as necessary.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.Day', {
    extend: 'Ext.Container',
    alias: 'widget.extensible.dayview',
    
    requires: [
        'Extensible.calendar.view.AbstractCalendar',
        'Extensible.calendar.view.DayHeader',
        'Extensible.calendar.view.DayBody'
    ],
    
    /**
     * @cfg {String} todayText
     * The text to display in the current day's box in the calendar when {@link #showTodayText} is true (defaults to 'Today')
     */
    /**
     * @cfg {Boolean} readOnly
     * True to prevent clicks on events or the view from providing CRUD capabilities, false to enable CRUD (the default).
     */

    /**
     * @cfg {Boolean} showTime
     * True to display the current time in today's box in the calendar, false to not display it (defaults to true)
     */
    showTime: true,
    /**
     * @cfg {Boolean} showTodayText
     * True to display the {@link #todayText} string in today's box in the calendar, false to not display it (defaults to true)
     */
    showTodayText: true,
    /**
     * @cfg {Number} dayCount
     * The number of days to display in the view (defaults to 1). Only values from 1 to 7 are allowed.
     */
    dayCount: 1,
    /**
     * @cfg {Boolean} enableEventResize
     * True to allow events in the view's scrolling body area to be updated by a resize handle at the 
     * bottom of the event, false to disallow it (defaults to true). If {@link #readOnly} is true event 
     * resizing will be disabled automatically.
     */
    enableEventResize: true,
    /**
     * @cfg {Integer} ddIncrement
     * <p>The number of minutes between each step during various drag/drop operations in the view (defaults to 30).
     * This controls the number of times the dragged object will "snap" to the view during a drag operation, and does
     * not have to match with the time boundaries displayed in the view. E.g., the view could be displayed in 30 minute
     * increments (the default) but you could configure ddIncrement to 10, which would snap a dragged object to the
     * view at 10 minute increments.</p>
     * <p>This config currently applies while dragging to move an event, resizing an event by its handle or dragging 
     * on the view to create a new event.</p>
     */
    ddIncrement: 30,
    /**
     * @cfg {Integer} minEventDisplayMinutes
     * This is the minimum <b>display</b> height, in minutes, for events shown in the view (defaults to 30). This setting
     * ensures that events with short duration are still readable (e.g., by default any event where the start and end
     * times were the same would have 0 height). It also applies when calculating whether multiple events should be
     * displayed as overlapping. In datetime terms, an event that starts and ends at 9:00 and another event that starts
     * and ends at 9:05 do not overlap, but visually the second event would obscure the first in the view. This setting
     * provides a way to ensure that such events will still be calculated as overlapping and displayed correctly.
     */
    minEventDisplayMinutes: 30,
    /**
     * @cfg {Boolean} showHourSeparator
     * True to display a dotted line that separates each hour block in the scrolling body area at the half-hour mark 
     * (the default), false to hide it.
     */
    showHourSeparator: true,
    /**
     * @cfg {Integer} viewStartHour
     * The hour of the day at which to begin the scrolling body area's times (defaults to 0, which equals early 12am / 00:00).
     * Valid values are integers from 0 to 24, but should be less than the value of {@link viewEndHour}.
     */
    viewStartHour: 0,
    /**
     * @cfg {Integer} viewEndHour
     * The hour of the day at which to end the scrolling body area's times (defaults to 24, which equals late 12am / 00:00).
     * Valid values are integers from 0 to 24, but should be greater than the value of {@link viewStartHour}. 
     */
    viewEndHour: 24,
    /**
     * @cfg {Integer} scrollStartHour
     * The default hour of the day at which to set the body scroll position on view load (defaults to 7, which equals 7am / 07:00).
     * Note that if the body is not sufficiently overflowed to allow this positioning this setting will have no effect.
     * This setting should be equal to or greater than {@link viewStartHour}.
     */
    scrollStartHour: 7,
    /**
     * @cfg {Integer} hourHeight
     * <p>The height, in pixels, of each hour block displayed in the scrolling body area of the view (defaults to 42).</p> 
     * <br><p><b>Important note:</b> While this config can be set to any reasonable integer value, note that it is also used to 
     * calculate the ratio used when assigning event heights. By default, an hour is 60 minutes and 42 pixels high, so the
     * pixel-to-minute ratio is 42 / 60, or 0.7. This same ratio is then used when rendering events. When rendering a 
     * 30 minute event, the rendered height would be 30 minutes * 0.7 = 21 pixels (as expected).</p>
     * <p>This is important to understand when changing this value because some browsers may handle pixel rounding in
     * different ways which could lead to inconsistent visual results in some cases. If you have any problems with pixel
     * precision in how events are laid out, you might try to stick with hourHeight values that will generate discreet ratios.
     * This is easily done by simply multiplying 60 minutes by different discreet ratios (.6, .8, 1.1, etc.) to get the 
     * corresponding hourHeight pixel values (36, 48, 66, etc.) that will map back to those ratios. By contrast, if you 
     * chose an hourHeight of 50 for example, the resulting height ratio would be 50 / 60 = .833333... This will work just
     * fine, just be aware that browsers may sometimes round the resulting height values inconsistently.
     */
    hourHeight: 42,
    /**
     * @cfg {String} hideMode
     * <p>How this component should be hidden. Supported values are <tt>'visibility'</tt>
     * (css visibility), <tt>'offsets'</tt> (negative offset position) and <tt>'display'</tt>
     * (css display).</p>
     * <br><p><b>Note</b>: For calendar views the default is 'offsets' rather than the Ext JS default of
     * 'display' in order to preserve scroll position after hiding/showing a scrollable view like Day or Week.</p>
     */
    hideMode: 'offsets',
    /**
     * @cfg {Number} minBodyHeight
     * The minimum height for the scrollable body view (defaults to 150 pixels). By default the body is auto
     * height and simply fills the available area left by the overall layout. However, if the browser window
     * is too short and/or the header area contains a lot of events on a given day, the body area could
     * become too small to be usable. Because of that, if the body falls below this minimum height, the
     * layout will automatically adjust itself by fixing the body height to this minimum height and making the
     * overall Day view container vertically scrollable.
     */
    minBodyHeight: 150,
    
    // private
    isDayView: true,
    
    // private
    initComponent : function(){
        /**
         * @cfg {String} ddCreateEventText
         * The text to display inside the drag proxy while dragging over the calendar to create a new event (defaults to 
         * 'Create event for {0}' where {0} is a date range supplied by the view)
         */
        this.ddCreateEventText = this.ddCreateEventText || Extensible.calendar.view.AbstractCalendar.prototype.ddCreateEventText;
        /**
         * @cfg {String} ddMoveEventText
         * The text to display inside the drag proxy while dragging an event to reposition it (defaults to 
         * 'Move event to {0}' where {0} is the updated event start date/time supplied by the view)
         */
        this.ddMoveEventText = this.ddMoveEventText || Extensible.calendar.view.AbstractCalendar.prototype.ddMoveEventText;
        
        // day count is only supported between 1 and 7 days
        this.dayCount = this.dayCount > 7 ? 7 : (this.dayCount < 1 ? 1 : this.dayCount);
        
        var cfg = Ext.apply({}, this.initialConfig);
        cfg.showTime = this.showTime;
        cfg.showTodayText = this.showTodayText;
        cfg.todayText = this.todayText;
        cfg.dayCount = this.dayCount;
        cfg.weekCount = 1;
        cfg.readOnly = this.readOnly;
        cfg.ddIncrement = this.ddIncrement;
        cfg.minEventDisplayMinutes = this.minEventDisplayMinutes;
        
        var header = Ext.applyIf({
            xtype: 'extensible.dayheaderview',
            id: this.id+'-hd',
            ownerCalendarPanel: this.ownerCalendarPanel
        }, cfg);
        
        var body = Ext.applyIf({
            xtype: 'extensible.daybodyview',
            enableEventResize: this.enableEventResize,
            showHourSeparator: this.showHourSeparator,
            viewStartHour: this.viewStartHour,
            viewEndHour: this.viewEndHour,
            scrollStartHour: this.scrollStartHour,
            hourHeight: this.hourHeight,
            id: this.id+'-bd',
            ownerCalendarPanel: this.ownerCalendarPanel
        }, cfg);
        
        this.items = [header, body];
        this.addCls('ext-cal-dayview ext-cal-ct');
        
        this.callParent(arguments);
    },
    
    // private
    afterRender : function(){
        this.callParent(arguments);
        
        this.header = Ext.getCmp(this.id+'-hd');
        this.body = Ext.getCmp(this.id+'-bd');
        
        this.body.on('eventsrendered', this.forceSize, this);
        this.on('resize', this.onResize, this);
    },
    
    // private
    refresh : function(reloadData) {
        Extensible.log('refresh (DayView)');
        if (reloadData === undefined) {
            reloadData = false;
        }
        this.header.refresh(reloadData);
        this.body.refresh(reloadData);
    },
    
    // private
    forceSize: function() {
        var me = this;
        
        // The defer call is mainly for good ol' IE, but it doesn't hurt in
        // general to make sure that the window resize is good and done first
        // so that we can properly calculate sizes.
        Ext.defer(function() {
            var ct = me.el.up('.x-panel-body'),
                header = me.el.down('.ext-cal-day-header'),
                bodyHeight = ct ? ct.getHeight() - header.getHeight() : false;
            
            if (bodyHeight) {
                if (bodyHeight < me.minBodyHeight) {
                    bodyHeight = me.minBodyHeight;
                    me.addCls('ext-cal-overflow-y');
                }
                else {
                    me.removeCls('ext-cal-overflow-y');
                }
                me.el.down('.ext-cal-body-ct').setHeight(bodyHeight - 1);
            }
        }, Ext.isIE ? 1 : 0, me);
    },
    
    // private
    onResize : function(){
        this.forceSize();
        Ext.defer(this.refresh, Ext.isIE ? 1 : 0, this); //IE needs the defer
    },
    
    /*
     * We have to "relay" this Component method so that the hidden
     * state will be properly reflected when the views' active state changes
     */
    doHide: function(){
        this.header.doHide.apply(this, arguments);
        this.body.doHide.apply(this, arguments);
    },
    
    // private
    getViewBounds : function(){
        return this.header.getViewBounds();
    },
    
    /**
     * Returns the start date of the view, as set by {@link #setStartDate}. Note that this may not 
     * be the first date displayed in the rendered calendar -- to get the start and end dates displayed
     * to the user use {@link #getViewBounds}.
     * @return {Date} The start date
     */
    getStartDate : function(){
        return this.header.getStartDate();
    },

    /**
     * Sets the start date used to calculate the view boundaries to display. The displayed view will be the 
     * earliest and latest dates that match the view requirements and contain the date passed to this function.
     * @param {Date} dt The date used to calculate the new view boundaries
     */
    setStartDate: function(dt){
        this.header.setStartDate(dt, false);
        this.body.setStartDate(dt, true);
    },

    // private
    renderItems: function(){
        this.header.renderItems();
        this.body.renderItems();
    },
    
    /**
     * Returns true if the view is currently displaying today's date, else false.
     * @return {Boolean} True or false
     */
    isToday: function() {
        return this.header.isToday();
    },
    
    /**
     * Updates the view to contain the passed date
     * @param {Date} dt The date to display
     * @return {Date} The new view start date
     */
    moveTo: function(dt) {
        var dt = this.header.moveTo(dt, false);
        this.body.moveTo(dt, true);
        this.forceSize();
        
        return dt;
    },
    
    /**
     * Updates the view to the next consecutive date(s)
     * @return {Date} The new view start date
     */
    moveNext: function() {
        var dt = this.header.moveNext(false);
        this.body.moveNext(true);
        this.forceSize();
        
        return dt;
    },
    
    /**
     * Updates the view to the previous consecutive date(s)
     * @return {Date} The new view start date
     */
    movePrev: function(noRefresh) {
        var dt = this.header.movePrev(false);
        this.body.movePrev(true);
        this.forceSize();
        
        return dt;
    },

    /**
     * Shifts the view by the passed number of days relative to the currently set date
     * @param {Number} value The number of days (positive or negative) by which to shift the view
     * @return {Date} The new view start date
     */
    moveDays: function(value) {
        var dt = this.header.moveDays(value, false);
        this.body.moveDays(value, true);
        this.forceSize();
        
        return dt;
    },
    
    /**
     * Updates the view to show today
     * @return {Date} Today's date
     */
    moveToday: function() {
        var dt = this.header.moveToday(false);
        this.body.moveToday(true);
        this.forceSize();
        
        return dt;
    },
    
    /**
     * Show the currently configured event editor view (by default the shared instance of 
     * {@link Extensible.calendar.form.EventWindow EventEditWindow}).
     * @param {Extensible.calendar.data.EventModel} rec The event record
     * @param {Ext.Element/HTMLNode} animateTarget The reference element that is being edited. By default this is
     * used as the target for animating the editor window opening and closing. If this method is being overridden to
     * supply a custom editor this parameter can be ignored if it does not apply.
     * @return {Extensible.calendar.view.Day} this
     */
    showEventEditor : function(rec, animateTarget){
        return Extensible.calendar.view.AbstractCalendar.prototype.showEventEditor.apply(this, arguments);
    },
    
    /**
     * Dismiss the currently configured event editor view (by default the shared instance of 
     * {@link Extensible.calendar.form.EventWindow EventEditWindow}, which will be hidden).
     * @param {String} dismissMethod (optional) The method name to call on the editor that will dismiss it 
     * (defaults to 'hide' which will be called on the default editor window)
     * @return {Extensible.calendar.view.Day} this
     */
    dismissEventEditor : function(dismissMethod){
        return Extensible.calendar.view.AbstractCalendar.prototype.dismissEventEditor.apply(this, arguments);
    }
});
/**
 * @class Extensible.calendar.view.MultiDay
 * @extends Extensible.calendar.view.Day
 * <p>Displays a calendar view by day, more than one day at a time. This class does not usually need to be used directly as you can
 * use a {@link Extensible.calendar.CalendarPanel CalendarPanel} to manage multiple calendar views at once.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.MultiDay', {
    extend: 'Extensible.calendar.view.Day',
    alias: 'widget.extensible.multidayview',
    
    /**
     * @cfg {Number} dayCount
     * The number of days to display in the view (defaults to 3).  Only values from 1 to 7 are allowed.
     */
    dayCount: 3,
    
    /**
     * @cfg {Boolean} startDayIsStatic
     * <p>By default, any configuration of a multi-day view that contains fewer than 7 days will have a rolling
     * start day. If you view the next or previous views, the dates will be adjusted as needed so that each
     * view is contiguous (e.g., if the last day in the current view is Wednesday and you go to the next view
     * it will always begin with Thursday, regardless of the value of {@link #startDay}.</p>
     * <p>If you set <tt>startDayIsStatic</tt> to <tt>true</tt>, then the view will <em>always</em> begin on
     * {@link #startDay}. For any {@link #dayCount} less than 7, days outside the startDay + dayCount range
     * will not be viewable. If a date that is not in the viewable range is set into the view it will 
     * automatically advance to the first viewable date for the current range.  This could be useful for 
     * creating custom views like a weekday-only or weekend-only view.</p>
     * <p>Some example {@link Extensible.calendar.CalendarPanel CalendarPanel} configs:</p>
     * <pre><code>
    // Weekdays only:
    showMultiDayView: true,
    multiDayViewCfg: {
        dayCount: 5,
        startDay: 1,
        startDayIsStatic: true
    }
    
    // Weekends only:
    showMultiDayView: true,
    multiDayViewCfg: {
        dayCount: 2,
        startDay: 6,
        startDayIsStatic: true
    }
     * </code></pre>
     */
    startDayIsStatic: false,
    
    // inherited docs
    moveNext : function(/*private*/reload){
        return this.moveDays(this.startDayIsStatic ? 7 : this.dayCount, reload);
    },

    // inherited docs
    movePrev : function(/*private*/reload){
        return this.moveDays(this.startDayIsStatic ? -7 : -this.dayCount, reload);
    }
});
/**
 * @class Extensible.calendar.view.Week
 * @extends Extensible.calendar.view.MultiDay
 * <p>Displays a calendar view by week. This class does not usually need to be used directly as you can
 * use a {@link Extensible.calendar.CalendarPanel CalendarPanel} to manage multiple calendar views at once including
 * the week view.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.Week', {
    extend: 'Extensible.calendar.view.MultiDay',
    alias: 'widget.extensible.weekview',
    
    /**
     * @cfg {Number} dayCount
     * The number of days to display in the view (defaults to 7)
     */
    dayCount: 7
});
/**
 * @class Extensible.calendar.view.MultiWeek
 * @extends Extensible.calendar.view.Month
 * <p>Displays a calendar view by week, more than one week at a time. This class does not usually need to be used directly as you can
 * use a {@link Extensible.calendar.CalendarPanel CalendarPanel} to manage multiple calendar views at once.</p>
 * @constructor
 * @param {Object} config The config object
 */
Ext.define('Extensible.calendar.view.MultiWeek', {
    extend: 'Extensible.calendar.view.Month',
    alias: 'widget.extensible.multiweekview',
    
    /**
     * @cfg {Number} weekCount
     * The number of weeks to display in the view (defaults to 2)
     */
    weekCount: 2,
    
    // inherited docs
    moveNext : function(){
        return this.moveWeeks(this.weekCount, true);
    },
    
    // inherited docs
    movePrev : function(){
        return this.moveWeeks(-this.weekCount, true);
    }
});
/**
 * @class Extensible.calendar.CalendarPanel
 * @extends Ext.Panel
 * <p>This is the default container for calendar views. It supports day, week, multi-week and month views as well
 * as a built-in event edit form. The only requirement for displaying a calendar is passing in a valid
 * {@link #Ext.data.Store store} config containing records of type {@link Extensible.calendar.data.EventModel EventRecord}.</p>
 * @constructor
 * @param {Object} config The config object
 * @xtype extensible.calendarpanel
 */
Ext.define('Extensible.calendar.CalendarPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.extensible.calendarpanel',
    
    requires: [
        'Ext.layout.container.Card',
        'Extensible.calendar.view.Day',
        'Extensible.calendar.view.Week',
        'Extensible.calendar.view.Month',
        'Extensible.calendar.view.MultiDay',
        'Extensible.calendar.view.MultiWeek'
    ],
    
    /**
     * @cfg {Number} activeItem
     * The 0-based index within the available views to set as the default active view (defaults to undefined).
     * If not specified the default view will be set as the last one added to the panel. You can retrieve a
     * reference to the active {@link Extensible.calendar.view.AbstractCalendar view} at any time using the
     * {@link #activeView} property.
     */
    /**
     * @cfg {Boolean} recurrence
     * True to enable event recurrence, false to disable it (default). Note that at this time this
     * requires handling code on the server-side that can parse the iCal RRULE format in order to generate
     * the instances of recurring events to display on the calendar, so this field should only be enabled
     * if the server supports it.
     */
    recurrence: false,
    /**
     * @cfg {Boolean} showDayView
     * True to include the day view (and toolbar button), false to hide them (defaults to true).
     */
    showDayView: true,
    /**
     * @cfg {Boolean} showMultiDayView
     * True to include the multi-day view (and toolbar button), false to hide them (defaults to false).
     */
    showMultiDayView: false,
    /**
     * @cfg {Boolean} showWeekView
     * True to include the week view (and toolbar button), false to hide them (defaults to true).
     */
    showWeekView: true,
    /**
     * @cfg {Boolean} showMultiWeekView
     * True to include the multi-week view (and toolbar button), false to hide them (defaults to true).
     */
    showMultiWeekView: true,
    /**
     * @cfg {Boolean} showMonthView
     * True to include the month view (and toolbar button), false to hide them (defaults to true).
     * If all other views are hidden, the month view will show by default even if this config is false.
     */
    showMonthView: true,
    /**
     * @cfg {Boolean} showNavBar
     * True to display the calendar navigation toolbar, false to hide it (defaults to true). Note that
     * if you hide the default navigation toolbar you'll have to provide an alternate means of navigating
     * the calendar.
     */
    showNavBar: true,
    /**
     * @cfg {String} todayText
     * Text to use for the 'Today' nav bar button.
     */
    todayText: 'Today',
    /**
     * @cfg {Boolean} showTodayText
     * True to show the value of {@link #todayText} instead of today's date in the calendar's current day box,
     * false to display the day number(defaults to true).
     */
    showTodayText: true,
    /**
     * @cfg {Boolean} showTime
     * True to display the current time next to the date in the calendar's current day box, false to not show it
     * (defaults to true).
     */
    showTime: true,
    /**
     * @cfg {Boolean} readOnly
     * True to prevent clicks on events or calendar views from providing CRUD capabilities, false to enable CRUD
     * (the default). This option is passed into all views managed by this CalendarPanel.
     */
    readOnly: false,
    /**
     * @cfg {Boolean} showNavToday
     * True to display the "Today" button in the calendar panel's navigation header, false to not
     * show it (defaults to true).
     */
    showNavToday: true,
    /**
     * @cfg {Boolean} showNavJump
     * True to display the "Jump to:" label in the calendar panel's navigation header, false to not
     * show it (defaults to true).
     */
    showNavJump: true,
    /**
     * @cfg {Boolean} showNavNextPrev
     * True to display the left/right arrow buttons in the calendar panel's navigation header, false to not
     * show it (defaults to true).
     */
    showNavNextPrev: true,
    /**
     * @cfg {String} jumpToText
     * Text to use for the 'Jump to:' navigation label.
     */
    jumpToText: 'Jump to:',
    /**
     * @cfg {String} goText
     * Text to use for the 'Go' navigation button.
     */
    goText: 'Go',
    /**
     * @cfg {String} dayText
     * Text to use for the 'Day' nav bar button.
     */
    dayText: 'Day',
    /**
     * @cfg {String} multiDayText
     * <p><b>Deprecated.</b> Please override {@link #getMultiDayText} instead.</p>
     * <p>Text to use for the 'X Days' nav bar button (defaults to "{0} Days" where {0} is automatically
     * replaced by the value of the {@link #multDayViewCfg}'s dayCount value if available, otherwise it
     * uses the view default of 3).</p>
     * @deprecated
     */
    multiDayText: '{0} Days',
    /**
     * @cfg {String} weekText
     * Text to use for the 'Week' nav bar button.
     */
    weekText: 'Week',
    /**
     * @cfg {String} multiWeekText
     * <p><b>Deprecated.</b> Please override {@link #getMultiWeekText} instead.</p>
     * <p>Text to use for the 'X Weeks' nav bar button (defaults to "{0} Weeks" where {0} is automatically
     * replaced by the value of the {@link #multiWeekViewCfg}'s weekCount value if available, otherwise it
     * uses the view default of 2).</p>
     * @deprecated
     */
    multiWeekText: '{0} Weeks',
    /**
     * @cfg {String} monthText
     * Text to use for the 'Month' nav bar button.
     */
    monthText: 'Month',
    /**
     * @cfg {Boolean} editModal
     * True to show the default event editor window modally over the entire page, false to allow user
     * interaction with the page while showing the window (the default). Note that if you replace the
     * default editor window with some alternate component this config will no longer apply.
     */
    editModal: false,
    /**
     * @cfg {Boolean} enableEditDetails
     * True to show a link on the event edit window to allow switching to the detailed edit form (the
     * default), false to remove the link and disable detailed event editing.
     */
    enableEditDetails: true,
    
    /**
     * @cfg {Ext.data.Store} eventStore
     * The {@link Ext.data.Store store} which is bound to this calendar and contains
     * {@link Extensible.calendar.data.EventModel EventModels}. Note that this is an alias to the
     * default {@link #store} config (to differentiate that from the optional {@link #calendarStore}
     * config), and either can be used interchangeably.
     */
    /**
     * @cfg {Ext.data.Store} calendarStore
     * The {@link Ext.data.Store store} which is bound to this calendar and contains
     * {@link Extensible.calendar.data.CalendarModel CalendarModelss}. This is an optional store that
     * provides multi-calendar (and multi-color) support. If available an additional field for selecting
     * the calendar in which to save an event will be shown in the edit forms. If this store is not
     * available then all events will simply use the default calendar (and color).
     */
    /**
     * @cfg {Object} viewConfig
     * A config object that will be applied to all {@link Extensible.calendar.view.AbstractCalendar views}
     * managed by this CalendarPanel. Any options on this object that do not apply to any particular view
     * will simply be ignored.
     */
    /**
     * @cfg {Object} dayViewCfg
     * A config object that will be applied only to the {@link Extensible.calendar.view.Day DayView}
     * managed by this CalendarPanel.
     */
    /**
     * @cfg {Object} multiDayViewCfg
     * A config object that will be applied only to the {@link Extensible.calendar.view.MultiDay MultiDayView}
     * managed by this CalendarPanel.
     */
    /**
     * @cfg {Object} weekViewCfg
     * A config object that will be applied only to the {@link Extensible.calendar.view.Week WeekView}
     * managed by this CalendarPanel.
     */
    /**
     * @cfg {Object} multiWeekViewCfg
     * A config object that will be applied only to the {@link Extensible.calendar.view.MultiWeek MultiWeekView}
     * managed by this CalendarPanel.
     */
    /**
     * @cfg {Object} monthViewCfg
     * A config object that will be applied only to the {@link Extensible.calendar.view.Month MonthView}
     * managed by this CalendarPanel.
     */
    /**
     * @cfg {Object} editViewCfg
     * A config object that will be applied only to the {@link Extensible.calendar.form.EventDetails
     * EventEditForm} managed by this CalendarPanel.
     */
    
    /**
     * A reference to the {@link Extensible.calendar.view.AbstractCalendar view} that is currently active.
     * @type {Extensible.calendar.view.AbstractCalendar}
     * @property activeView
     */
    
    // private
    layout: {
        type: 'card',
        deferredRender: true
    },
    
    // private property
    startDate: new Date(),
    
    // private
    initComponent : function(){
        this.tbar = {
            cls: 'ext-cal-toolbar',
            border: true,
            items: []
        };
        
        this.viewCount = 0;
        
        var text,
            multiDayViewCount = (this.multiDayViewCfg && this.multiDayViewCfg.dayCount) || 3,
            multiWeekViewCount = (this.multiWeekViewCfg && this.multiWeekViewCfg.weekCount) || 2;
        
        //
        // TODO: Pull the configs for the toolbar/buttons out to the prototype for overrideability
        //
        if(this.showNavToday){
            this.tbar.items.push({
                id: this.id+'-tb-today', text: this.todayText, handler: this.onTodayClick, scope: this
            });
        }
        if(this.showNavNextPrev){
            this.tbar.items.push({id: this.id+'-tb-prev', handler: this.onPrevClick, scope: this, iconCls: 'x-tbar-page-prev'});
            this.tbar.items.push({id: this.id+'-tb-next', handler: this.onNextClick, scope: this, iconCls: 'x-tbar-page-next'});
        }
        if(this.showNavJump){
            this.tbar.items.push(this.jumpToText);
            this.tbar.items.push({id: this.id+'-tb-jump-dt', xtype: 'datefield', width: 120, showToday: false});
            this.tbar.items.push({id: this.id+'-tb-jump', text: this.goText, handler: this.onJumpClick, scope: this});
        }
        
        this.tbar.items.push('->');
        
        if(this.showDayView){
            this.tbar.items.push({
                id: this.id+'-tb-day', text: this.dayText, handler: this.onDayNavClick, scope: this, toggleGroup: this.id+'-tb-views'
            });
            this.viewCount++;
        }
        if(this.showMultiDayView){
            text = Ext.String.format(this.getMultiDayText(multiDayViewCount), multiDayViewCount);
            this.tbar.items.push({
                id: this.id+'-tb-multiday', text: text, handler: this.onMultiDayNavClick, scope: this, toggleGroup: this.id+'-tb-views'
            });
            this.viewCount++;
        }
        if(this.showWeekView){
            this.tbar.items.push({
                id: this.id+'-tb-week', text: this.weekText, handler: this.onWeekNavClick, scope: this, toggleGroup: this.id+'-tb-views'
            });
            this.viewCount++;
        }
        if(this.showMultiWeekView){
            text = Ext.String.format(this.getMultiWeekText(multiWeekViewCount), multiWeekViewCount);
            this.tbar.items.push({
                id: this.id+'-tb-multiweek', text: text, handler: this.onMultiWeekNavClick, scope: this, toggleGroup: this.id+'-tb-views'
            });
            this.viewCount++;
        }
        if(this.showMonthView || this.viewCount === 0){
            this.tbar.items.push({
                id: this.id+'-tb-month', text: this.monthText, handler: this.onMonthNavClick, scope: this, toggleGroup: this.id+'-tb-views'
            });
            this.viewCount++;
            this.showMonthView = true;
        }
        
        var idx = this.viewCount-1;
        this.activeItem = (this.activeItem === undefined ? idx : (this.activeItem > idx ? idx : this.activeItem));
        
        if(this.showNavBar === false){
            delete this.tbar;
            this.addCls('x-calendar-nonav');
        }
        
        this.callParent(arguments);
        
        this.addEvents({
            /**
             * @event eventadd
             * Fires after a new event is added to the underlying store
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The new
             *        {@link Extensible.calendar.data.EventModel record} that was added
             */
            eventadd: true,
            /**
             * @event eventupdate
             * Fires after an existing event is updated
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The new
             *        {@link Extensible.calendar.data.EventModel record} that was updated
             */
            eventupdate: true,
            /**
             * @event beforeeventdelete
             * Fires before an event is deleted by the user. This is a cancelable event, so returning
             * false from a handler will cancel the delete operation.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that was deleted
             * @param {Ext.Element} el The target element
             */
            beforeeventdelete: true,
            /**
             * @event eventdelete
             * Fires after an event is deleted by the user.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that was deleted
             * @param {Ext.Element} el The target element
             */
            eventdelete: true,
            /**
             * @event eventcancel
             * Fires after an event add/edit operation is canceled by the user and no store update took place
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The new
             *        {@link Extensible.calendar.data.EventModel record} that was canceled
             */
            eventcancel: true,
            /**
             * @event viewchange
             * Fires after a different calendar view is activated (but not when the event edit form is activated)
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.CalendarView} view The view being activated (any valid
             *        {@link Extensible.calendar.view.AbstractCalendar CalendarView} subclass)
             * @param {Object} info Extra information about the newly activated view. This is a plain object
             * with following properties:<div class="mdetail-params"><ul>
             * <li><b><code>activeDate</code></b> : <div class="sub-desc">The currently-selected date</div></li>
             * <li><b><code>viewStart</code></b> : <div class="sub-desc">The first date in the new view range</div></li>
             * <li><b><code>viewEnd</code></b> : <div class="sub-desc">The last date in the new view range</div></li>
             * </ul></div>
             */
            viewchange: true,
            /**
             * @event editdetails
             * Fires when the user selects the option to edit the selected event in the detailed edit form
             * (by default, an instance of {@link Extensible.calendar.form.EventDetails}). Handling code
             * should hide the active event editor and transfer the current event record to the appropriate
             * instance of the detailed form by showing it and calling
             * {@link Extensible.calendar.form.EventDetails#loadRecord loadRecord}.
             * @param {Extensible.calendar.CalendarPanel} this The CalendarPanel
             * @param {Extensible.calendar.view.AbstractCalendar} view The currently active
             *        {@link Extensible.calendar.view.AbstractCalendar CalendarView} subclass
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} that is currently being edited
             * @param {Ext.Element} el The target element
             */
            editdetails: true
            
            
            //
            // NOTE: CalendarPanel also relays the following events from contained views as if
            // they originated from this:
            //
            
            /**
             * @event eventsrendered
             * Fires after events are finished rendering in the view
             * @param {Extensible.calendar.CalendarPanel} this
             */
            /**
             * @event eventclick
             * <p>Fires after the user clicks on an event element.</p>
             * <p><strong>NOTE:</strong> This version of <code>eventclick</code> differs from the same
             * event fired directly by {@link Extensible.calendar.view.AbstractCalendar CalendarView}
             * subclasses in that it provides a default implementation (showing the default edit window)
             * and is also cancelable (if a handler returns <code>false</code> the edit window will not be
             * shown). This event when fired from a view class is simply a notification that an event was
             * clicked and has no default behavior.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that was clicked on
             * @param {HTMLNode} el The DOM node that was clicked on
             */
            /**
             * @event rangeselect
             * Fires after the user drags on the calendar to select a range of dates/times in which to
             * create an event
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Object} dates An object containing the start (StartDate property) and end (EndDate
             *        property) dates selected
             * @param {Function} callback A callback function that MUST be called after the event handling
             *        is complete so that the view is properly cleaned up (shim elements are persisted in
             *        the view while the user is prompted to handle the range selection). The callback is
             *        already created in the proper scope, so it simply needs to be executed as a standard
             *        function call (e.g., callback()).
             */
            /**
             * @event eventover
             * Fires anytime the mouse is over an event element
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that the cursor is over
             * @param {HTMLNode} el The DOM node that is being moused over
             */
            /**
             * @event eventout
             * Fires anytime the mouse exits an event element
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that the cursor exited
             * @param {HTMLNode} el The DOM node that was exited
             */
            /**
             * @event beforedatechange
             * Fires before the start date of the view changes, giving you an opportunity to save state or
             * anything else you may need to do prior to the UI view changing. This is a cancelable event, so
             * returning false from a handler will cancel both the view change and the setting of the start date.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Date} startDate The current start date of the view (as explained in {@link #getStartDate}
             * @param {Date} newStartDate The new start date that will be set when the view changes
             * @param {Date} viewStart The first displayed date in the current view
             * @param {Date} viewEnd The last displayed date in the current view
             */
            /**
             * @event dayclick
             * Fires after the user clicks within a day/week view container and not on an event element
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Date} dt The date/time that was clicked on
             * @param {Boolean} allday True if the day clicked on represents an all-day box, else false.
             * @param {Ext.Element} el The Element that was clicked on
             */
            /**
             * @event datechange
             * Fires after the start date of the view changes
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Date} startDate The start date of the view (as explained in {@link #getStartDate}
             * @param {Date} viewStart The first displayed date in the view
             * @param {Date} viewEnd The last displayed date in the view
             */
            /**
             * @event beforeeventmove
             * Fires before an event element is dragged by the user and dropped in a new position. This is
             * a cancelable event, so returning false from a handler will cancel the move operation.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that will be moved
             */
            /**
             * @event eventmove
             * Fires after an event element is dragged by the user and dropped in a new position
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that was moved with
             * updated start and end dates
             */
            /**
             * @event initdrag
             * Fires when a drag operation is initiated in the view
             * @param {Extensible.calendar.CalendarPanel} this
             */
            /**
             * @event dayover
             * Fires while the mouse is over a day element
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Date} dt The date that is being moused over
             * @param {Ext.Element} el The day Element that is being moused over
             */
            /**
             * @event dayout
             * Fires when the mouse exits a day element
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Date} dt The date that is exited
             * @param {Ext.Element} el The day Element that is exited
             */
            /**
             * @event beforeeventresize
             * Fires after the user drags the resize handle of an event to resize it, but before the
             * resize operation is carried out. This is a cancelable event, so returning false from a
             * handler will cancel the resize operation. <strong>NOTE:</strong> This event is only fired
             * from views that support event resizing.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that was resized
             * containing the updated start and end dates
             */
            /**
             * @event eventresize
             * Fires after the user drags the resize handle of an event and the resize operation is
             * complete. <strong>NOTE:</strong> This event is only fired from views that support event resizing.
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Extensible.calendar.data.EventModel} rec The
             *        {@link Extensible.calendar.data.EventModel record} for the event that was resized
             * containing the updated start and end dates
             */
            /**
             * @event eventexception
             * Fires after an event has been processed via an Ext proxy and returned with an exception. This
             * could be because of a server error, or because the data returned <code>success: false</code>.
             *
             * The view provides default handling via the overrideable
             * {@link Extensible.calendar.view.AbstractCalendar#notifyOnException notifyOnException} method. If
             * any function handling this event returns false, the notifyOnException method will not be called.
             *
             * Note that only Server proxy and subclasses (including Ajax proxy) will raise this event.
             *
             * @param {Extensible.calendar.CalendarPanel} this
             * @param {Object} response The raw response object returned from the server
             * @param {Ext.data.Operation} operation The operation that was processed
             * @since 2.0.0
             */
        });
        
        this.addCls('x-cal-panel');
        
        if(this.eventStore){
            this.store = this.eventStore;
            delete this.eventStore;
        }
        this.setStore(this.store);
        
        var sharedViewCfg = {
            showToday: this.showToday,
            todayText: this.todayText,
            showTodayText: this.showTodayText,
            showTime: this.showTime,
            readOnly: this.readOnly,
            recurrence: this.recurrence,
            store: this.store,
            calendarStore: this.calendarStore,
            editModal: this.editModal,
            enableEditDetails: this.enableEditDetails,
            ownerCalendarPanel: this
        };
        
        if(this.showDayView){
            var day = Ext.apply({
                xtype: 'extensible.dayview',
                title: this.dayText
            }, sharedViewCfg);
            
            day = Ext.apply(Ext.apply(day, this.viewConfig), this.dayViewCfg);
            day.id = this.id+'-day';
            this.initEventRelay(day);
            this.add(day);
        }
        if(this.showMultiDayView){
            var mday = Ext.apply({
                xtype: 'extensible.multidayview',
                title: this.getMultiDayText(multiDayViewCount)
            }, sharedViewCfg);
            
            mday = Ext.apply(Ext.apply(mday, this.viewConfig), this.multiDayViewCfg);
            mday.id = this.id+'-multiday';
            this.initEventRelay(mday);
            this.add(mday);
        }
        if(this.showWeekView){
            var wk = Ext.applyIf({
                xtype: 'extensible.weekview',
                title: this.weekText
            }, sharedViewCfg);
            
            wk = Ext.apply(Ext.apply(wk, this.viewConfig), this.weekViewCfg);
            wk.id = this.id+'-week';
            this.initEventRelay(wk);
            this.add(wk);
        }
        if(this.showMultiWeekView){
            var mwk = Ext.applyIf({
                xtype: 'extensible.multiweekview',
                title: this.getMultiWeekText(multiWeekViewCount)
            }, sharedViewCfg);
            
            mwk = Ext.apply(Ext.apply(mwk, this.viewConfig), this.multiWeekViewCfg);
            mwk.id = this.id+'-multiweek';
            this.initEventRelay(mwk);
            this.add(mwk);
        }
        if(this.showMonthView){
            var month = Ext.applyIf({
                xtype: 'extensible.monthview',
                title: this.monthText,
                listeners: {
                    'weekclick': {
                        fn: function(vw, dt){
                            this.showWeek(dt);
                        },
                        scope: this
                    }
                }
            }, sharedViewCfg);
            
            month = Ext.apply(Ext.apply(month, this.viewConfig), this.monthViewCfg);
            month.id = this.id+'-month';
            this.initEventRelay(month);
            this.add(month);
        }

        this.add(Ext.applyIf({
            xtype: 'extensible.eventeditform',
            id: this.id+'-edit',
            calendarStore: this.calendarStore,
            recurrence: this.recurrence,
            listeners: {
                'eventadd':    { scope: this, fn: this.onEventAdd },
                'eventupdate': { scope: this, fn: this.onEventUpdate },
                'eventdelete': { scope: this, fn: this.onEventDelete },
                'eventcancel': { scope: this, fn: this.onEventCancel }
            }
        }, this.editViewCfg));
    },
    
    // private
    initEventRelay: function(cfg){
        cfg.listeners = cfg.listeners || {};
        cfg.listeners.afterrender = {
            fn: function(c){
                // Relay view events so that app code only has to handle them in one place.
                // These events require no special handling by the calendar panel.
                this.relayEvents(c, ['eventsrendered', 'eventclick', 'dayclick', 'eventover', 'eventout',
                    'beforedatechange', 'datechange', 'rangeselect', 'beforeeventcopy', 'eventcopy',
                    'beforeeventmove', 'eventmove', 'initdrag', 'dayover', 'dayout', 'beforeeventresize',
                    'eventresize', 'eventadd', 'eventupdate', 'beforeeventdelete', 'eventdelete',
                    'eventcancel', 'eventexception']);
                
                c.on('editdetails', this.onEditDetails, this);
            },
            scope: this,
            single: true
        };
    },
    
    // private
    afterRender: function(){
        this.callParent(arguments);
        
        this.body.addCls('x-cal-body');
        this.updateNavState();
        this.setActiveView();
    },
    
    /**
     * Returns the text to use for the 'X Days' nav bar button (defaults to "{0} Days" where {0} is automatically replaced by the
     * value of the {@link #multDayViewCfg}'s dayCount value if available, otherwise it uses the view default of 3).
     */
    getMultiDayText: function(numDays){
        return this.multiDayText;
    },
    
    /**
     * Returns the text to use for the 'X Weeks' nav bar button (defaults to "{0} Weeks" where {0} is automatically replaced by the
     * value of the {@link #multiWeekViewCfg}'s weekCount value if available, otherwise it uses the view default of 2).
     */
    getMultiWeekText: function(numWeeks){
        return this.multiWeekText;
    },
    
    /**
     * Sets the event store used by the calendar to display {@link Extensible.calendar.data.EventModel events}.
     * @param {Ext.data.Store} store
     */
    setStore : function(store, initial){
        var currStore = this.store;
        
        if(!initial && currStore){
            currStore.un("write", this.onWrite, this);
        }
        if(store){
            store.on("write", this.onWrite, this);
        }
        this.store = store;
    },
    
    // private
    onStoreAdd : function(ds, recs, index){
        this.hideEditForm();
    },
    
    // private
    onStoreUpdate : function(ds, rec, operation){
        if(operation === Ext.data.Record.COMMIT){
            this.hideEditForm();
        }
    },

    // private
    onStoreRemove : function(ds, rec){
        this.hideEditForm();
    },
    
    // private
    onWrite: function(store, operation){
        var rec = operation.records[0];
        
        switch(operation.action){
            case 'create':
                this.onStoreAdd(store, rec);
                break;
            case 'update':
                this.onStoreUpdate(store, rec, Ext.data.Record.COMMIT);
                break;
            case 'destroy':
                this.onStoreRemove(store, rec);
                break;
        }
    },
    
    // private
    onEditDetails: function(vw, rec, el){
        if(this.fireEvent('editdetails', this, vw, rec, el) !== false){
            this.showEditForm(rec);
        }
    },
    
    // private
    save: function(){
        // If the store is configured as autoSync:true the record's endEdit
        // method will have already internally caused a save to execute on
        // the store. We only need to save manually when autoSync is false,
        // otherwise we'll create duplicate transactions.
        if(!this.store.autoSync){
            this.store.sync();
        }
    },
        
    // private
    onEventAdd: function(form, rec){
        if(!rec.store){
            this.store.add(rec);
            this.save();
        }
        this.fireEvent('eventadd', this, rec);
    },
    
    // private
    onEventUpdate: function(form, rec){
        this.save();
        this.fireEvent('eventupdate', this, rec);
    },
    
    // private
    onEventDelete: function(form, rec){
        this.store.remove(rec);
        this.save();
        this.fireEvent('eventdelete', this, rec);
    },
    
    // private
    onEventCancel: function(form, rec){
        this.hideEditForm();
        this.fireEvent('eventcancel', this, rec);
    },
    
    /**
     * Shows the built-in event edit form for the passed in event record.  This method automatically
     * hides the calendar views and navigation toolbar.  To return to the calendar, call {@link #hideEditForm}.
     * @param {Extensible.calendar.data.EventModel} record The event record to edit
     * @return {Extensible.calendar.CalendarPanel} this
     */
    showEditForm: function(rec){
        this.preEditView = this.layout.getActiveItem().id;
        this.setActiveView(this.id+'-edit');
        this.layout.getActiveItem().loadRecord(rec);
        return this;
    },
    
    /**
     * Hides the built-in event edit form and returns to the previous calendar view. If the edit form is
     * not currently visible this method has no effect.
     * @return {Extensible.calendar.CalendarPanel} this
     */
    hideEditForm: function(){
        if(this.preEditView){
            this.setActiveView(this.preEditView);
            delete this.preEditView;
        }
        return this;
    },
    
    /**
     * Set the active view, optionally specifying a new start date.
     * @param {String} id The id of the view to activate
     * @param {Date} startDate (optional) The new view start date (defaults to the current start date)
     */
    setActiveView: function(id, startDate){
        var me = this,
            layout = me.layout,
            editViewId = me.id + '-edit',
            toolbar;
        
        if (startDate) {
            me.startDate = startDate;
        }
        
        // Make sure we're actually changing views
        if (id !== layout.getActiveItem().id) {
            // Show/hide the toolbar first so that the layout will calculate the correct item size
            toolbar = me.getDockedItems('toolbar')[0];
            if (toolbar) {
                toolbar[id === editViewId ? 'hide' : 'show']();
            }
            
            // Activate the new view and refresh the layout
            layout.setActiveItem(id || me.activeItem);
            me.doComponentLayout();
            me.activeView = layout.getActiveItem();
            
            if (id !== editViewId) {
                if (id && id !== me.preEditView) {
                    // We're changing to a different view, so the view dates are likely different.
                    // Re-set the start date so that the view range will be updated if needed.
                    // If id is undefined, it means this is the initial pass after render so we can
                    // skip this (as we don't want to cause a duplicate forced reload).
                    layout.activeItem.setStartDate(me.startDate, true);
                }
                // Switching to a view that's not the edit view (i.e., the nav bar will be visible)
                // so update the nav bar's selected view button
                me.updateNavState();
            }
            // Notify any listeners that the view changed
            me.fireViewChange();
        }
    },
    
    // private
    fireViewChange: function() {
        if (this.layout && this.layout.getActiveItem) {
            var view = this.layout.getActiveItem(),
                cloneDt = Ext.Date.clone;
                
            if (view) {
                var info;
                
                // some views do not have these properties, e.g. the detailed edit form
                if (view.getViewBounds) {
                    var vb = view.getViewBounds();
                    info = {
                        viewStart: cloneDt(vb.start),
                        viewEnd: cloneDt(vb.end),
                        activeDate: cloneDt(view.getStartDate())
                    };
                }
                if (view.dismissEventEditor){
                    view.dismissEventEditor();
                }
                this.fireEvent('viewchange', this, view, info);
            }
        }
    },
    
    // private
    updateNavState: function(){
        var me = this,
            activeItem = me.layout.activeItem;
        
        if (activeItem && me.showNavBar !== false) {
            var suffix = activeItem.id.split(me.id + '-')[1],
                btn = Ext.getCmp(me.id + '-tb-' + suffix);
            
            if (me.showNavToday) {
                Ext.getCmp(me.id + '-tb-today').setDisabled(activeItem.isToday());
            }
            btn.toggle(true);
        }
    },

    /**
     * Sets the start date for the currently-active calendar view.
     * @param {Date} dt The new start date
     * @return {Extensible.calendar.CalendarPanel} this
     */
    setStartDate: function(dt){
        Extensible.log('setStartDate (CalendarPanel');
        this.startDate = dt;
        this.layout.activeItem.setStartDate(dt, true);
        this.updateNavState();
        this.fireViewChange();
        return this;
    },
        
    // private
    showWeek: function(dt){
        this.setActiveView(this.id+'-week', dt);
    },
    
    // private
    onTodayClick: function(){
        this.startDate = this.layout.activeItem.moveToday(true);
        this.updateNavState();
        this.fireViewChange();
    },
    
    // private
    onJumpClick: function(){
        var dt = Ext.getCmp(this.id+'-tb-jump-dt').getValue();
        if(dt !== ''){
            this.startDate = this.layout.activeItem.moveTo(dt, true);
            this.updateNavState();
            // TODO: check that view actually changed:
            this.fireViewChange();
        }
    },
    
    // private
    onPrevClick: function(){
        this.startDate = this.layout.activeItem.movePrev(true);
        this.updateNavState();
        this.fireViewChange();
    },
    
    // private
    onNextClick: function(){
        this.startDate = this.layout.activeItem.moveNext(true);
        this.updateNavState();
        this.fireViewChange();
    },
    
    // private
    onDayNavClick: function(){
        this.setActiveView(this.id+'-day');
    },
    
    // private
    onMultiDayNavClick: function(){
        this.setActiveView(this.id+'-multiday');
    },
    
    // private
    onWeekNavClick: function(){
        this.setActiveView(this.id+'-week');
    },
    
    // private
    onMultiWeekNavClick: function(){
        this.setActiveView(this.id+'-multiweek');
    },
    
    // private
    onMonthNavClick: function(){
        this.setActiveView(this.id+'-month');
    },
    
    /**
     * Return the calendar view that is currently active, which will be a subclass of
     * {@link Extensible.calendar.view.AbstractCalendar AbstractCalendar}.
     * @return {Extensible.calendar.view.AbstractCalendar} The active view
     */
    getActiveView: function(){
        return this.layout.activeItem;
    }
});



/**
 * facilities.ejs.php
 * Description: Patient File ScreenS
 * v0.0.3
 *
 * Author: Ernesto J Rodriguez
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Calendar.getCalendars
 * @namespace Calendar.getEvents
 * @namespace Calendar.addEvent
 * @namespace Calendar.updateEvent
 * @namespace Calendar.deleteEvent
 *
 */
Ext.define('App.view.calendar.Calendar', {
	extend     : 'App.classes.RenderPanel',
	id         : 'panelCalendar',
	pageTitle  : i18n['calendar_events'],
	constructor: function() {

		this.callParent(arguments);

		this.calendarStore = Ext.create('Extensible.calendar.data.MemoryCalendarStore', {
			autoLoad: true,
			proxy   : {
				type   : 'direct',
				api    : {
					read: Calendar.getCalendars
				},
				noCache: false,

				reader: {
					type: 'json',
					root: 'calendars'
				}
			}
		});

		this.eventStore = Ext.create('Extensible.calendar.data.EventStore', {
			autoLoad : true,
			proxy    : {
				type   : 'direct',
				api    : {
					read   : Calendar.getEvents,
					create : Calendar.addEvent,
					update : Calendar.updateEvent,
					destroy: Calendar.deleteEvent
				},
				noCache: false,

				reader: {
					type: 'json',
					root: 'data'
				},

				writer: {
					type        : 'json',
					nameProperty: 'mapping'
				},

				listeners: {
					exception: function(proxy, response) {
						var msg = response.message ? response.message : Ext.decode(response.responseText).message;
						// ideally an app would provide a less intrusive message display
						Ext.Msg.alert('Server Error', msg);
					}
				}
			},

			// It's easy to provide generic CRUD messaging without having to handle events on every individual view.
			// Note that while the store provides individual add, update and remove events, those fire BEFORE the
			// remote transaction returns from the server -- they only signify that records were added to the store,
			// NOT that your changes were actually persisted correctly in the back end. The 'write' event is the best
			// option for generically messaging after CRUD persistence has succeeded.
			listeners: {
				scope  : this,
				'write': function(store, operation) {
					say(store);
					say(operation);

					var title = Ext.value(operation.records[0].data[Extensible.calendar.data.EventMappings.Title.name], '(No title)');
					if(operation.action == 'create') {
						this.msg(i18n['add'], 'Added "' + title + '"');
					} else if(operation.action == 'update') {
						this.msg(i18n['update'], 'Updated "' + title + '"');
					} else if(operation.action == 'destroy') {
						this.msg(i18n['delete'], 'Deleted "' + title + '"');
					}
				}
			}
		});

		this.pageBody = [
			{
				xtype : 'panel',
				layout: 'border',
				border: true,
				items : [
					{
						id    : 'app-west',
						region: 'west',
						width : 179,
						border: false,
						items : [
							{
								xtype    : 'datepicker',
								id       : 'app-nav-picker',
								cls      : 'ext-cal-nav-picker',
								listeners: {
									'select': {
										fn   : function(dp, dt) {
                                            say(dt);
											Ext.getCmp('app-calendar').setStartDate(dt);
										},
										scope: this
									}
								}
							},
							{
								xtype      : 'extensible.calendarlist',
								id         : 'app-calendarlist',
								store      : this.calendarStore,
								collapsible: true,
								border     : false,
								width      : 178
							}
						]
					},
					{
						xtype        : 'extensible.calendarpanel',
						eventStore   : this.eventStore,
						calendarStore: this.calendarStore,
						border       : false,
						id           : 'app-calendar',
						region       : 'center',
						activeItem   : 3, // month view

						// Any generic view options that should be applied to all sub views:
						viewConfig   : {
							enableFx: false,
							//ddIncrement           : 10, //only applies to DayView and subclasses, but convenient to put it here
							viewStartHour         : 8,
							viewEndHour           : 21,
							minEventDisplayMinutes: 15,
							showTime: false
						},

						// View options specific to a certain view (if the same options exist in viewConfig
						// they will be overridden by the view-specific config):
						monthViewCfg : {
							showHeader     : true,
							showWeekLinks  : true,
							showWeekNumbers: true
						},

						multiWeekViewCfg : {
							//weekCount: 3
						},

						// Some optional CalendarPanel configs to experiment with:
						//readOnly          : true,
						//showDayView       : false,
						//showMultiDayView  : true,
						//showWeekView      : false,
						//showMultiWeekView : false,
						//showMonthView     : false,
						//showNavBar        : false,
						//showTodayText     : false,
						//showTime          : false,
						//editModal         : true,
						enableEditDetails: false,
						//title             : 'My Calendar',

						listeners: {
							'eventclick' : {
								fn   : function() {
									this.clearMsg();
								},
								scope: this
							},
							'eventover'  : function() {
								//console.log('Entered evt rec='+rec.data[Extensible.calendar.data.EventMappings.Title.name]', view='+ vw.id +', el='+el.id);
							},
							'eventout'   : function() {
								//console.log('Leaving evt rec='+rec.data[Extensible.calendar.data.EventMappings.Title.name]+', view='+ vw.id +', el='+el.id);
							},
							'eventadd'   : {
								fn   : function(cp, rec) {
									this.showMsg(i18n['event'] + ' ' + rec.data[Extensible.calendar.data.EventMappings.Title.name] + ' ' + i18n['was_updated']);
								},
								scope: this
							},
							'eventupdate': {
								fn   : function(cp, rec) {
									this.showMsg(i18n['event'] + ' ' + rec.data[Extensible.calendar.data.EventMappings.Title.name] + ' ' + i18n['was_updated']);
								},
								scope: this
							},
							'eventcancel': {
								fn   : function() {
									// edit canceled
								},
								scope: this
							},
							'viewchange' : {
								fn   : function(p, vw, dateInfo) {
									if(dateInfo) {
										//this.updateTitle(dateInfo.viewStart, dateInfo.viewEnd);
									}
								},
								scope: this
							},
							'dayclick'   : {
								fn   : function() {
									this.clearMsg();
								},
								scope: this
							},
							'rangeselect': {
								fn   : function() {
									this.clearMsg();
								},
								scope: this
							},
							'eventmove'  : {
								fn   : function(vw, rec) {
									var mappings = Extensible.calendar.data.EventMappings,
										time = rec.data[mappings.IsAllDay.name] ? '' : ' \\a\\t g:i a';

									rec.commit();

									this.showMsg(i18n['event'] + ' ' + rec.data[mappings.Title.name] + ' ' + i18n['was_moved_to'] + ' ' +
										Ext.Date.format(rec.data[mappings.StartDate.name], ('F jS' + time)));
								},
								scope: this
							},
							'eventresize': {
								fn   : function(vw, rec) {
									rec.commit();
									this.showMsg(i18n['event'] + ' ' + rec.data[Extensible.calendar.data.EventMappings.Title.name] + ' ' + i18n['was_updated']);
								},
								scope: this
							},
							'eventdelete': {
								fn   : function(win, rec) {
									this.eventStore.remove(rec);
									this.showMsg(i18n['event'] + ' ' + rec.data[Extensible.calendar.data.EventMappings.Title.name] + ' ' + i18n['was_deleted']);
								},
								scope: this
							},
							'initdrag'   : {
								fn   : function() {
									// do something when drag starts
								},
								scope: this
							}
						}
					}
				]
			}
		];

		this.callParent();

	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */

	onActive   : function(callback) {
		var me = this,
			calPanel = Ext.getCmp('app-calendar'),
			calListPanel = Ext.getCmp('app-calendarlist');

		calPanel.getActiveView().refresh(true);
		me.calendarStore.load({
			callback:function(){
				calListPanel.doLayout();
			}
		});
		callback(true);
	},

	showMsg: function(msg) {
		Ext.fly('app-msg').update(msg).removeCls('x-hidden');
	},

	clearMsg: function() {
		Ext.fly('app-msg').update('').addCls('x-hidden');
	}
});
/**
 *
 * @namespace Messages.getMessages
 * @namespace Messages.sendNewMessage
 * @namespace Messages.replyMessage
 * @namespace Messages.deleteMessage
 * @namespace Messages.updateMessage
 */
Ext.define('App.view.messages.Messages', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelMessages',
	pageTitle    : i18n['messages'] + ' (' + i18n['inbox'] + ')',
	pageLayout   : 'border',
	defaults     : {split: true},
	uses         : [
		'App.classes.GridPanel',
		'App.classes.LivePatientSearch',
		'App.classes.combo.MsgStatus',
		'App.classes.combo.MsgNoteType',
		'App.classes.combo.Users'
	],
	initComponent: function() {

		var me = this;
		/**
		 * Message Store
		 */
		Ext.define('MessagesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'date', type: 'string'},
				{name: 'body', type: 'string'},
				{name: 'pid', type: 'string'},
				{name: 'patient_name', type: 'string'},
				{name: 'from_user', type: 'string'},
				{name: 'to_user', type: 'string'},
				{name: 'subject', type: 'string'},
				{name: 'facility_id', type: 'string'},
				{name: 'authorized', type: 'string'},
				{name: 'to_id', type: 'string'},
				{name: 'from_id', type: 'string'},
				{name: 'message_status', type: 'string'},
				{name: 'note_type', type: 'string'}
			]

		});

		me.storeMsgs = Ext.create('Ext.data.Store', {
			model   : 'MessagesModel',
			proxy   : {
				type: 'direct',
				api : {
					read   : Messages.getMessages,
					create : Messages.sendNewMessage,
					update : Messages.replyMessage,
					destroy: Messages.deleteMessage
				},
                reader     : {
                    type: 'json',
                    root: 'messages',
                    totalProperty:'totals'
                }
			},
			autoLoad: false
		});

		/**
		 * Message GridPanel
		 */
		me.msgGrid = Ext.create('App.classes.GridPanel', {
			store     : me.storeMsgs,
			region    : 'center',
			border    : true,
			viewConfig: {forceFit: true, stripeRows: true},
			listeners : {
				scope    : this,
				itemclick: this.onItemClick
			},
			columns   : [
				{ header: i18n['status'], sortable: true, dataIndex: 'message_status', width: 70   },
				{ header: i18n['from'], sortable: true, dataIndex: 'from_user', width: 200  },
				{ header: i18n['to'], sortable: true, dataIndex: 'to_user', width: 200  },
				{ header: i18n['patient'], sortable: true, dataIndex: 'patient_name', width: 200  },
				{ header: i18n['subject'], sortable: true, dataIndex: 'subject', flex: 1    },
				{ header: i18n['type'], sortable: true, dataIndex: 'note_type', width: 100  }
			],
			tbar      : Ext.create('Ext.PagingToolbar', {
				store      : me.storeMsgs,
				displayInfo: true,
				emptyMsg   : i18n['no_office_notes_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items      : ['-', {
					text    : i18n['delete'],
					cls     : 'winDelete',
					iconCls : 'delete',
					itemId  : 'deleteMsg',
					disabled: true,
					scope   : me,
					handler : me.onDelete
				}, '-', {
					text        : i18n['inbox'],
					action      : 'inbox',
					enableToggle: true,
					toggleGroup : 'message',
					pressed     : true,
					scope       : me,
					handler     : me.messagesType
				}, '-', {
					text        : i18n['sent'],
					action      : 'sent',
					enableToggle: true,
					toggleGroup : 'message',
					scope       : me,
					handler     : me.messagesType
				}, '-', {
					text        : i18n['trash'],
					action      : 'trash',
					enableToggle: true,
					toggleGroup : 'message',
					scope       : me,
					handler     : me.messagesType
				}, '-']
			}),
			bbar      : [
				{
					text   : i18n['new_message'],
					iconCls: 'newMessage',
					itemId : 'newMsg',
					handler: function() {
						me.onNewMessage();
					}
				},
				'-',
				{
					text    : i18n['reply'],
					iconCls : 'edit',
					itemId  : 'replyMsg',
					disabled: true,
					handler : function() {
						me.action('reply');
					}
				},
				'-'
			]
		});
		/**
		 * Form to send and replay messages
		 */
		me.msgForm = Ext.create('Ext.form.Panel', {
			region       : 'south',
			height       : 340,
			cls          : 'msgForm',
			layout:{
				type:'vbox',
				align:'stretch'
			},
			fieldDefaults: { labelWidth: 60, margin: 5, anchor: '100%' },
			items        : [
				{
					xtype  : 'container',
					height:95,
					cls    : 'message-form-header',
					padding: '5 0',
					layout : 'anchor',
					items  : [
						{
							xtype : 'container',
							layout: 'column',
							items : [
								{
									xtype      : 'container',
									layout     : 'anchor',
									columnWidth: '.50',
									items      : [
										{
											xtype     : 'patienlivetsearch',
											fieldLabel: i18n['patient'],
											emptyText : i18n['no_patient_selected'],
											itemId    : 'patientCombo',
											name      : 'pid',
											hideLabel : false
										},
										{
											xtype     : 'textfield',
											fieldLabel: i18n['patient'],
											itemId    : 'patientField',
											name      : 'patient_name',
											readOnly  : true,
											hidden    : true
										},
										{
											xtype           : 'userscombo',
											name            : 'to_id',
											fieldLabel      : i18n['to'],
											validateOnChange: false,
											allowBlank      : false
										}
									]
								},
								{
									xtype      : 'container',
									layout     : 'anchor',
									columnWidth: '.50',
									items      : [
										{
											xtype     : 'msgnotetypecombo',
											name      : 'note_type',
											fieldLabel: i18n['type'],
											listeners : {
												scope : me,
												select: me.onChange
											}
										},
										{
											xtype     : 'msgstatuscombo',
											name      : 'message_status',
											fieldLabel: i18n['status'],
											listeners : {
												scope : me,
												select: me.onChange
											}
										}
									]
								}
							]
						},
						{
							xtype     : 'textfield',
							fieldLabel: i18n['subject'],
							name      : 'subject',
							margin    : '0 5 5 5'
						}
					]
				},
				{
					xtype   : 'htmleditor',
					name    : 'body',
					itemId  : 'bodyMsg',
					flex:1,
					readOnly:true,
					allowBlank: false
				},
//				{
//					xtype           : 'htmleditor',
//					name            : 'curr_msg',
//					itemId          : 'currMsg',
//					height          : 204,
//					allowBlank      : false,
//					validateOnChange: false,
//					hidden          : true
//				},
				{
					xtype : 'textfield',
					hidden: true,
					name  : 'id'
				},
				{
					xtype : 'textfield',
					hidden: true,
					name  : 'pid'
				},
				{
					xtype : 'textfield',
					hidden: true,
					name  : 'reply_id'
				}
			],
			bbar         : [
				{
					text   : i18n['send'],
					iconCls: 'save',
					itemId : 'sendMsg',
					scope  : me,
					handler: me.onSend
				},
				'-',
				{
					text    : i18n['delete'],
					cls     : 'winDelete',
					iconCls : 'delete',
					itemId  : 'deleteMsg',
					margin  : '0 3 0 0',
					disabled: true,
					scope   : me,
					handler : me.onDelete
				}
			],
			listeners    : {
				scope      : me,
				afterrender: me.onFormRender

			}
		});
		me.pageBody = [ me.msgGrid, me.msgForm ];
		me.callParent(arguments);

	}, // End initComponent

	messagesType: function(btn) {
		this.updateTitle('Messages (' + Ext.String.capitalize(btn.action) + ')');
		this.storeMsgs.proxy.extraParams = {get: btn.action};
		this.storeMsgs.load();

	},

	onFormRender: function() {
		this.msgForm.getComponent('bodyMsg').setReadOnly(true);
		this.onNewMessage();
	},
	/**
	 * onNewMessage will reset the form and load a new model
	 * with message_status value set to New, and
	 * note_type value set to Unassigned
	 */
	onNewMessage       : function() {
		var form = this.msgForm;
		form.getForm().reset();
		var model = Ext.ModelManager.getModel('MessagesModel'),
			newModel = Ext.ModelManager.create({
				message_status: i18n['new'],
				note_type     : i18n['unassigned']
			}, model);
		form.getForm().loadRecord(newModel);
		this.action('new');
	},
	/**
	 *
	 * @param btn
	 */
	onSend      : function(btn) {
		var form = btn.up('form').getForm(),
			store = this.storeMsgs;

		if(form.isValid()) {
			var record = form.getRecord(),
				values = form.getValues(),
				storeIndex = store.indexOf(record);

			if(storeIndex == -1) {
				store.add(values);
			} else {
				record.set(values);
			}
			store.sync();
			store.load();
			this.onNewMessage();
			this.msg('Sweet!', i18n['message_sent']);
		} else {
			this.msg('Oops!', i18n['please_complete_all_required_fields'] + '.');
		}
	},
	/**
	 *
	 * onDelete will show an alert msg to confirm,
	 * delete the message and prepare the form for a new message
	 */
	onDelete    : function() {
		var form = this.msgForm.getForm(),
			store = this.storeMsgs;
		Ext.Msg.show({
			title  : i18n['please_confirm'] + '...',
			icon   : Ext.MessageBox.QUESTION,
			msg    : i18n['are_you_sure_to_delete_this_message'],
			buttons: Ext.Msg.YESNO,
			scope  : this,
			fn     : function(btn) {
				if(btn == 'yes') {
					var currentRec = form.getRecord();
					store.remove(currentRec);
					store.destroy();
					this.onNewMessage();
					this.msg('Sweet!', i18n['sent_to_trash']);
				}
			}
		});
	},
	onChange    : function(combo, record) {
		var me = this,
			form = combo.up('form').getForm();

		if(form.isValid()) {

			var id = form.getRecord().data.id,
				col = combo.name,
				val = record[0].data.option_id,
				params = {
					id : id,
					col: col,
					val: val
				};

			/**
			 * Ext.direct function
			 */
			Messages.updateMessage(params, function() {
				me.storeMsgs.load();
			});

		}

	},
	/**
	 * On item click check if msgPreView is already inside the container.
	 * if not, remove the item inside the container, add msgPreView and update it with record data.
	 * if yes, just update the msgPreView with the new record data
	 *
	 * @param view
	 * @param record
	 * @namespace record.data.from_id
	 */
	onItemClick : function(view, record) {
		record.data.to_id = record.data.from_id;
		this.msgForm.getForm().loadRecord(record);
		this.action('old');
	},

	/**
	 * This function is use to disable/enabled and hide/show buttons and fields
	 * according to the action
	 *
	 * @param action
	 */
	action  : function(action) {
		var sm = this.msgGrid.getSelectionModel(),
			form = this.msgForm,
			patientCombo = form.query('combo[itemId="patientCombo"]')[0],
			patientField = form.query('textfield[itemId="patientField"]')[0],
			bodyMsg = form.getComponent('bodyMsg'),
			currMsg = form.getComponent('currMsg'),
			deletebtn1 = this.query('button[itemId="deleteMsg"]')[0],
			deletebtn2 = this.query('button[itemId="deleteMsg"]')[1],
			replybtn = this.query('button[itemId="replyMsg"]')[0],
			sendbtn = this.query('button[itemId="sendMsg"]')[0];
		if(action == 'new') {
			bodyMsg.setReadOnly(false);
			patientCombo.show();
			patientField.hide();
			deletebtn1.disable();
			deletebtn2.disable();
			replybtn.disable();
			sendbtn.enable();
			sm.deselectAll();
		} else if(action == 'old') {
			bodyMsg.setReadOnly(true);
			patientCombo.hide();
			patientField.show();
			deletebtn1.enable();
			deletebtn2.enable();
			replybtn.enable();
			sendbtn.disable();
		} else if(action == 'reply') {
			var msg = bodyMsg.getValue();
			bodyMsg.setValue('<br><br><br><qoute style="margin-left: 10px; padding-left: 10px; border-left: solid 3px #cccccc; display: block;">' + msg + '</quote>');
			bodyMsg.setReadOnly(false);
			sendbtn.enable();
			patientCombo.hide();
			patientField.show();
		}
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.storeMsgs.load();
		callback(true);
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 3/16/12
 * Time: 9:09 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.areas.FloorPlan', {
	id       : 'panelAreaFloorPlan',
	extend   : 'App.classes.RenderPanel',
	pageTitle: i18n['area_floor_plan'],
	floorPlanId:null,
	initComponent: function() {
		var me = this;
		me.floorPlanZonesStore = Ext.create('App.store.administration.FloorPlanZones');

		me.floorPlan = Ext.create('Ext.panel.Panel',{
			title: i18n['floor_plans'],
			layout:'absolute',
			tbar:[
				'->',
				{
					xtype:'floorplanareascombo',
					fieldLabel: i18n['area'],
					labelWidth:40,
					listeners:{
						scope:me,
						select:me.onFloorPlanSelect
					}
				}
			],
			tools:[
				{
			        type: 'refresh',
					scope:me,
			        handler: me.setZones
				}
			]
		});

		me.pageBody = [ me.floorPlan ];

		me.callParent(arguments);
	},


	loadZone:function(record){
		var me = this, zone, form;
		zone = Ext.create('Ext.button.Split', {
		    text:record.data.title,
			scale:'medium',
			x:record.data.x,
			y:record.data.y,
			itemId:record.data.id,
			scope:me,
			handler:me.onZoneClicked,
			// --->
			// Zone specific reference data
			pid:null,
			zoneId:record.data.id,
			priority:null,
			patientZoneId:null,
			// <---
			menu:[
				form = Ext.create('Ext.form.Panel',{
					bodyPadding:'5 5 0 5',
					items:[
						{
							xtype:'textfield',
							fieldLabel: i18n['patient_name'],
							labelWidth:80,
							name:'patient_name'
						},
						{
							xtype:'button',
							text: i18n['remove_patient'],
							handler:function(){
								me.unSetZone(zone);
							}
						}
					]
				})
			],
			tooltip: i18n['patient_name'] + ': [empty]',
			listeners:{
				scope:me,
				render:me.initializeZone
//				menushow:me.afterMenuShow,
//				menuhide:me.afterMenuHide
			}
		});
		//zone.update({title:record.data.title});
		me.floorPlan.add(zone);
		form.getForm().loadRecord(record);
	},

	onZoneClicked:function(btn){
		say(btn);
		app.setPatient(btn.data.pid, btn.data.name, function(){
			btn.data.eid ? app.openEncounter(btn.data.eid) : app.openPatientSummary();
		});
	},

	onFloorPlanSelect:function(field, record){
		var me = this;
		me.floorPlanId = record[0].data.id;
		me.loadZones(function(){
			me.setZones();
		});
	},

	loadZones:function(callback){
		var me = this;
		me.floorPlan.removeAll();
		me.floorPlanZonesStore.load({
			params:{ floor_plan_id:this.floorPlanId },
			scope:me,
			callback:function(records, operation, success){
				for(var i=0; i < records.length; i++){
					me.loadZone(records[i]);
				}
				callback();
			}
		});
	},

	initializeZone: function(panel) {
		var me = this;
		panel.dragZone = Ext.create('Ext.dd.DragZone', panel.getEl(), {
			ddGroup    : 'patientPoolAreas',
			getDragData: function(e) {
				var sourceEl = panel.btnEl.dom, d;
				if(sourceEl) {
					d = sourceEl.cloneNode(true);
					d.id = Ext.id();
					return panel.dragData = {
								sourceEl: sourceEl,
								repairXY: Ext.fly(sourceEl).getXY(),
								ddel    : d,
								patientData : panel.data,
								zone: panel
					};
				}
			},
			getRepairXY: function(e) {
				return this.dragData.repairXY;
			},
			b4MouseDown: function(e) {
		        this.autoOffset(e.getPageX(), e.getPageY());
		    }
		});

		panel.dragZone.lock();

		panel.dropZone = Ext.create('Ext.dd.DropZone', panel.getEl(), {
			ddGroup   : 'patientPoolAreas',
			notifyOver: function(dd, e, data) {
				if(panel.pid == null) {
					return Ext.dd.DropZone.prototype.dropAllowed;
				}else{
					return Ext.dd.DropZone.prototype.dropNotAllowed;
				}
			},
			notifyDrop: function(dd, e, data) {
				panel.data = data.patientData;
				if(data.zone){
					me.unAssignPatient(data.zone, panel.data);
				}
				me.assignPatient(panel, panel.data);
			}
		});
	},

	assignPatient:function(zone, data){
		var me = this,
			params = {
				zone_id:zone.zoneId,
				pid:data.pid
			};
		FloorPlans.setPatientToZone(params,function(provider, response){
			data.patientZoneId = response.result.data.patientZoneId;
			me.msg('Sweet!', data.name + i18n['successfully_moved'] + '.');
			me.setZone(zone, data);
		});
	},

	unAssignPatient:function(zone, data){
		var me = this;
		FloorPlans.unSetPatientZoneByPatientZoneId(data.patientZoneId,function(){
			me.unSetZone(zone)
		});
	},

	setZone:function(zone, data){
		zone.pid = data.pid;
		zone.priority = data.priority;
		zone.patientZoneId = data.patientZoneId;
		zone.dropZone.lock();
		zone.dragZone.unlock();
		zone.setTooltip( i18n['patient_name'] + ':' + data.name);
		zone.addCls(data.priority);
	},

	unSetZone:function(zone){
		zone.pid = null;
		zone.data = null;
		zone.dropZone.unlock();
		zone.dragZone.lock();
		zone.setTooltip( i18n['patient_name'] + ': [empty]');
		zone.removeCls(zone.priority);
	},

	setZones:function(){
		var me = this, zone, zones, data;
		FloorPlans.getPatientsZonesByFloorPlanId(me.floorPlanId, function(provider, response){
			zones = me.floorPlan.items.items;
			data = response.result;

			for(var j=0; j < zones.length; j++){
				me.unSetZone(zones[j]);
			}

			for(var i=0; i < data.length; i++){
				zone = me.floorPlan.getComponent(data[i].zoneId);
				zone.data = data[i];
				me.setZone(zone, data[i]);
			}
		})
	},

	setFloorPlan:function(floorPlanId){

	},

	onActive: function(callback) {
		var me = this;
		if(me.floorPlanId == null){
			me.floorPlanId = 1;
			me.floorPlan.query('floorplanareascombo')[0].setValue(me.floorPlanId);
			me.loadZones(function(){
				me.setZones();
			});
		}else{
			me.setZones();
		}
		callback(true);
	}

});
/**
 * Created by JetBrains PhpStorm.
 * User: ernesto
 * Date: 3/16/12
 * Time: 9:09 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.areas.PatientPoolDropZone', {
	id       : 'panelPoolArea',
	extend   : 'App.classes.RenderPanel',
	pageTitle: i18n['patient_pool_areas'],
	initComponent: function() {
		var me = this;
		me.pageBody = Ext.create('Ext.container.Container', {
			defaults: {
				flex  : 1,
				margin: 5,
				frame : false
			},
			layout  : {
				type : 'hbox',
				align: 'stretch'
			}
		});
		me.listeners = {
			beforerender: me.getPoolAreas
		};
		me.callParent(arguments);
	},

	onPatientDrop: function(node, data, overModel, dropPosition, eOpts) {
		var name = (data.records[0].data) ? data.records[0].data.name : data.records[0].name,
			pid = (data.records[0].data) ? data.records[0].data.pid : data.records[0].pid,
			params;
		app.msg('Sweet!', name + ' ' + i18n['sent_to'] + ' ' + this.panel.title);
		params = {
			pid   : pid,
			sendTo: this.panel.action
		};

		PoolArea.sendPatientToPoolArea(params, function() {
			app.unsetPatient();
			Ext.getCmp('panelPoolArea').reloadStores();
		});


	},

	getPoolAreas: function() {
		var me = this,
			panel = me.getPageBody().down('container'),
            areas;
		me.stores = [];
		PoolArea.getActivePoolAreas(function(provider, response) {
            areas = response.result;
            for(var i=0; i < areas.length; i++ ){
				var store = Ext.create('Ext.data.Store', {
					model: 'App.model.areas.PoolDropAreas',
					proxy: {
						type       : 'direct',
						api        : {
							read: PoolArea.getPoolAreaPatients
						},
						extraParams: {
							area_id: areas[i].id
						}
					}
				});
				me.stores.push(store);
				panel.add({
					xtype      : 'grid',
					title      : areas[i].title,
					action     : areas[i].id,
					store      : store,
					floorPlanId: areas[i].floor_plan_id,
					columns    : [
						{
							header   : i18n['record'] + ' #',
							width    : 100,
							dataIndex: 'pid'
						},
						{
							header   : i18n['patient_name'],
							flex     : 1,
							dataIndex: 'name'
						}
					],
					viewConfig: {
						loadMask : false,
						plugins  : {
							ptype    : 'gridviewdragdrop',
							dragGroup: 'patientPoolAreas',
							dropGroup: 'patientPoolAreas'
						},
						listeners: {
							//scope:me,
							drop: me.onPatientDrop
						}
					},
					listeners : {
						scope       : me,
						itemdblclick: me.onPatientDblClick
					}
				})

			}
		});
	},

	onPatientDblClick: function(store, record) {
		var data = record.data;
		// TODO: set priority
		app.setPatient(data.pid, data.name, function() {
			app.openPatientSummary();
		});
	},

	reloadStores: function() {
        if(this.stores){
	        for(var i=0; i < this.stores.length; i++ ){
	            this.stores[i].load();
	        }
        }
	},

	onActive: function(callback) {
		this.reloadStores();
		callback(true);
	}

});
/**
 * Created with JetBrains PhpStorm.
 * User: erodriguez
 * Date: 4/13/12
 * Time: 3:38 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.charts.BPPulseTemp', {
    extend       : 'Ext.container.Container',
    layout       : {
        type : 'vbox',
        align: 'stretch'
    },
    style        : 'background-color:#fff',
    defaults     : {
        xtype : 'panel',
        layout: 'fit',
        flex  : 1
    },
    initComponent: function() {
        var me = this;

        me.items = [
            {
                title : i18n['blood_pressure'],
                margin: 5,
                items : [
                    {
                        xtype  : 'chart',
                        style  : 'background:#fff',
                        store  : me.store,
                        animate: false,
                        shadow : true,
                        legend: {
                            position: 'right'
                        },
                        axes   : [
                            {
                                title   : i18n['blood_pressure'],
                                type    : 'Numeric',
                                position: 'left',
                                fields  : ['bp_systolic', 'bp_diastolic', 'bp_systolic_normal', 'bp_diastolic_normal'],
                                grid    : {
                                    odd: {
                                        opacity       : 1,
                                        stroke        : '#bbb',
                                        'stroke-width': 0.5
                                    }
                                }
                            },
                            {
                                title     : i18n['date'],
                                type      : 'Time',
                                dateFormat: 'Y-m-d h:i:s a',
                                position  : 'bottom',
                                fields    : ['date']
                            }
                        ],
                        series : [
                            {
                                title       : i18n['systolic'],
                                type        : 'line',
                                axis        : 'left',
                                xField      : 'date',
                                yField      : 'bp_systolic',
                                smooth      : true,
                                highlight   : {
                                    size  : 10,
                                    radius: 10
                                },
                                markerConfig: {
                                    type          : 'circle',
                                    size          : 5,
                                    radius        : 5,
                                    'stroke-width': 0
                                },
                                tips        : {
                                    trackMouse: true,
                                    renderer  : function(storeItem, item) {
                                        this.update('Date: ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>Systolic: ' + storeItem.get('bp_systolic'));
                                    }
                                }
                            },
                            {
                                title       : i18n['diastolic'],
                                type        : 'line',
                                axis        : 'left',
                                xField      : 'date',
                                yField      : 'bp_diastolic',
                                smooth      : true,
                                highlight   : {
                                    size  : 5,
                                    radius: 5
                                },
                                markerConfig: {
                                    type          : 'cross',
                                    size          : 5,
                                    radius        : 5,
                                    'stroke-width': 0
                                },
                                tips        : {
                                    trackMouse: true,
                                    renderer  : function(storeItem, item) {
                                        this.update(i18n['date'] + ': ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>' + i18n['diastolic'] + ': ' + storeItem.get('bp_diastolic'));
                                    }
                                }

                            },
//                            {
//                                type     : 'area',
//                                highlight: true,
//                                axis     : 'left',
//                                xField   : 'date',
//                                yField   : ['bp_diastolic_normal', 'bp_systolic_normal'],
//                                style    : {
//                                    opacity: 0.93
//                                }
//                            },
                            {
                                type       : 'line',
                                showMarkers: false,
                                axis       : 'left',
                                xField     : 'date',
                                yField     : 'bp_diastolic_normal',
                                style      : {
                                    stroke        : '#000000',
                                    'stroke-width': 1
                                }
                            },
                            {
                                type       : 'line',
                                showMarkers: false,
                                axis       : 'left',
                                xField     : 'date',
                                yField     : 'bp_systolic_normal',
                                style      : {
                                    stroke        : '#000000',
                                    'stroke-width': 1
                                }
                            }
                        ]
                    }
                ]
            },
            {
                title : 'Pulse',
                margin: '0 5 5 5',
                items : [
                    {
                        xtype  : 'chart',
                        style  : 'background:#fff',
                        store  : me.store,
                        animate: false,
                        shadow : true,
                        legend: {
                            position: 'right'
                        },
                        axes   : [
                            {
                                title   : i18n['pulse_per_min'],
                                type    : 'Numeric',
                                position: 'left',
                                fields  : ['pulse'],
                                grid    : {
                                    odd: {
                                        opacity       : 1,
                                        stroke        : '#bbb',
                                        'stroke-width': 0.5
                                    }
                                }
                            },
                            {
                                title     : i18n['date'],
                                type      : 'Time',
                                dateFormat: 'Y-m-d h:i:s a',
                                position  : 'bottom',
                                fields    : ['date']

                            }
                        ],
                        series : [
                            {
                                title       : i18n['pulse'],
                                type        : 'line',
                                axis        : 'left',
                                xField      : 'date',
                                yField      : 'pulse',
                                smooth      : true,
                                highlight   : {
                                    size  : 10,
                                    radius: 10
                                },
                                markerConfig: {
                                    type          : 'circle',
                                    size          : 5,
                                    radius        : 5,
                                    'stroke-width': 0
                                },
                                tips        : {
                                    trackMouse: true,
                                    renderer  : function(storeItem, item) {
                                        this.update(i18n['date'] + ': ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>' + i18n['pulse_per_min'] + ': ' + storeItem.get('pulse'));
                                    }
                                }
                            }
                        ]
                    }
                ]
            },
            {
                title : i18n['temperature'],
                margin: '0 5 5 5',
                items : [
                    {

                        xtype  : 'chart',
                        store  : me.store,
                        animate: false,
                        shadow : true,
                        legend: {
                            position: 'right'
                        },
                        axes   : [
                            {
                                title   : i18n['temp_fahrenheits'],
                                type    : 'Numeric',
                                position: 'left',
                                fields  : ['temp_f'],
                                grid    : {
                                    odd: {
                                        opacity       : 1,
                                        stroke        : '#bbb',
                                        'stroke-width': 0.5
                                    }
                                }
                            },
                            {
                                title     : i18n['date'],
                                type      : 'Time',
                                dateFormat: 'Y-m-d h:i:s a',
                                position  : 'bottom',
                                fields    : ['date']

                            }
                        ],
                        series : [
                            {
                                title       : i18n['temp_fahrenheits'],
                                type        : 'line',
                                axis        : 'left',
                                xField      : 'date',
                                yField      : 'temp_f',
                                smooth      : true,
                                highlight   : {
                                    size  : 10,
                                    radius: 10
                                },
                                markerConfig: {
                                    type          : 'circle',
                                    size          : 5,
                                    radius        : 5,
                                    'stroke-width': 0
                                },
                                tips        : {
                                    trackMouse: true,
                                    renderer  : function(storeItem, item) {
                                        this.update(i18n['date'] + ': ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>' + i18n['temp_fahrenheits'] + ': ' + storeItem.get('temp_f'));
                                    }
                                }
                            }
                        ]
                    }
                ]
            }

        ];

        me.callParent(arguments);

    }
});
/**
 * Created with JetBrains PhpStorm.
 * User: erodriguez
 * Date: 4/13/12
 * Time: 3:38 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.charts.HeadCircumference',{
    extend:'Ext.panel.Panel',
   	layout:'fit',
   	margin:5,
	initComponent:function(){
		var me = this;

		me.items = [
			{
                xtype  : 'chart',
                store  : me.store,
                animate: false,
                shadow : false,
                legend: {
                    position: 'right'
                },
                axes   : [
                    {
                        title         : me.xTitle,
                        type          : 'Numeric',
                        position      : 'left',
                        fields        : ['PP','P3','P5','P10','P25','P50','P75','P90','P95','P97'],
                        grid          : {
                            odd: {
                                opacity       : 1,
                                stroke        : '#bbb',
                                'stroke-width': 0.5
                            }
                        },
                        minimum       : me.xMinimum,
                        maximum       : me.xMaximum
                    },
                    {
                        title         : me.yTitle,

                        type          : 'Numeric',
                        position      : 'bottom',
                        fields        : ['age'],
                        minimum       : me.yMinimum,
                        maximum       : me.yMaximum
                    }
                ],
                series : [
                    {
                        title       : i18n['circumference_cm'],
                        type        : 'scatter',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'PP',
                        smooth      : true,
                        highlight   : {
                            size  : 10,
                            radius: 10
                        },
                        markerConfig: {
                            type          : 'circle',
                            size          : 5,
                            radius        : 5,
                            'stroke-width': 0
                        },
                        tips: {
                            trackMouse: true,
                            renderer: function(storeItem, item) {
                                this.update( me.yTitle + ' : ' + storeItem.get('age') + '<br>'+ me.xTitle +': ' + storeItem.get('PP'));
                            }
                        }
                    },
                    {
                        title       : '97%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P97',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '95%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P95',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '75%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P75',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '50%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P50',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 3,
                            opacity: 0.5
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 4
                        }
                    },
                    {
                        title       : '25%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P25',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '10%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P10',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '5%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P5',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '3%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'age',
                        yField      : 'P3',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    }
                ]
			}

		];

		me.callParent(arguments);

	}
});
/**
 * Created with JetBrains PhpStorm.
 * User: erodriguez
 * Date: 4/13/12
 * Time: 3:38 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.charts.HeightForStature', {
    extend: 'Ext.panel.Panel',
    layout: 'fit',
    margin: 5,
    title : i18n['weight_for_age'],

    initComponent: function() {
        var me = this;

        me.items = [
            {

                xtype  : 'chart',
                store  : me.store,
                animate: false,
                shadow : false,
                legend : {
                    position: 'right'
                },
                axes   : [
                    {
                        title   : i18n['weight_kg'],
                        type    : 'Numeric',
                        position: 'left',
                        fields  : ['PP', 'P3', 'P5', 'P10', 'P25', 'P50', 'P75', 'P85', 'P90', 'P95', 'P97'],
                        grid    : {
                            odd: {
                                opacity       : 1,
                                stroke        : '#bbb',
                                'stroke-width': 0.5
                            }
                        }
                        //minimum : 7,
                        //maximum : 31
                    },
                    {
                        title   : i18n['length_cm'],
                        type    : 'Numeric',
                        position: 'bottom',
                        fields  : ['height']
                        //minimum : 77,
                        //maximum : 121.5
                    }
                ],
                series : [
                    {
                        title       : i18n['weight_kg'],
                        type        : 'scatter',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'PP',
                        smooth      : true,
                        highlight   : {
                            size  : 10,
                            radius: 10
                        },
                        markerConfig: {
                            type          : 'circle',
                            size          : 5,
                            radius        : 5,
                            'stroke-width': 0
                        },
                        tips        : {
                            trackMouse: true,
                            renderer  : function(storeItem, item) {
                                this.update( i18n['length_cm'] + ': ' + storeItem.get('height') + '<br>' + i18n['weightArray'] + ': ' + storeItem.get('PP'));
                            }
                        }
                    },
                    {
                        title       : '97%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P97',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '95%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P95',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '85%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P85',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '75%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P75',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '50%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P50',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 3,
                            opacity: 0.5
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 4
                        }
                    },
                    {
                        title       : '25%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P25',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '10%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P10',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '5%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P5',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    },
                    {
                        title       : '3%',
                        type        : 'line',
                        axis        : 'left',
                        xField      : 'height',
                        yField      : 'P3',
                        smooth      : true,
                        showMarkers : false,
                        style: {
                            stroke: '#000000',
                            'stroke-width': 1,
                            opacity: 0.3
                        },
                        highlight: {
                            stroke: '#FF9900',
                            size: 2
                        }
                    }
                ]
            }

        ];

        me.callParent(arguments);

    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: GaiaEHR
 * Date: 3/23/12
 * Time: 2:06 AM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.encounter.CurrentProceduralTerminology', {
    extend:'Ext.panel.Panel',
    alias:'widget.currentproceduralterminology',
    autoScroll:true,
    border:false,
    bodyBorder:false,
    bodyPadding:5,
    bodyStyle: 'background-color:#fff',
    layout:'border',
    pid:null,
    eid:null,
    initComponent:function () {
        var me = this;


        me.referenceCptStore = Ext.create('App.store.patient.QRCptCodes');

        me.encounterCptStore = Ext.create('Ext.data.Store', {
            model:'App.model.patient.CptCodes',
            autoSync:true,
            listeners:{
                scope:me,
                beforesync:me.beforesync
            }
        });


        me.cptFormEdit = Ext.create('App.classes.grid.RowFormEditing', {
            autoCancel:false,
            errorSummary:false,
            clicksToEdit:1,
            enableRemove:true,
            formItems:[
                {
                    fieldLabel: i18n['full_description'],
                    xtype:'displayfield',
                    name:'code_text',
                    anchor:'100%'
                },
                {
                    xtype:'container',
                    layout:'column',
                    items:[
                        {
                            xtype:'fieldcontainer',
                            layout:'anchor',
                            columnWidth:.5,
                            margin:'0 3 0 0',
                            defaults:{ xtype:'textfield' },
                            items:[
                                {
                                    fieldLabel: i18n['place_of_service'],
                                    name:'place_of_service',
                                    anchor:'100%'
                                },
                                {
                                    xtype:'checkbox',
                                    labelWidth:105,
                                    fieldLabel: i18n['emergency'] + '?',
                                    name:'emergency'
                                },
                                {
                                    fieldLabel: i18n['charges'],
                                    name:'charge',
                                    anchor:'100%'
                                }
                            ]
                        },
                        {
                            xtype:'fieldcontainer',
                            layout:'anchor',
                            columnWidth:.5,
                            margin:'0 0 0 3',
                            defaults:{ xtype:'textfield', anchor:'100%', labelWidth:110 },
                            items:[
                                {
                                    fieldLabel: i18n['days_of_units'],
                                    name:'days_of_units'
                                },
                                {
                                    fieldLabel: i18n['essdt_fam_plan'],
                                    name:'essdt_plan'
                                },
                                {
                                    fieldLabel: i18n['modifiers'],
                                    xtype:'livecptsearch',
                                    hideLabel:false,
                                    name:'modifiers'
                                }

                            ]
                        }

                    ]
                },
                {
                    xtype:'liveicdxsearch',
                    fieldLabel: i18n['diagnosis'],
                    hideLabel:false,
                    name:'diagnosis'
                }
            ],
            listeners:{
                scope:me,
                afterremove:me.onCompleteRemove
            }
        });

        me.items = [
            {
                xtype:'panel',
                title: i18n['cpt_search'],
                itemId:'leftCol',
                region:'west',
                width:450,
                hidden:true,
                titleCollapse:true,
                margin:'0 5 0 0',
                bodyStyle:'background-color:#fff',
                layout:{
                    type:'vbox',
                    align:'stretch',
                    padding:5
                },
                items:[
                    {
                        xtype:'fieldset',
                        title: i18n['cpt_quick_reference_options'],
                        padding:'10 15',
                        margin:'0 0 3 0',
                        layout:'anchor',
                        items:{
                            xtype:'combobox',
                            anchor:'100%',
                            editable:false,
                            queryMode:'local',
                            valueField:'value',
                            displayField:'name',
                            store:Ext.create('Ext.data.Store', {
                                fields:['name', 'value'],
                                data:[
                                    { name: i18n['show_related_cpt_for_current_diagnostics'], value:0 },
                                    { name: i18n['show_cpt_history_for_this_patient'], value:1 },
                                    { name: i18n['show_cpt_commonly_used_by_clinic'], value:2 }
                                ]
                            }),
                            listeners:{
                                scope:me,
                                change:me.onQuickReferenceOption
                            }
                        }
                    },
                    Ext.create('Ext.ux.LiveSearchGridPanel', {
                        margins:0,
                        flex:1,
                        store:me.referenceCptStore,
                        viewConfig:{
                            copy:true,
                            stripRows:true,
                            loadMask:true,
                            plugins:[
                                {
                                    ptype:'gridviewdragdrop',
                                    dragGroup:'CPTGridDDGroup'
                                }
                            ]
                        },
                        columns:[
                            {
                                text: i18n['code'],
                                width:70,
                                sortable:true,
                                dataIndex:'code'
                            },
                            {
                                text: i18n['description'],
                                flex:1,
                                sortable:true,
                                dataIndex:'code_text_medium'
                            }
                        ]
                    })
                ],
                listeners:{
                    scope:me,
                    collapse:me.onQuickReferenceCollapsed
                }
            },
            {
                xtype:'panel',
                title: i18n['encounter_cpts'],
                region:'center',
                itemId:'rightCol',
                bodyStyle:'background-color:#fff',
                layout:{
                    type:'vbox',
                    align:'stretch',
                    padding:5
                },
                items:[
                    {
                        xtype:'fieldset',
                        title: i18n['cpt_live_sarch'],
                        padding:'10 15',
                        margin:'0 0 3 0',
                        layout:'anchor',
                        items:{
                            xtype:'livecptsearch',
                            listeners:{
                                scope:me,
                                select:me.onLiveCptSelect
                            }
                        }

                    },
                    {
                        xtype:'grid',
                        flex:1,
                        margins:0,
                        store:me.encounterCptStore,
                        columns:[
                            {
                                text: i18n['code'],
                                width:70,
                                sortable:true,
                                dataIndex:'code'
                            },
                            {
                                text: i18n['description'],
                                flex:1,
                                sortable:true,
                                dataIndex:'code_text'
                            },
                            {
                                text: i18n['status'],
                                width:50,
                                sortable:true,
                                dataIndex:'status',
                                renderer:me.status
                            }
                        ],
                        tbar:[
                            {
                                text: i18n['quick_reference'],
                                action:'referenceCptBtn',
                                enableToggle:true,
                                scope:me,
                                toggleHandler:me.onQuickReferenceToggle
                            },
                            '->',
                            {
                                text: i18n['reload'],
                                handler: function(){
                                    me.encounterCptStoreLoad(null);
                                }
                            }
                        ],
                        viewConfig:{
                            itemId:'view',
                            plugins: {
                                ptype:'gridviewdragdrop',
                                dropGroup:'CPTGridDDGroup'

                            },
                            listeners:{
                                scope:me,
                                drop:me.onCptDropped
                            }
                        },
                        plugins:me.cptFormEdit

                    }
                ]

            }
        ];


        me.callParent(arguments);

    },


    status:function(val){
        if(val == '0') {
            return '<img style="padding-left: 10px" src="resources/images/icons/no.gif" />';
        } else if(val == '1') {
            return '<img style="padding-left: 10px" src="resources/images/icons/yes.gif" />';
        } else if(val == '2') {
            return '<img style="padding-left: 10px" src="resources/images/icons/icohelp.png" />';
        }
        return val;
    },

    onQuickReferenceCollapsed:function () {
        var btn = this.query('button[action="referenceCptBtn"]');
        if (btn[0].pressed) {
            btn[0].toggle(false);
        }
    },

    onQuickReferenceToggle:function (btn, pressed) {
        if (pressed) {
            this.getComponent('leftCol').show();
        } else {
            this.getComponent('leftCol').hide();
        }

    },

    onQuickReferenceOption:function (combo, value) {
        this.loadCptQuickReferenceGrid(value);
    },


    onCompleteRemove:function () {
        app.msg('Sweet!', i18n['cpt_removed_from_this_encounter']);
    },

    onLiveCptSelect:function (btn, record) {
        var me = this;
        btn.reset();
	    delete record[0].data.id;
	    record[0].data.eid = me.eid;
        me.encounterCptStore.add(record[0].data);

    },

    loadCptQuickReferenceGrid:function (filter) {
        this.referenceCptStore.load({params:{pid:this.pid, eid:this.eid, filter:filter}});
    },

    beforesync:function(options){
        if(options.create){
            options.create[0].data.eid = this.eid;
        }
    },

    onCptDropped:function(node, data, dropRecord, dropPosition, dropFunction){
        app.msg('Sweet!', i18n['cpt_added_to_this_encounter']);
        this.cptFormEdit.cancelEdit();
        var store = dropRecord.store,
            dropIndex = store.indexOf(dropRecord),
            index = dropPosition == 'before' ? dropIndex - 1  : dropIndex + 1;


        this.cptFormEdit.startEdit(index, 0)
    },

    setDefaultQRCptCodes:function(){
        var combo = this.down('combobox');
        if (combo.getValue() != 1) {
            combo.setValue(1);
        } else {
            this.loadCptQuickReferenceGrid(1);
        }
    },

    encounterCptStoreLoad:function(pid, eid, callback){
        this.pid = pid ? pid : this.pid;
        this.eid = eid ? eid : this.eid;
        this.encounterCptStore.proxy.extraParams = {eid:this.eid, filter:null};
        this.encounterCptStore.load({
            callback:function(){
                callback ? callback() : null;
            }
        });
    }


});
/**
 * Created by JetBrains PhpStorm.
 * User: GaiaEHR
 * Date: 3/23/12
 * Time: 2:06 AM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.encounter.HealthCareFinancingAdministrationOptions', {
    extend:'Ext.form.Panel',
    alias:'widget.hcafaoptions',
    mixins: {
        functions: 'App.classes.AbstractPanel'
    },
    pid:null,
    eid:null,
    initComponent:function () {
        var me = this;


        me.listeners = {
            afterrender:me.afterPanelRender
        };
        me.callParent(arguments);
    },

    afterPanelRender:function(){
        this.mixins.functions.getFormItems(this, 10);
    }

});
/**
 * Created by JetBrains PhpStorm.
 * User: GaiaEHR
 * Date: 3/23/12
 * Time: 2:06 AM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.encounter.ICDs', {
    extend:'Ext.form.FieldSet',
    alias:'widget.icdsfieldset',
    title: i18n['icds_live_search'],
    padding:'10 15',
    margin:'0 0 3 0',
    layout:'anchor',
	requires: [ 'App.classes.LiveICDXSearch' ],
    initComponent:function () {
        var me = this;

        Ext.define('Ext.ux.CustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.customtrigger',
            hideLabel    : true,
            triggerTip: i18n['click_to_clear_selection'],
            qtip: i18n['clearable_combo_box'],
            trigger1Class:'x-form-select-trigger',
            trigger2Class:'x-form-clear-trigger',

            onTriggerClick: function() {
                this.destroy();
            },

            onRender:function (ct, position) {
                this.callParent(arguments);
                var id = this.getId();
                this.triggerConfig = {
                    tag:'div', cls:'x-form-twin-triggers', style:'display:block;', cn:[
                        {tag:"img", style:Ext.isIE ? 'margin-left:0;height:21px' : '', src:Ext.BLANK_IMAGE_URL, id:"trigger2" + id, name:"trigger2" + id, cls:"x-form-trigger " + this.trigger2Class}
                    ]};
                this.triggerEl.replaceWith(this.triggerConfig);
                this.triggerEl.on('mouseup', function () {
                        this.onTriggerClick()
                    },
                    this);
                var trigger2 = Ext.get("trigger2" + id);
                trigger2.addClsOnOver('x-form-trigger-over');
            }
        });

        me.items = [
            {
                xtype:'liveicdxsearch',
                itemId:'liveicdxsearch',
                emptyText:me.emptyText,
                name:'icdxCodes',
                listeners:{
                    scope:me,
                    select:me.onLiveIcdSelect,
                    blur:function(field){
                        field.reset();
                    }
                }
            },
            {
                xtype:'container',
                itemId:'idcsContainer',
                action:'idcsContainer'
                //manageOverflow:1
            }

        ];

        me.callParent(arguments);

    },

    onLiveIcdSelect:function(field, model){
        this.addIcd(model[0].data.code, model[0].data.code_text);
        field.reset();
    },


    removeIcds:function(){
        this.getIcdContainer().removeAll();
    },

    loadIcds:function(records){
        var me = this,
            field = me.getIcdLiveSearch();
        me.removeIcds();
        for(var i=0; i < records.length; i++){
            me.addIcd(records[i].code, records[i].long_desc);
        }
        field.reset();
    },

    addIcd:function(code, toolTip){
        this.getIcdContainer().add({
            xtype:'customtrigger',
            value:code,
            width:100,
            style:'float:left',
            margin:'0 5 0 0',
            name:'icdxCodes',
            listeners:{
                afterrender:function(btn){
                    Ext.create('Ext.tip.ToolTip', {
                        target: btn.id,
                        html: toolTip
                    });
                    btn.setEditable(false);
                }
            }
        });
    },

    getIcdContainer:function(){
        return this.getComponent('idcsContainer');
    },

    getIcdLiveSearch:function(){
        return this.getComponent('liveicdxsearch');
    }

});
/**
 * Created with JetBrains PhpStorm.
 * User: Plushy
 * Date: 7/6/12
 * Time: 5:54 PM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.ItemsToReview', {
    extend       : 'Ext.panel.Panel',
    alias        : 'widget.itemstoreview',
    layout       : 'column',
    frame        : true,
    bodyPadding  : 5,
    bodyBorder   : true,
    bodyStyle    : 'background-color:white',
    eid          : null,
    initComponent: function() {
        var me = this;
        me.patientImmuListStore = Ext.create('App.store.patient.PatientImmunization');
        me.patientAllergiesListStore = Ext.create('App.store.patient.Allergies');
        me.patientMedicalIssuesStore = Ext.create('App.store.patient.MedicalIssues');
        me.patientSurgeryStore = Ext.create('App.store.patient.Surgery');
        me.patientDentalStore = Ext.create('App.store.patient.Dental');
        me.patientMedicationsStore = Ext.create('App.store.patient.Medications');

        me.column1 = Ext.create('Ext.container.Container', {
            columnWidth: 0.3333,
            defaults   : {
                xtype : 'grid',
                margin: '0 5 5 0'
            },
            items      : [
                {
                    title  : i18n['immunizations'],
                    frame  : true,
                    height : 180,
                    store  : me.patientImmuListStore,
                    columns: [
                        {
                            header   : i18n['immunization'],
                            width    : 250,
                            dataIndex: 'immunization_name'
                        },
                        {
                            header   : i18n['date'],
                            width    : 90,
                            xtype    : 'datecolumn',
                            format   : 'Y-m-d',
                            dataIndex: 'administered_date'
                        },
                        {
                            header   : i18n['notes'],
                            flex     : 1,
                            dataIndex: 'note'
                        }
                    ]
                },
                {
                    title  : i18n['allergies'],
                    frame  : true,
                    height : 180,
                    store  : me.patientAllergiesListStore,
                    columns: [
                        {
                            header   : i18n['type'],
                            width    : 100,
                            dataIndex: 'allergy_type'
                        },
                        {
                            header   : i18n['name'],
                            width    : 100,
                            dataIndex: 'allergy'
                        },
                        {
                            header   : i18n['severity'],
                            flex     : 1,
                            dataIndex: 'severity'
                        }
                    ]
                }
            ]
        });

        me.column2 = Ext.create('Ext.container.Container', {
            columnWidth: 0.3333,
            defaults   : {
                xtype : 'grid',
                margin: '0 5 5 0'
            },
            items      : [
                {
                    title  : i18n['active_problems'],
                    frame  : true,
                    height : 180,
                    store  : me.patientMedicalIssuesStore,
                    columns: [
                        {
                            header   : i18n['problem'],
                            width    : 250,
                            dataIndex: 'code'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['begin_date'],
                            width    : 90,
                            format   : 'Y-m-d',
                            dataIndex: 'begin_date'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['end_date'],
                            flex     : 1,
                            format   : 'Y-m-d',
                            dataIndex: 'end_date'
                        }
                    ]
                },
                {
                    title  : i18n['surgery'],
                    frame  : true,
                    height : 180,
                    store  : me.patientSurgeryStore,
                    columns: [
                        {
                            header   : i18n['type'],
                            width    : 250,
                            dataIndex: 'type'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['begin_date'],
                            width    : 90,
                            format   : 'Y-m-d',
                            dataIndex: 'begin_date'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['end_date'],
                            flex     : 1,
                            format   : 'Y-m-d',
                            dataIndex: 'end_date'
                        }
                    ]
                }
            ]
        });

        me.column3 = Ext.create('Ext.container.Container', {
            columnWidth: 0.3333,
            defaults   : {
                xtype : 'grid',
                margin: '0 0 5 0'
            },
            items      : [
                {
                    title  : i18n['dental'],
                    frame  : true,
                    height : 180,
                    store  : me.patientDentalStore,
                    columns: [
                        {
                            header   : i18n['title'],
                            width    : 250,
                            dataIndex: 'title'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['begin_date'],
                            width    : 90,
                            format   : 'Y-m-d',
                            dataIndex: 'begin_date'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['end_date'],
                            flex     : 1,
                            format   : 'Y-m-d',
                            dataIndex: 'end_date'
                        }
                    ]
                },
                {
                    title  : i18n['medications'],
                    frame  : true,
                    height : 180,
                    store  : me.patientMedicationsStore,
                    columns: [
                        {
                            header   : i18n['medication'],
                            width    : 250,
                            dataIndex: 'medication'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['begin_date'],
                            width    : 90,
                            format   : 'Y-m-d',
                            dataIndex: 'begin_date'
                        },
                        {
                            xtype    : 'datecolumn',
                            header   : i18n['end_date'],
                            flex     : 1,
                            format   : 'Y-m-d',
                            dataIndex: 'end_date'
                        }
                    ]
                }
            ]
        });
        me.column4 = Ext.create('Ext.form.Panel', {
            columnWidth: 0.3333,
            border     : false,
            items      : [

                {
                    fieldLabel: i18n['smoking_status'],
                    xtype     : 'mitos.smokingstatuscombo',
                    labelWidth: 100,
                    width     : 325,
                    name      : 'review_smoke'


                },
                {
                    fieldLabel: i18n['alcohol'],
                    xtype     : 'mitos.yesnocombo',
                    labelWidth: 100,
                    width     : 325,
                    name      : 'review_alcohol'


                },
                {
                    fieldLabel: i18n['pregnant'],
                    xtype     : 'mitos.yesnonacombo',
                    labelWidth: 100,
                    width     : 325,
                    name      : 'review_pregnant'


                }

            ]
        });

        me.items = [ me.column1, me.column2, me.column3 , me.column4 ];
        me.buttons = [
            {
                text   : i18n['review_all'],
                name   : 'review',
                scope  : me,
                handler: me.onSave
            }
        ];

        me.listeners = {
            show: me.storesLoad
        };
        me.callParent(arguments);
    },

    storesLoad: function() {
        var me = this;
        me.patientImmuListStore.load({params: {pid: app.patient.pid}});
        me.patientAllergiesListStore.load({params: {pid: app.patient.pid}});
        me.patientMedicalIssuesStore.load({params: {pid: app.patient.pid}});
        me.patientSurgeryStore.load({params: {pid: app.patient.pid}});
        me.patientDentalStore.load({params: {pid: app.patient.pid}});
        me.patientMedicationsStore.load({params: {pid: app.patient.pid}});
        Medical.getEncounterReviewByEid(app.patient.eid, function(provider, response) {
            me.column4.getForm().setValues(response.result);
        });
    },

    onSave: function() {
        var me = this, panel = me.down('form'),
            form = panel.getForm(),
            values = form.getFieldValues(),
            params = { eid:app.patient.eid };
        values.eid = app.patient.eid;
        Medical.reviewAllMedicalWindowEncounter(params, function(provider, response) {

        });
        if(form.isValid()) {
            Encounter.onSaveItemsToReview(values, function(provider, response) {
                if(response.result.success) {
                    app.msg('Sweet!', i18n['items_to_review_save_and_review'])
                } else {
                    app.msg('Oops!', i18n['items_to_review_entry_error'])
                }
            });
        }
    }
});
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.patient.EncounterDocumentsGrid', {
	extend     : 'Ext.grid.Panel',
	alias:'widget.documentsimplegrid',
	title: i18n['documents'],
    split:true,
	initComponent: function() {
		var me = this;

		me.store = Ext.create('App.store.patient.PatientDocuments');
        me.columns = [
            {
                xtype: 'actioncolumn',
                width:26,
                items: [
                    {
	                    icon: 'resources/images/icons/preview.png',
	                    tooltip: i18n['view_document'],
	                    handler: me.onDocumentView,
	                    getClass:function(){
		                    return 'x-grid-icon-padding';
	                    }
                    }
                ]
            },
            {
                header: i18n['type'],
                flex:1,
                dataIndex:'docType'
            }
        ];

		me.callParent(arguments);
	},

	onDocumentView:function(grid, rowIndex){
		var rec = grid.getStore().getAt(rowIndex),
			src = rec.data.url;
		app.onDocumentView(src);
	},

	loadDocs:function(eid){
		this.store.load({params:{eid:eid}})
	}
});
/**
 * Created by JetBrains PhpStorm.
 * User: GaiaEHR
 * Date: 3/23/12
 * Time: 2:06 AM
 * To change this template use File | Settings | File Templates.
 */
Ext.define('App.view.patient.encounter.ICDs', {
    extend:'Ext.form.FieldSet',
    alias:'widget.icdsfieldset',
    title: i18n['icds_live_search'],
    padding:'10 15',
    margin:'0 0 3 0',
    layout:'anchor',
	requires: [ 'App.classes.LiveICDXSearch' ],
    initComponent:function () {
        var me = this;

        Ext.define('Ext.ux.CustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.customtrigger',
            hideLabel    : true,
            triggerTip: i18n['click_to_clear_selection'],
            qtip: i18n['clearable_combo_box'],
            trigger1Class:'x-form-select-trigger',
            trigger2Class:'x-form-clear-trigger',

            onTriggerClick: function() {
                this.destroy();
            },

            onRender:function (ct, position) {
                this.callParent(arguments);
                var id = this.getId();
                this.triggerConfig = {
                    tag:'div', cls:'x-form-twin-triggers', style:'display:block;', cn:[
                        {tag:"img", style:Ext.isIE ? 'margin-left:0;height:21px' : '', src:Ext.BLANK_IMAGE_URL, id:"trigger2" + id, name:"trigger2" + id, cls:"x-form-trigger " + this.trigger2Class}
                    ]};
                this.triggerEl.replaceWith(this.triggerConfig);
                this.triggerEl.on('mouseup', function () {
                        this.onTriggerClick()
                    },
                    this);
                var trigger2 = Ext.get("trigger2" + id);
                trigger2.addClsOnOver('x-form-trigger-over');
            }
        });

        me.items = [
            {
                xtype:'liveicdxsearch',
                itemId:'liveicdxsearch',
                emptyText:me.emptyText,
                name:'icdxCodes',
                listeners:{
                    scope:me,
                    select:me.onLiveIcdSelect,
                    blur:function(field){
                        field.reset();
                    }
                }
            },
            {
                xtype:'container',
                itemId:'idcsContainer',
                action:'idcsContainer'
                //manageOverflow:1
            }

        ];

        me.callParent(arguments);

    },

    onLiveIcdSelect:function(field, model){
        this.addIcd(model[0].data.code, model[0].data.code_text);
        field.reset();
    },


    removeIcds:function(){
        this.getIcdContainer().removeAll();
    },

    loadIcds:function(records){
        var me = this,
            field = me.getIcdLiveSearch();
        me.removeIcds();
        for(var i=0; i < records.length; i++){
            me.addIcd(records[i].code, records[i].long_desc);
        }
        field.reset();
    },

    addIcd:function(code, toolTip){
        this.getIcdContainer().add({
            xtype:'customtrigger',
            value:code,
            width:100,
            style:'float:left',
            margin:'0 5 0 0',
            name:'icdxCodes',
            listeners:{
                afterrender:function(btn){
                    Ext.create('Ext.tip.ToolTip', {
                        target: btn.id,
                        html: toolTip
                    });
                    btn.setEditable(false);
                }
            }
        });
    },

    getIcdContainer:function(){
        return this.getComponent('idcsContainer');
    },

    getIcdLiveSearch:function(){
        return this.getComponent('liveicdxsearch');
    }

});
/**
 * Encounter.ejs.php
 * Encounter Panel
 * v0.0.1
 *
 * Author: Ernesto J. Rodriguez
 * Modified:
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Encounter.getEncounter
 * @namespace Encounter.createEncounter
 * @namespace Encounter.checkOpenEncounters
 * @namespace Encounter.closeEncounter
 * @namespace Encounter.getVitals
 * @namespace Encounter.addVitals
 */
Ext.define('App.view.patient.CheckoutAlertsView', {
	extend           : 'Ext.view.View',
    alias            : 'widget.checkoutalertsview',
	trackOver        : true,
    cls              : 'checkoutalert',
    itemSelector     : 'div.alert-div',
    loadMask         : true,
    singleSelect     : true,
	emptyText        : '<span style="color: #616161; font-size: 12px;">Sweet! ' + i18n['no_alerts_found'] + '.</span>',
	initComponent: function() {
		var me = this;

        me.tpl = '  <table>' +
	        '           <tpl for=".">' +
	        '               <tr class="alert-div>' +
	        '               <div class="alert-div">' +
	        '                   <img class="alert-img" src="{icon}" />' +
	        '                   <div class="alert-msg">{alert}</div>' +
	        '               </div>' +
	        '               </tr>' +
            '           </tpl>' +
	        '       </table>';

		me.callParent(arguments);
	}

});

/**
 * Encounter.ejs.php
 * Encounter Panel
 * v0.0.1
 *
 * Author: Ernesto J. Rodriguez
 * Modified:
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Encounter.getEncounter
 * @namespace Encounter.createEncounter
 * @namespace Encounter.checkOpenEncounters
 * @namespace Encounter.closeEncounter
 * @namespace Encounter.getVitals
 * @namespace Encounter.addVitals
 */
Ext.define('App.view.patient.Vitals', {
	extend           : 'Ext.view.View',
    alias            : 'widget.vitalsdataview',
	trackOver        : true,
    cls              : 'vitals',
    itemSelector     : 'table.vitals-column',
    overItemCls      : 'vitals-column-over',
    selectedItemCls  : 'vitals-column-selected',
    loadMask         : true,
    singleSelect     : true,
	emptyText        : '<div class="view_empty_text"><span>' + i18n['no_vitals_to_display'] + '</span></div>',
	initComponent: function() {
		var me = this;

        me.tpl = '<table>' +
	        '   <tbody>' +
            '       <tr>' +
            '       <tpl for=".">' +
            '           <td>' +
            '               <table class="x-grid-table x-grid-table-vitals vitals-column {[ (values.auth_uid == null || values.auth_uid == 0 ) ? "vitals-column-caution" : ""]}">' +
	        '                   <tbody>' +
            '                       <tr class="x-grid-row">' +
	        '                           <td class="x-grid-cell x-grid-table-vitals-date">' +
	        '                               <div class="x-grid-cell-inner ">{[Ext.Date.format(values.date, "Y-m-d")]}<br>{[Ext.Date.format(values.date, "h:i:s a")]}</div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row first">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.weight_lbs || "-"]}</div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.weight_kg || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.height_in || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.height_cm || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.bp_systolic || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.bp_diastolic || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.pulse || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.respiration || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.temp_f || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.temp_c || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.temp_location ? values.temp_location.toUpperCase() : "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.oxygen_saturation || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.head_circumference_in || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.head_circumference_cm || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.waist_circumference_in || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.waist_circumference_cm || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.bmi || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.bmi_status || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row x-grid-row-alt">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[values.other_notes || "-"]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[(values.administer_by == null || values.administer_by == " ") ? "-" : values.administer_by]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                       <tr class="x-grid-row ">' +
	        '                           <td class="x-grid-cell">' +
	        '                               <div class="x-grid-cell-inner ">{[(values.authorized_by == null || values.authorized_by == " ") ? "-" : values.authorized_by]}<div>' +
	        '                           </td>' +
	        '                       </tr>' +
            '                   </tbody>' +
	        '               </table>' +
	        '           </td>' +
            '       </tpl>' +
            '       </tr>' +
	        '   </tbody>' +
            '</table>';

		me.callParent(arguments);
	}

});

/**
 * NewPatient.Js
 * Patient Layout Panel
 * v0.0.5
 *
 * This panel is generated dinamically, using the values from layout_options
 * Because this panel is dynamically generated, the user can edit or add more
 * fields to this form. To modify this panel you have to work with the
 * layoutEngine.class.php
 *
 * GaiaEHR (Eletronic Health Records) 2011
 *
 * Author   : GI Technologies, 2011
 * Modified : Ernesto J Rodriguez (Certun) 10/25/2011
 */
Ext.define('App.view.patient.NewPatient', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelNewPatient',
	pageTitle    : i18n['patient_entry_form'],
	uses         : [ 'App.classes.PhotoIdWindow' ],
	initComponent: function() {

		var me = this;

		me.formTitle = i18n['demographics'];
		me.formToRender = 1;

		me.form = Ext.create('Ext.form.Panel', {
			title        : me.formTitle,
			bodyStyle    : 'padding: 5px',
			layout       : 'anchor',
			fieldDefaults: { msgTarget: 'side' },
			dockedItems  : {
				xtype: 'toolbar',
				dock : 'top',
				items: [
					{
						text   : i18n['create_new_patient'],
						iconCls: 'save',
						scope  : me,
						handler: me.onSave
					}
				]
			}
		});
		me.pageBody = [ me.form ];

        me.listeners = {
            beforerender:me.beforePanelRender
        };

		me.callParent(arguments);
	},

	onSave: function() {
		var me = this, form, values, date;

		date = me.form.add({
			xtype : 'textfield',
			name  : 'date_created',
			hidden: true,
			value : Ext.Date.format(new Date(), 'Y-m-d H:i:s')
		});

        form = me.form.getForm();
        values = form.getFieldValues();

		if(form.isValid()) {

            Patient.createNewPatient(values, function(provider, response){

                /** @namespace action.result.patient.pid */
                /** @namespace action.result.patient.fullname */

                var pid = response.result.patient.pid,
                    fullname = response.result.patient.fullname;

                if(response.result.success){
                    me.msg('Sweet!', i18n['patient'] + ' "' + fullname + '" ' + i18n['created'] + '... ');
                    app.setPatient(pid, fullname, function(success) {
                        if(success) {
                            app.openPatientSummary();
                        }
                    });
                }else{
                    Ext.Msg.alert('Opps!', i18n['something_went_wrong_saving_the_patient']);
                }

            });
		}

        me.form.remove(date);
	},

	confirmationWin: function(callback) {
		Ext.Msg.show({
			title  : i18n['please_confirm'] + '...',
			msg    : i18n['do_you_want_to_create_a_new_patient'],
			icon   : Ext.MessageBox.QUESTION,
			buttons: Ext.Msg.YESNO,
			scope  : this,
			fn     : function(btn) {
				callback(btn);
			}
		});
	},

    beforePanelRender:function(){
        var me = this;
        me.getFormItems(this.form, this.formToRender, function(formPanel, items){
            var primary = formPanel.getForm().findField('primary_subscriber_relationship');
            primary.on('select', me.copyData, me);
            var secondary = formPanel.getForm().findField('secondary_subscriber_relationship');
            secondary.on('select', me.copyData, me);
            var tertiary = formPanel.getForm().findField('tertiary_subscriber_relationship');
            tertiary.on('select', me.copyData, me);
        });
    },

    copyData:function(combo, records){
        var form = combo.up('form').getForm();
        if(combo.value == 'self'){

            var values = form.getValues(),
                patientData = {
                    primary_subscriber_title:values.title,
                    primary_subscriber_fname:values.fname,
                    primary_subscriber_mname:values.mname,
                    primary_subscriber_lname:values.lname,
                    primary_subscriber_street:values.address,
                    primary_subscriber_city:values.city,
                    primary_subscriber_state:values.state,
                    primary_subscriber_country:values.country,
                    primary_subscriber_zip_code:values.zipcode,
                    primary_subscriber_phone:values.home_phone,
                    primary_subscriber_employer:values.employer_name,
                    primary_subscriber_employer_street:values.employer_address,
                    primary_subscriber_employer_city:values.employer_city,
                    primary_subscriber_employer_state:values.employer_state,
                    primary_subscriber_employer_country:values.employer_country,
                    primary_subscriber_employer_zip_code:values.employer_postal_code
                };
            form.setValues(patientData);
        }
    },

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.confirmationWin(function(btn) {
			if(btn == 'yes') {
				app.unsetPatient();
				callback(true);
			} else {
				callback(false);
			}
		});
	}
});
/**
 * summary.ejs.php
 * Description: Patient Summary
 * v0.0.1
 *
 * Author: Ernesto J Rodriguez
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Encounter.getVitals
 */
Ext.define('App.view.patient.Summary', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelSummary',
	pageTitle    : i18n['patient_summary'],
	pageLayout   : {
		type : 'hbox',
		align: 'stretch'
	},
	pid             : null,
	demographicsData: null,
	initComponent: function() {
		var me = this;

		me.stores = [];

		me.stores.push(me.immuCheckListStore        = Ext.create('App.store.patient.ImmunizationCheck'));
		me.stores.push(me.patientAllergiesListStore = Ext.create('App.store.patient.Allergies'));
		me.stores.push(me.patientMedicalIssuesStore = Ext.create('App.store.patient.MedicalIssues'));
		me.stores.push(me.patientSurgeryStore       = Ext.create('App.store.patient.Surgery'));
		me.stores.push(me.patientDentalStore        = Ext.create('App.store.patient.Dental'));
		me.stores.push(me.patientMedicationsStore   = Ext.create('App.store.patient.Medications'));
		me.stores.push(me.patientCalendarEventsStore= Ext.create('App.store.patient.PatientCalendarEvents'));


		me.pageBody = [
			me.tabPanel = Ext.create('Ext.tab.Panel', {
				flex       : 1,
				margin     : '3 0 0 0',
				bodyPadding: 0,
				frame      : false,
				border     : false,
				plain      : true,
				itemId     : 'centerPanel'
			}),
			{
				xtype      : 'panel',
				width      : 250,
				bodyPadding: 0,
				frame      : false,
				border     : false,
				bodyBorder : true,
				margin     : '0 0 0 5',
				defaults   : {
					layout: 'fit',
					margin: '5 5 0 5'
				},
				listeners  : {
					scope : me,
					render: me.rightColRender
				},
				items      : [
					{
                        xtype      : 'grid',
						title      : i18n['active_medications'],
						itemId     : 'MedicationsPanel',
						hideHeaders: true,
						store      : me.patientMedicationsStore,
						columns    : [
							{
								header   : i18n['name'],
								dataIndex: 'medication',
								flex     : 1
							},
							{
								text     : i18n['alert'],
								width    : 55,
								dataIndex: 'alert',
								renderer : me.boolRenderer
							}

						]
					},
					{
                        xtype      : 'grid',
						title      : i18n['immunizations'],
						itemId     : 'ImmuPanel',
						hideHeaders: true,
						store      : me.immuCheckListStore,
						region     : 'center',
						columns    : [
							{

								header   : i18n['name'],
								dataIndex: 'immunization_name',
								flex     : 1
							},
							{
								text     : i18n['alert'],
								width    : 55,
								dataIndex: 'alert',
								renderer : me.alertRenderer
							}

						]
					},
					{
                        xtype      : 'grid',
						title      : i18n['allergies'],
						itemId     : 'AllergiesPanel',
						hideHeaders: true,
						store      : me.patientAllergiesListStore,
						region     : 'center',
						columns    : [
							{
								header   : i18n['name'],
								dataIndex: 'allergy',
								flex     : 1
							},
							{
								text     : i18n['alert'],
								width    : 55,
								dataIndex: 'alert',
								renderer : me.boolRenderer
							}
						]
					},
					{
                        xtype      : 'grid',
						title      : i18n['active_problems'],
						itemId     : 'IssuesPanel',
						hideHeaders: true,
						store      : me.patientMedicalIssuesStore,
						columns    : [
							{

								header   : i18n['name'],
								dataIndex: 'code',
								flex     : 1
							},
							{
								text     : i18n['alert'],
								width    : 55,
								dataIndex: 'alert',
								renderer : me.boolRenderer
							}

						]

					},
					{
                        xtype      : 'grid',
						title      : i18n['dental'],
						itemId     : 'DentalPanel',
						hideHeaders: true,
						store      : me.patientDentalStore,

						columns: [
							{

								header   : i18n['name'],
								dataIndex: 'title',
								flex     : 1

							}

						]

					},
					{
                        xtype      : 'grid',
						title      : i18n['surgeries'],
						itemId     : 'SurgeryPanel',
						hideHeaders: true,
						store      : me.patientSurgeryStore,

						columns: [
							{
								dataIndex: 'surgery',
								flex     : 1
							}
						]
					},
					{
                        xtype      : 'grid',
						title      : i18n['appointments'],
						itemId     : 'AppointmentsPanel',
						hideHeaders: true,
                        disableSelection:true,
						store      : me.patientCalendarEventsStore,
						columns: [
							{
                                xtype: 'datecolumn',
                                format:'F j, Y, g:i a',
								dataIndex: 'start',
								flex     : 1
							}
						]
					}
				]
			}
		];

		if(acl['access_demographics']) {
			me.stores.push(me.patientAlertsStore = Ext.create('App.store.patient.MeaningfulUseAlert'));
			me.tabPanel.add({
				xtype      : 'form',
				title      : i18n['demographics'],
				action     : 'demoFormPanel',
				itemId     : 'demoFormPanel',
				border     : false,
				dockedItems: [
					{
						xtype: 'toolbar',
						dock : 'bottom',
						items: [
							'->',
							{
								xtype   : 'button',
								action  : 'readOnly',
								text    : i18n['save'],
								minWidth: 75,
								scope   : me,
								handler : me.formSave
							},
							'-',
							{
								xtype   : 'button',
								text    : i18n['cancel'],
								action  : 'readOnly',
								minWidth: 75,
								scope   : me,
								handler : me.formCancel
							}
						]
					}
				]
			});
		}
		if(acl['access_patient_disclosures']) {
			me.stores.push(me.patientDisclosuresStore = Ext.create('App.store.patient.Disclosures',{
                autoSync:true
            }));
			me.tabPanel.add({
                xtype      : 'grid',
				title      : i18n['disclosures'],
				itemId     : 'disclosuresPanel',
				bodyPadding: 0,
				store      : me.patientDisclosuresStore,
                plugins: Ext.create('Ext.grid.plugin.RowEditing', {
                    autoCancel  : false,
                    errorSummary: false,
                    clicksToEdit: 2
//                    listeners   : {
//                        scope     : me,
//                        beforeedit: me.beforeServiceEdit
//                    }

                }),
				columns    : [
					{
                        xtype: 'datecolumn',
                        format:'Y-m-d',
						text     : i18n['date'],
						dataIndex: 'date'
					},
                    {
                        text     : i18n['recipient_name'],
                        dataIndex: 'recipient',
                        width:150,
                        editor:{
                            xtype:'textfield'
                        }
                    },
					{
						header   : i18n['type'],
						dataIndex: 'type',
                        editor:{
                            xtype:'textfield'
                        }
					},
					{
						text     : i18n['description'],
						dataIndex: 'description',
                        flex     : 1,
                        editor:{
                            xtype:'textfield'
                        }
					},
					{
						text     : i18n['active'],
						dataIndex: 'active',
                        width     : 50,
                        renderer:me.boolRenderer,
                        editor:{
                            xtype:'checkbox'
                        }
					}
				],
				tbar       : [
					{
						text   : i18n['disclosure'],
						iconCls: 'icoAdd',
                        handler:me.addDisclosure
					}
				]
			});
		}
		if(acl['access_patient_notes']) {
			me.stores.push(me.patientNotesStore = Ext.create('App.store.patient.Notes',{
			                autoSync:true
			            }));
			me.tabPanel.add({
				title      : i18n['notes'],
				itemId     : 'notesPanel',
				xtype      : 'grid',
				bodyPadding: 0,
				store      : me.patientNotesStore,
                plugins: Ext.create('Ext.grid.plugin.RowEditing', {
                           autoCancel  : false,
                           errorSummary: false,
                           clicksToEdit: 2

                }),
				columns    : [
					{
                        xtype    : 'datecolumn',
						text     : i18n['date'],
                        format   :'Y-m-d',
                        dataIndex: 'date'
					},
					{
						header   : i18n['type'],
						dataIndex: 'type',
                        editor:{
                            xtype:'textfield'
                        }
					},
					{
						text     : i18n['note'],
						dataIndex: 'body',
						flex     : 1,
                        editor:{
                            xtype:'textfield'
                        }
					},
					{
						text     : i18n['user'],
                        width    : 225,
						dataIndex: 'user_name'
					}
				],
				tbar       : [
					{
						text   : i18n['add_note'],
						iconCls: 'icoAdd',
                        handler:me.addNote
					}
				]
			});
		}

		if(acl['access_patient_reminders']) {
			me.stores.push(me.patientRemindersStore = Ext.create('App.store.patient.Reminders',{
			                autoSync:true
			            }));
			me.tabPanel.add({
				title      : i18n['reminders'],
				itemId     : 'remindersPanel',
				xtype      : 'grid',
				bodyPadding: 0,
				store      : me.patientRemindersStore,
                plugins: Ext.create('Ext.grid.plugin.RowEditing', {
                   autoCancel  : false,
                   errorSummary: false,
                   clicksToEdit: 2

               }),
				columns    : [
                    {
                        xtype    : 'datecolumn',
                        text     : i18n['date'],
                        format   :'Y-m-d',
                        dataIndex: 'date'
                    },
                    {
                        header   : i18n['type'],
                        dataIndex: 'type',
                        editor:{
                            xtype:'textfield'
                        }
                    },
                    {
                        text     : i18n['note'],
                        dataIndex: 'body',
                        flex     : 1,
                        editor:{
                            xtype:'textfield'
                        }
                    },
                    {
                        text     : i18n['user'],
                        width    : 225,
                        dataIndex: 'user_name'
                    }
				],
				tbar       : [
					{
						text   : i18n['add_reminder'],
						iconCls: 'icoAdd',
                        handler:me.addReminder
					}
				]
			})
		}
		if(acl['access_patient_vitals']) {
			me.stores.push(me.vitalsStore = Ext.create('App.store.patient.Vitals'));
			me.tabPanel.add({
				title      : i18n['vitals'],
				autoScroll : true,
				bodyPadding: 0,
				items      : {
					xtype: 'vitalsdataview',
					store: me.vitalsStore
				}
			})
		}
		if(acl['access_patient_history']) {
			me.stores.push(me.encounterEventHistoryStore = Ext.create('App.store.patient.Encounters'));
			me.tabPanel.add({
				title  : i18n['history'],
				xtype  : 'grid',
				store  : me.encounterEventHistoryStore,
				columns: [
					{
						header   : i18n['date'],
						dataIndex: 'start_date'
					},
					{
						header   : i18n['event'],
						dataIndex: 'brief_description',
						flex     : true
					},
					{
						header   : i18n['visit_category'],
						dataIndex: 'visit_category'
					}
				]
			})
		}
		if(acl['access_patient_documents']) {
			me.stores.push(me.patientDocumentsStore = Ext.create('App.store.patient.PatientDocuments'));
			me.tabPanel.add({
				title  : i18n['documents'],
				xtype  : 'grid',
				store  : me.patientDocumentsStore,
				columns: [
					{
						xtype: 'actioncolumn',
						width: 26,
						items: [
							{
								icon    : 'resources/images/icons/preview.png',
								tooltip : i18n['view_document'],
								handler : me.onDocumentView,
								getClass: function() {
									return 'x-grid-icon-padding';
								}
							}
						]
					},
					{
						header   : i18n['type'],
						dataIndex: 'docType'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['date'],
						dataIndex: 'date',
						format   : 'Y-m-d'

					},
					{
						header   : i18n['title'],
						dataIndex: 'title',
						flex     : true,
						editor   : {
							xtype : 'textfield',
							action: 'title'
						}
					}
				],

				plugins: Ext.create('Ext.grid.plugin.RowEditing', {
					autoCancel  : true,
					errorSummary: false,
					clicksToEdit: 2

				}),

				tbar: [
					{
						xtype     : 'mitos.templatescombo',
						fieldLabel: i18n['available_documents'],
						width     : 320,
						labelWidth: 145,
						margin    : '10 0 0 10'

					},
					'-',
					{
						text   : i18n['add_document'],
						iconCls: 'icoAdd',
						scope  : me,
						handler: me.newDoc
					},
					'->',
					{
						text   : i18n['upload_document'],
						scope  : me,
						handler: me.uploadADocument
					},
					{
						xtype : 'panel',
						action: 'upload',
						region: 'center',
						items : [
							me.uploadWin = Ext.create('Ext.window.Window', {
								draggable  : false,
								closable   : false,
								closeAction: 'hide',
								items      : [
									{
										xtype      : 'form',
										bodyPadding: 10,
										width      : 400,
										items      : [
											{
												xtype     : 'filefield',
												name      : 'filePath',
												buttonText: i18n['select_a_file'] + '...',
												anchor    : '100%'
											}
										],
										api        : {
											submit: DocumentHandler.uploadDocument
										}
									}
								],
								buttons    : [
									{
										text   : i18n['cancel'],
										handler: function() {
											me.uploadWin.close();
										}
									},
									{
										text   : i18n['upload'],
										scope  : me,
										handler: me.onDocUpload
									}
								]
							})
						]
					}
				]
			})
		}
		if(acl['access_patient_preventive_care_alerts']) {
			me.stores.push(me.patientsDismissedAlerts = Ext.create('App.store.patient.DismissedAlerts',{
                //listeners
            }));
			me.tabPanel.add({
				title  : i18n['dismissed_preventive_care_alerts'],
				xtype  : 'grid',
				store  : me.patientsDismissedAlerts,
				columns: [

					{
						header   : i18n['description'],
						dataIndex: 'description'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['date'],
						dataIndex: 'date',
						format   : 'Y-m-d'

					},
					{
						header   : i18n['reason'],
						dataIndex: 'reason',
						flex     : true

					},
					{
						header   : i18n['observation'],
						dataIndex: 'observation',
						flex     : true
					},
					{
						header   : i18n['dismissed'],
						dataIndex: 'dismiss',
                        width    : 60,
						renderer : me.boolRenderer
					}
				],

				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [
						{
							title  : 'general',
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype     : 'textfield',
											name      : 'reason',
											fieldLabel: i18n['reason'],
											width     : 585,
											labelWidth: 70,
											action    : 'reason'
										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											xtype     : 'textfield',
											fieldLabel: i18n['observation'],
											name      : 'observation',
											width     : 250,
											labelWidth: 70,
											action    : 'observation'
										},
										{
											fieldLabel: i18n['date'],
											xtype     : 'datefield',
											action    : 'date',
											width     : 200,
											labelWidth: 40,
											format    : 'Y-m-d',
											name      : 'date'

										},
										{
											xtype     : 'checkboxfield',
											name      : 'dismiss',
											fieldLabel: i18n['dismiss_alert']

										}

									]

								}
							]
						}

					]

				})
			})
		}
		if(acl['access_patient_billing']) {
			me.tabPanel.add({
				xtype : 'panel',
				action: 'balancePanel',
				itemId: 'balancePanel',
				title : i18n['billing'],
				html  : i18n['account_balance'] + ': '

			})
		}

		me.listeners = {
			scope : me,
			render: me.beforePanelRender
		};

		me.callParent();
	},

    addDisclosure:function(btn){
        var me = this,
            grid = btn.up('grid'),
            store = grid.store;
        grid.plugins[0].cancelEdit();
        store.insert(0,{date:new Date(), pid:app.patient.pid, active:1});
        grid.plugins[0].startEdit(0,0);
    },
    addNote:function(btn){
        var me = this,
            grid = btn.up('grid'),
            store = grid.store;
        grid.plugins[0].cancelEdit();
        store.insert(0,{date:new Date(), pid:app.patient.pid, uid:app.user.id, eid:app.patient.eid});
        grid.plugins[0].startEdit(0,0);
    },
    addReminder:function(btn){
        var me = this,
            grid = btn.up('grid'),
            store = grid.store;
        grid.plugins[0].cancelEdit();
        store.insert(0,{date:new Date(), pid:app.patient.pid, uid:app.user.id, eid:app.patient.eid});
        grid.plugins[0].startEdit(0,0);
    },

	onDocumentView: function(grid, rowIndex) {
		var rec = grid.getStore().getAt(rowIndex),
			src = rec.data.url;
		app.onDocumentView(src);
	},

	uploadADocument: function() {
		var me = this,
			previewPanel = me.query('[action="upload"]')[0];
		me.uploadWin.show();
		me.uploadWin.alignTo(previewPanel.el.dom, 'tr-tr', [-5, 30])
	},
	onDocUpload    : function(btn) {
		var me = this,
			form = me.uploadWin.down('form').getForm(),
			win = btn.up('window');

		if(form.isValid()) {
			form.submit({
				waitMsg: i18n['uploading_document'] + '...',
				params : {
					pid    : me.pid,
					docType: 'UploadDoc'
				},
				success: function(fp, o) {
					win.close();
					me.patientDocumentsStore.load({params: {pid: me.pid}});
				},
				failure: function(fp, o) {
					//say(o.result.error);

				}
			});
		}
	},

	formSave: function(btn) {
		var me = this,
			form = btn.up('form').getForm(),
			record = form.getRecord(),
			values = form.getValues();

		values.pid = me.pid;
		record.set(values);
		record.store.save({
			scope   : me,
			callback: function() {
                app.setPatient(me.pid, 'toberemove', null);
				me.getPatientImgs();
				me.verifyPatientRequiredInfo();
				me.readOnlyFields(form.getFields());
			}
		});
	},

	formCancel: function(btn) {
		var form = btn.up('form').getForm(),
			record = form.getRecord();
		form.loadRecord(record);
	},

	newDoc: function(btn) {
		app.onNewDocumentsWin(btn.action)
	},

	getFormData      : function(formpanel, callback) {

		var me = this, rFn, uFn;

		if(formpanel.itemId == 'demoFormPanel') {
			rFn = Patient.getPatientDemographicData;
			uFn = Patient.updatePatientDemographicData;
		}

		var formFields = formpanel.getForm().getFields().items, modelFields = [
			{name: 'pid', type: 'int'}
		];
		for(var i = 0; i < formFields.length; i++) {
			if(formFields[i].xtype == 'mitos.datetime') {
				modelFields.push({name: formFields[i].name, type: 'date', dateFormat: 'Y-m-d H:i:s'});
			} else {
				modelFields.push({name: formFields[i].name});
			}
		}
		var model = Ext.define(formpanel.itemId + 'Model', {
			extend: 'Ext.data.Model',
			fields: modelFields,
			proxy : {
				type: 'direct',
				api : {
					read  : rFn,
					update: uFn
				}
			}
		});

		var store = Ext.create('Ext.data.Store', {
			model: model
		});

		store.load({
			scope   : me,
			callback: function(records) {
				callback(formpanel.getForm().loadRecord(records[0]));
			}
		});

	},
	beforePanelRender: function() {
		if(acl['access_demographics']) {
			var me = this, demoFormPanel = me.query('[action="demoFormPanel"]')[0],
				whoPanel,
				insurancePanel,
				primaryInsurancePanel,
				secondaryInsurancePanel,
				tertiaryInsurancePanel;
			this.getFormItems(demoFormPanel, 1, function(success) {
				if(success) {
					whoPanel = demoFormPanel.query('panel[title="Who"]')[0];
					insurancePanel = demoFormPanel.query('panel[action="insurances"]')[0];
					primaryInsurancePanel = insurancePanel.items.items[0];
					secondaryInsurancePanel = insurancePanel.items.items[1];
					tertiaryInsurancePanel = insurancePanel.items.items[2];

					whoPanel.insert(0, Ext.create('Ext.panel.Panel', {
						action     : 'patientImgs',
						layout     : 'hbox',
						style      : 'float:right',
						bodyPadding: 5,
						height     : 160,
						width      : 255,
						items      : [
							me.patientImg = Ext.create('Ext.container.Container', {
								html  : '<img src="resources/images/icons/patientPhotoId.jpg" height="119" width="119" />',
								margin: '0 5 0 0'
							}),
							me.patientQRcode = Ext.create('Ext.container.Container', {
								html  : '<img src="resources/images/icons/patientDataQrCode.png" height="119" width="119" />',
								margin: 0
							})
						],
						bbar       : [
							'-',
							{
								text   : i18n['take_picture'],
								scope  : me,
								handler: me.getPhotoIdWindow
							},
							'-',
							'->',
							'-',
							{
								text   : i18n['print_qrcode'],
								scope  : me,
								handler: function() {
									window.printQRCode(app.patient.pid);
								}
							},
							'-'
						]
					}));

					primaryInsurancePanel.insert(0, Ext.create('Ext.panel.Panel', {
						style : 'float:right',
						height: 182,
						width : 255,
						items : [
							me.primaryInsuranceImg = Ext.create('Ext.container.Container', {
								html: '<img src="resources/images/icons/no_card.jpg" height="154" width="254" />'
							}),
							me.primaryInsuranceImgUpload = Ext.create('Ext.window.Window', {
								draggable  : false,
								closable   : false,
								closeAction: 'hide',
								items      : [
									{
										xtype      : 'form',
										bodyPadding: 10,
										width      : 310,
										items      : [
											{
												xtype     : 'filefield',
												name      : 'filePath',
												buttonText: i18n['select_a_file'] + '...',
												anchor    : '100%'
											}
										],
										//   url: 'dataProvider/DocumentHandler.php'
										api        : {
											submit: DocumentHandler.uploadDocument
										}
									}
								],
								buttons    : [
									{
										text   : i18n['cancel'],
										handler: function(btn) {
											btn.up('window').close();
										}
									},
									{
										text   : i18n['upload'],
										scope  : me,
										action : 'Primary Insurance',
										handler: me.onInsuranceUpload
									}
								]
							})
						],
						bbar  : [
							'->',
							'-',
							{
								text   : i18n['upload'],
								action : 'primaryInsurance',
								scope  : me,
								handler: me.uploadInsurance
							},
							'-'
						]
					}));

					secondaryInsurancePanel.insert(0, Ext.create('Ext.panel.Panel', {
						style : 'float:right',
						height: 182,
						width : 255,
						items : [
							me.secondaryInsuranceImg = Ext.create('Ext.container.Container', {
								html: '<img src="resources/images/icons/no_card.jpg" height="154" width="254" />'
							}),
							me.secondaryInsuranceImgUpload = Ext.create('Ext.window.Window', {
								draggable  : false,
								closable   : false,
								closeAction: 'hide',
								items      : [
									{
										xtype      : 'form',
										bodyPadding: 10,
										width      : 310,
										items      : [
											{
												xtype     : 'filefield',
												name      : 'filePath',
												buttonText: i18n['select_a_file'] + '...',
												anchor    : '100%'
											}
										],
										//   url: 'dataProvider/DocumentHandler.php'
										api        : {
											submit: DocumentHandler.uploadDocument
										}
									}
								],
								buttons    : [
									{
										text   : i18n['cancel'],
										handler: function(btn) {
											btn.up('window').close();
										}
									},
									{
										text   : i18n['upload'],
										scope  : me,
										action : 'Secondary Insurance',
										handler: me.onInsuranceUpload
									}
								]
							})
						],

						bbar: [
							'->',
							'-',
							{
								text   : i18n['upload'],
								action : 'secondaryInsurance',
								scope  : me,
								handler: me.uploadInsurance
							},
							'-'
						]
					}));

					tertiaryInsurancePanel.insert(0, Ext.create('Ext.panel.Panel', {
						style : 'float:right',
						height: 182,
						width : 255,
						items : [
							me.tertiaryInsuranceImg = Ext.create('Ext.container.Container', {
								html: '<img src="resources/images/icons/no_card.jpg" height="154" width="254" />'
							}),
							me.tertiaryInsuranceImgUpload = Ext.create('Ext.window.Window', {
								draggable  : false,
								closable   : false,
								closeAction: 'hide',
								items      : [
									{
										xtype      : 'form',
										bodyPadding: 10,
										width      : 310,
										items      : [
											{
												xtype     : 'filefield',
												name      : 'filePath',
												buttonText: i18n['select_a_file'] + '...',
												anchor    : '100%'
											}
										],
										//   url: 'dataProvider/DocumentHandler.php'
										api        : {
											submit: DocumentHandler.uploadDocument
										}
									}
								],
								buttons    : [
									{
										text   : i18n['cancel'],
										handler: function(btn) {
											btn.up('window').close();
										}
									},
									{
										text   : i18n['upload'],
										scope  : me,
										action : 'Tertiary Insurance',
										handler: me.onInsuranceUpload
									}
								]
							})
						],
						bbar  : [
							'->',
							'-',
							{
								text: 'Upload',

								scope  : me,
								action : 'tertiaryInsurance',
								handler: me.uploadInsurance
							},
							'-'
						]
					}));

				}
			});
		}
	},

	uploadInsurance: function(btn) {

		var me = this,
			ImgContainer = btn.up('panel').down('container'),
			action = btn.action;
		if(action == 'primaryInsurance') {
			me.primaryInsuranceImgUpload.show();
			me.primaryInsuranceImgUpload.alignTo(me.primaryInsuranceImg.el.dom, 'br-br', [0, 0]);
		}
		else if(action == 'secondaryInsurance') {
			me.secondaryInsuranceImgUpload.show();
			me.secondaryInsuranceImgUpload.alignTo(me.secondaryInsuranceImg.el.dom, 'br-br', [0, 0]);
		}
		if(action == 'tertiaryInsurance') {
			me.tertiaryInsuranceImgUpload.show();
			me.tertiaryInsuranceImgUpload.alignTo(me.tertiaryInsuranceImg.el.dom, 'br-br', [0, 0]);
		}

	},

	rightColRender: function(panel) {
		var me = this;
		panel.getComponent('ImmuPanel').header.add({
			xtype  : 'button',
			text   : i18n['details'],
			action : 'immunization',
			scope  : me,
			handler: me.medicalWin


		});
		panel.getComponent('MedicationsPanel').header.add({
			xtype  : 'button',
			text   : i18n['details'],
			action : 'medications',
			scope  : me,
			handler: me.medicalWin


		});
		panel.getComponent('AllergiesPanel').header.add({
			xtype  : 'button',
			text   : i18n['details'],
			action : 'allergies',
			scope  : me,
			handler: me.medicalWin
		});
		panel.getComponent('IssuesPanel').header.add({
			xtype  : 'button',
			text   : i18n['details'],
			action : 'issues',
			scope  : me,
			handler: me.medicalWin
		});
		panel.getComponent('DentalPanel').header.add({
			xtype  : 'button',
			text   : i18n['details'],
			action : 'dental',
			scope  : me,
			handler: me.medicalWin
		});
		panel.getComponent('SurgeryPanel').header.add({
			xtype  : 'button',
			text   : i18n['details'],
			action : 'surgery',
			scope  : me,
			handler: me.medicalWin
		});
		this.doLayout();
	},
	medicalWin    : function(btn) {
		app.onMedicalWin(btn);

	},

	getPatientImgs: function() {
		var me = this,
			number = Ext.Number.randomInt(1, 1000);
		me.patientImg.update('<img src="' + settings.site_url + '/patients/' + me.pid + '/patientPhotoId.jpg?' + number + '" height="119" width="119" />');
		me.patientQRcode.update('<a ondblclick="printQRCode(app.patient.pid)"><img src="' + settings.site_url + '/patients/' + me.pid + '/patientDataQrCode.png?' + number + '" height="119" width="119" title="Print QRCode" /></a>');
	},

	getPhotoIdWindow: function() {
		var me = this;
		me.PhotoIdWindow = Ext.create('App.classes.PhotoIdWindow', {
			title   : i18n['patient_photo_id'],
			loadMask: true,
			modal   : true
		}).show();
	},

	completePhotoId: function() {
		this.PhotoIdWindow.close();
		this.getPatientImgs();
	},

	onInsuranceUpload: function(btn) {
		var me = this,
			action = btn.action,
			win = btn.up('window'),
			form,
			imgCt;

		if(action == 'Primary Insurance') {
			form = me.primaryInsuranceImgUpload.down('form').getForm();
			imgCt = me.primaryInsuranceImg;
		}
		else if(action == 'Secondary Insurance') {
			form = me.secondaryInsuranceImgUpload.down('form').getForm();
			imgCt = me.secondaryInsuranceImg;
		}
		if(action == 'Tertiary Insurance') {
			form = me.tertiaryInsuranceImgUpload.down('form').getForm();
			imgCt = me.tertiaryInsuranceImg;
		}
		if(form.isValid()) {
			form.submit({
				waitMsg: i18n['uploading_insurance'] + '...',
				params : {
					pid    : app.patient.pid,
					docType: action
				},
				success: function(fp, o) {
					say(o.result.doc);
					win.close();
					imgCt.update('<img src="' + o.result.doc.url + '" height="154" width="254" />');

				},
				failure: function(fp, o) {
					say(o.result.error);
					win.close();
				}
			});
		}

	},
	/**
	 * verify the patient required info and add a yellow background if empty
	 */
	verifyPatientRequiredInfo: function() {
		var me = this,
			formPanel = me.query('[action="demoFormPanel"]')[0],
			field;

		me.patientAlertsStore.load({
			scope   : me,
			params  : {
				pid: me.pid
			},
			callback: function(records, operation, success) {

				for(var i = 0; i < records.length; i++) {
					field = formPanel.getForm().findField(records[i].data.name);
					if(records[i].data.val) {
						field.removeCls('x-field-yellow');
					} else {
						field.addCls('x-field-yellow');
					}
				}
			}

		});
	},
	/**
	 * allow to edit the field if the filed has no data
	 * @param fields
	 */
	readOnlyFields: function(fields) {
		for(var i = 0; i < fields.items.length; i++) {
			var f = fields.items[i],
				v = f.getValue(),
				n = f.name;
			if(n == 'SS' || n == 'DOB' || n == 'sex') {
				if(v == null || v == '') {
					f.setReadOnly(false);
				} else {
					f.setReadOnly(true);
				}
			}
		}
	},

	/**
	 * load all the stores in the summaryStores array
	 */
	loadStores:function(){
		var me = this;
		for(var i=0; i < me.stores.length; i++){
			me.stores[i].load({params: {pid: me.pid}});
		}
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		var me = this,
			billingPanel,
			demographicsPanel;

		if(me.checkIfCurrPatient()) {
			/**
			 * convenient way to refer to current pid within this panel
			 * @type {*}
			 */
			me.pid = app.patient.pid;
			/**
			 * get current set patient info
			 * @type {*}
			 */
			var patient = app.patient;
			/**
			 * update panel main title to reflect the patient name and if the patient is read only
			 */
			me.updateTitle(patient.name + ' #'+patient.pid+' - '+patient.age.str+' - (' + i18n['patient_summary'] + ')', app.patient.readOnly, null);
			/**
			 * verify if the patient is on read only mode
			 */
			me.setReadOnly(app.patient.readOnly);

			me.setButtonsDisabled(me.query('button[action="readOnly"]'));

			/**
			 * get all the demographic data if user has access.
			 * including all the images (insurance cards, patient img, and QRcode)
			 */
			if(acl['access_demographics']) {
				demographicsPanel = me.tabPanel.getComponent('demoFormPanel');
				demographicsPanel.getForm().reset();
				me.getFormData(demographicsPanel, function(form) {
					me.readOnlyFields(form.getFields());
				});
				me.getPatientImgs();
				me.verifyPatientRequiredInfo();
				Patient.getPatientInsurancesCardsUrlByPid(me.pid, function(url) {
					me.primaryInsuranceImg.update('<img src="' + (url.Primary.url ? url.Primary.url : 'resources/images/icons/no_card.jpg') + '" height="154" width="254" />');
					me.secondaryInsuranceImg.update('<img src="' + (url.Secondary.url ? url.Secondary.url : 'resources/images/icons/no_card.jpg') + '" height="154" width="254" />');
					me.tertiaryInsuranceImg.update('<img src="' + (url.Tertiary.url ? url.Tertiary.url : 'resources/images/icons/no_card.jpg') + '" height="154" width="254" />');
				});
			}
			/**
			 * get billing info if user has access
			 */
			if(acl['access_patient_billing']) {
				billingPanel = me.tabPanel.getComponent('balancePanel');
				Fees.getPatientBalance({pid: me.pid}, function(balance) {
					billingPanel.update(i18n['account_balance'] + ': $' + balance);
				});
			}
			/**
			 * reset tab panel to the first tap
			 */
			me.tabPanel.setActiveTab(0);
			/**
			 * load all the stores
			 */
			me.loadStores();
            if((typeof callback) == 'function') callback(true);
		} else {
			callback(false);
			me.pid = null;
			me.currPatientError();
		}
	}

});
/**
 * Encounter.ejs.php
 * Encounter Panel
 * v0.0.1
 *
 * Author: Ernesto J. Rodriguez
 * Modified:
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Encounter.getEncounter
 * @namespace Encounter.createEncounter
 * @namespace Encounter.checkOpenEncounters
 * @namespace Encounter.closeEncounter
 * @namespace Encounter.getVitals
 * @namespace Encounter.addVitals
 */
Ext.define('App.view.patient.ProgressNote', {
	extend           : 'Ext.panel.Panel',
    alias            : 'widget.progressnote',
    loadMask         : false,
	initComponent: function() {
		var me = this;

        me.tpl = new Ext.XTemplate(
            '<div class="progressNote">' +
            '   <div class="secession general-data">' +
            '       <div class="title"> ' + i18n['general'] + ' </div>' +
            '       <table width="100%">' +
            '           <tr>' +
            '               <td>' +
            '                   <div class="header row">' + i18n['name'] + ': {patient_name} </div>' +
            '                   <div class="header row">' + i18n['record'] + ': #{pid} </div>' +
            '                   <div class="header row">' + i18n['provider_date'] + ': {open_by} </div>' +
            '                   <div class="header row">' + i18n['onset_date'] + ': {[values.onset_date || "-"]} </div>' +
            '                   <div class="header row">' + i18n['signed_by'] + ': {[values.signed_by || "-"]} </div>' +
            '               </td>' +
            '               <td>' +
            '                   <div class="header row">' + i18n['service_date'] + ': {start_date} </div>' +
            '                   <div class="header row">' + i18n['visit_category'] + ': {visit_category} </div>' +
            '                   <div class="header row">' + i18n['facility'] + ': {facility} </div>' +
            '                   <div class="header row">' + i18n['priority'] + ': {priority} </div>' +
            '                   <div class="header row">' + i18n['close_on'] + ': {[values.close_date || "-"]} </div>' +
            '               </td>' +
            '           </tr>' +
            '           <tr>' +
            '               <td colspan="2">' +
            '                   <div class="header row" style="white-space: normal;">' + i18n['brief_description'] + ': {brief_description} </div>' +
            '               </td>' +
            '           </tr>' +
            '       </table>' +
            '   </div>' +
            /**
             * Review of System Secession
             */
            '   <tpl if="reviewofsystems">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + i18n['review_of_systems'] + ' </div>' +
            '           <tpl for="reviewofsystems">' +
            '               <tpl if="this.isNotNull(value)">' +
            '                   <div class="pblock"> {name}: {value} </div>' +
            '               </tpl>' +
            '           </tpl>' +
            '       </div>' +
            '   </tpl>' +
            /**
             * Review of System Checks Secession
             */
            '   <tpl if="reviewofsystemschecks">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + i18n['review_of_system_checks'] + ' </div>' +
            '           <tpl for="reviewofsystemschecks">' +
            '               <tpl if="this.isNotNull(value)">' +
            '                   <div class="pblock"> {name}: {value} </div>' +
            '               </tpl>' +
            '           </tpl>' +
            '       </div>' +
            '   </tpl>' +

            /**
             * SOAP Secession
             */
            '   <tpl for="soap">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + i18n['soap'] + ' </div>' +
            '           <p><span>' + i18n['subjective'] + ':</span> {[values.subjective || "-"]} </p>' +
            '           <p><span>' + i18n['objective'] + ':</span> {[values.objective || "-"]}</p>' +
            '           <p><span>' + i18n['assessment'] + ':</span> {[values.assessment || "-"]}</p>' +
            '           <p><span>' + i18n['plan'] + ':</span> {[values.plan || "-"]}</p>' +
            '       </div>' +
            '   </tpl>' +
            /**
             * Speech Dictation Secession
             */
            '   <tpl for="speechdictation">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + i18n['speech_dictation'] + ' </div>' +
            '           <p><span>' + i18n['dictation'] + ':</span> {dictation}</p>' +
            '           <p><span>' + i18n['additional_notes'] + ':</span> {additional_notes}</p>' +
            '       </div>' +
            '   </tpl>' +
            /**
             * Vitals Secession
             */
            '   <tpl if="vitals">' +
            '       <div class="secession vitals-data">' +
            '           <div class="title"> ' + i18n['vitals'] + ' </div>' +
            '           <div style="overflow-x: auto">' +
            '               <table>' +
            '                   <tr>' +
            '                       <td>' +
            '                          <table class="x-grid-table x-grid-table-vitals vitals-column">' +
            '                              <tbody>' +
            '                                  <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell x-grid-table-vitals-date">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['date_&_time'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['weight_lbs'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['weight_kg'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['height_in'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['height_cm'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['bp_systolic'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['bp_diastolic'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['pulse'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['respiration'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['temp_f'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['temp_c'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['temp_location'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['oxygen_saturation'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['head_circumference_in'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['head_circumference_cm'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['waist_circumference_in'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['waist_circumference_cm'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['bmi'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['bmi_status'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['other_notes'] + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['administer'] + '<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">' + i18n['Sign by'] + '<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                               </tbody>' +
            '                           </table>' +
            '                       </td>' +
            '                       <tpl for="vitals">' +
            '                           <td>' +
            '                           <table class="x-grid-table x-grid-table-vitals vitals-column">' +
            '                               <tbody>' +
            '                                   <tr class="x-grid-row">' +
            '                                       <td class="x-grid-cell x-grid-table-vitals-date">' +
            '                                           <div class="x-grid-cell-inner ">{date}</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row first">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.weight_lbs || "-"]}</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.weight_kg || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.height_in || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.height_cm || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.bp_systolic || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.bp_diastolic || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.pulse || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.respiration || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.temp_f || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.temp_c || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.temp_location ? values.temp_location.toUpperCase() : "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.oxygen_saturation || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.head_circumference_in || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.head_circumference_cm || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.waist_circumference_in || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.waist_circumference_cm || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.bmi || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.bmi_status || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[values.other_notes || "-"]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[(values.administer_by == null || values.administer_by == " ") ? "-" : values.administer_by]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row ">' +
            '                                       <td class="x-grid-cell">' +
            '                                           <div class="x-grid-cell-inner ">{[(values.authorized_by == null || values.authorized_by == " ") ? "-" : values.authorized_by]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                               </tbody>' +
            '                           </table>' +
            '                           </td>' +
            '                       </tpl>' +
            '                   </tr>' +
            '               </table>' +
            '           </div>' +
            '       </div>' +
            '   </tpl>' +
            '</div>',
        {
            isNotNull: function(value){
                return value != 'null' && value != null;
            },
            isNotEmpty:function(a,b,c,d){
                say(a);
                say(b);
                say(c);
                say(d);
            }


        });

		me.callParent(arguments);
	}

});

/**
 * visits.ejs.php
 * Visits List
 * v0.0.1
 *
 * Author: Ernesto J. Rodriguez
 * Modified:
 *
 * GaiaEHR (Electronic Health Records) 2011
 * @namespace Encounter.getEncounters
 */
Ext.define('App.view.patient.Visits', {
	extend   : 'App.classes.RenderPanel',
	id       : 'panelVisits',
	pageTitle: i18n['visits_history'],
	uses     : [
		'App.classes.GridPanel',
		'Ext.ux.PreviewPlugin'
	],

	initComponent: function() {
		var me = this;

		me.store = Ext.create('App.store.patient.Encounters');

		function open(val) {
			if(val !== null) {
				return '<img src="resources/images/icons/yes.gif" />';
			} else {
				return '<img src="resources/images/icons/no.gif" />';
			}
		}

		//******************************************************************
		// Visit History Grid
		//******************************************************************
		me.historyGrid = Ext.create('Ext.grid.Panel', {
			title     : i18n['encounter_history'],
			store     : me.store,
			columns   : [
				{ header: 'eid', sortable: false, dataIndex: 'eid', hidden: true},
				{ width: 150, header: i18n['date'], sortable: true, dataIndex: 'start_date', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s') },
				{ flex: 1, header: i18n['reason'], sortable: true, dataIndex: 'brief_description' },
				{ width: 180, header: i18n['provider'], sortable: false, dataIndex: 'provider' },
				{ width: 120, header: i18n['facility'], sortable: false, dataIndex: 'facility' },
				{ width: 120, header: i18n['billing_facility'], sortable: true, dataIndex: 'billing_facility' },
				{ width: 45, header: i18n['close'] + '?', sortable: true, dataIndex: 'close_date', renderer: me.openBool }
			],
			viewConfig: {
				itemId   : 'view',
				plugins  : [
					{
						pluginId       : 'preview',
						ptype          : 'preview',
						bodyField      : 'brief_description',
						previewExpanded: false
					}
				],
				listeners: {
					scope       : me,
					itemclick   : me.gridItemClick,
					itemdblclick: me.gridItemDblClick
				}
			},
			tbar      : Ext.create('Ext.PagingToolbar', {
				store      : me.store,
				displayInfo: true,
				emptyMsg   : 'No Encounters Found',
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items      : [
					{
						iconCls      : '',
						text         : i18n['show_details'],
						enableToggle : true,
						scope        : me,
						toggleHandler: me.onDetailToggle
					},
					'-',
					{
						text   : i18n['new_encounter'],
						scope  : me,
						handler: me.createNewEncounter
					}
				]
			})
		});
		me.pageBody = [me.historyGrid];

		me.callParent(arguments);
	},

	openBool: function(val) {
		if(val !== null) {
			return '<img src="resources/images/icons/yes.gif" />';
		} else {
			return '<img src="resources/images/icons/no.gif" />';
		}
	},

	onDetailToggle: function(btn, pressed) {
		this.historyGrid.getComponent('view').getPlugin('preview').toggleExpanded(pressed);
	},

	gridItemClick: function(view) {
		view.getPlugin('preview').toggleRowExpanded();
	},

	gridItemDblClick: function(view, record) {
		app.openEncounter(record.data.eid);
	},

	createNewEncounter: function() {
		app.createNewEncounter();
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		if(this.checkIfCurrPatient()) {

			var patient = this.getCurrPatient();
			this.updateTitle(patient.name + ' (' + i18n['encounters'] + ')');
			this.store.load();
			callback(true);
		} else {
			callback(false);
			this.currPatientError();
		}
	}
});

/**
 * Encounter.js
 * Encounter Panel
 *
 * This class renders all the panel used  inside the Encounter Panel
 *
 * v0.1.0
 *
 * Author: Ernesto J. Rodriguez
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * This are all the Ext.direct methods used in this class
 * @namespace Encounter.getEncounter
 * @namespace Encounter.createEncounter
 * @namespace Encounter.updateEncounter
 * @namespace Encounter.checkOpenEncounters
 * @namespace Encounter.closeEncounter
 * @namespace Encounter.getVitals
 * @namespace Encounter.addVitals
 * @namespace Encounter.saveReviewOfSystem
 * @namespace Encounter.saveReviewOfSystemsChecks
 * @namespace Encounter.saveSOAP
 * @namespace Encounter.saveSpeechDictation
 * @namespace Encounter.updateReviewOfSystemsById
 * @namespace Encounter.updateReviewOfSystemsChecksById
 * @namespace Encounter.updateSoapById
 * @namespace Encounter.updateDictationById
 * @namespace Encounter.getProgressNoteByEid
 * @namespace User.verifyUserPass
 * @namespace ACL.hasPermission
 */
Ext.define('App.view.patient.Encounter', {
    extend                : 'App.classes.RenderPanel',
    id                    : 'panelEncounter',
    pageTitle             : i18n['encounter'],
    pageLayout            : 'border',
    requires              : [
        'App.store.patient.Encounter', 'App.store.patient.Vitals'
    ],
    pid                   : null,
    eid                   : null,
    currEncounterStartDate: null,
    initComponent         : function() {
        var me = this;

        me.renderAdministrative = acl['access_enc_hcfa'] || acl['access_enc_cpt'] || acl['access_enc_history'];

        me.timerTask = {
            scope   : me,
            run     : function() {
                me.encounterTimer();
            },
            interval: 1000 //1 second
        };
        /**
         * stores
         * @type {*}
         */
        me.encounterStore = Ext.create('App.store.patient.Encounter', {
            listeners: {
                scope      : me,
                datachanged: me.updateProgressNote
            }
        });
        me.encounterEventHistoryStore = Ext.create('App.store.patient.EncounterEventHistory');
        me.EncounterOrdersStore = Ext.create('App.store.patient.EncounterCPTsICDs');

        if(acl['access_encounter_checkout']){
            me.checkoutAlertArea = Ext.create('App.store.patient.CheckoutAlertArea');
        }

        /**
         * New Encounter Panel this panel is located hidden at
         * the top of the Visit panel and will slide down if
         * the "New Encounter" button is pressed.
         */
        if(acl['add_encounters']){
            me.newEncounterWindow = Ext.create('Ext.window.Window', {
                title      : i18n['new_encounter_form'],
                closeAction: 'hide',
                modal      : true,
                width      : 660,
                items      : [
                    {
                        xtype      : 'form',
                        border     : false,
                        bodyPadding: '10 10 0 10'
                    }
                ],
                buttons    : [
                    {
                        text   : i18n['create_encounter'],
                        action : 'encounter',
                        scope  : me,
                        handler: me.onSave
                    },
                    {
                        text   : i18n['cancel'],
                        scope  : me,
                        handler: me.cancelNewEnc

                    }
                ],
                listeners  : {
                    scope: me,
                    close: me.cancelNewEnc
                }
            });
        }
        /**
         * Encounter Checkout window
         * @type {*}
         */
        if(acl['access_encounter_checkout']){
            me.checkoutWindow = Ext.create('Ext.window.Window', {
                title      : i18n['checkout_and_signing'],
                closeAction: 'hide',
                modal      : true,
                layout     : 'border',
                width      : 1000,
                height     : 660,
                bodyPadding: 5,
                items      : [
                    {
                        xtype  : 'grid',
                        title  : i18n['services_diagnostics'],
                        region : 'center',
                        store  : me.EncounterOrdersStore,
                        columns: [
                            {
                                header   : i18n['code'],
                                width    : 60,
                                dataIndex: 'code'
                            },
                            {
                                header   : i18n['description'],
                                flex     : 1,
                                dataIndex: 'code_text'
                            },
                            {
                                header   : i18n['type'],
                                flex     : 1,
                                dataIndex: 'type'
                            }
                        ]
                    },
                    me.documentsimplegrid = Ext.create('App.view.patient.EncounterDocumentsGrid', {
                        title : i18n['documents'],
                        region: 'east',
                        width : 485
                    }),
                    {
                        xtype   : 'form',
                        title   : i18n['additional_info'],
                        region  : 'south',
                        split   : true,
                        height  : 245,
                        layout  : 'column',
                        defaults: {
                            xtype  : 'fieldset',
                            padding: 8
                        },
                        items   : [
                            {
                                xtype      : 'fieldcontainer',
                                columnWidth: .5,
                                defaults   : {
                                    xtype  : 'fieldset',
                                    padding: 8
                                },
                                items      : [
                                    {
                                        xtype      : 'fieldset',
                                        margin     : '5 1 5 5',
                                        padding    : 8,
                                        columnWidth: .5,
                                        height     : 115,
                                        title      : i18n['messages_notes_and_reminders'],
                                        items      : [
                                            {
                                                xtype     : 'textfield',
                                                name      : 'message',
                                                fieldLabel: i18n['message'],
                                                anchor    : '100%'
                                            },
                                            {
                                                xtype     : 'textfield',
                                                name      : 'reminder',
                                                fieldLabel: i18n['reminder'],
                                                anchor    : '100%'
                                            },
                                            {
                                                xtype     : 'textfield',
                                                grow      : true,
                                                name      : 'note',
                                                fieldLabel: i18n['note'],
                                                anchor    : '100%'
                                            }
                                        ]
                                    },
                                    {
                                        title   : 'Follow Up',
                                        margin  : '5 1 5 5',
                                        defaults: {
                                            anchor: '100%'
                                        },
                                        items   : [
                                            {
                                                xtype     : 'mitos.followupcombo',
                                                fieldLabel: i18n['time_interval'],
                                                name      : 'followup_time'
                                            },
                                            {
                                                fieldLabel: i18n['facility'],
                                                xtype     : 'mitos.activefacilitiescombo',
                                                name      : 'followup_facility'
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype      : 'fieldset',
                                margin     : 5,
                                padding    : 8,
                                columnWidth: .5,
                                layout     : 'fit',
                                height     : 208,
                                title      : i18n['warnings_alerts'],
                                items      : [
                                    {
                                        xtype      : 'grid',
                                        hideHeaders: true,
                                        store      : me.checkoutAlertArea,
                                        border     : false,
                                        rowLines   : false,
                                        header     : false,
                                        viewConfig : {
                                            stripeRows      : false,
                                            disableSelection: true
                                        },
                                        columns    : [
                                            {
                                                dataIndex: 'alertType',
                                                width    : 30,
                                                renderer : me.alertIconRenderer
                                            },
                                            {
                                                dataIndex: 'alert',
                                                flex     : 1
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                buttons    : [
                    {
                        text   : i18n['co_sign'],
                        action : 'encounter',
                        scope  : me,
                        handler: me.coSignEncounter
                    },
                    {
                        text   : i18n['sign'],
                        action : 'encounter',
                        scope  : me,
                        handler: me.signEncounter
                    },
                    {
                        text   : i18n['cancel'],
                        handler: me.cancelCheckout

                    }
                ],
                listeners  : {
                    scope: me,
                    show : function() {
                        me.EncounterOrdersStore.load({params: {eid: app.patient.eid}});
                        if(acl['access_encounter_checkout']){
                            me.checkoutAlertArea.load({params: {eid: app.patient.eid}});
                        }
                        me.documentsimplegrid.loadDocs(me.eid);
                    }

                }

            });
        }

//        me.speechDicPanel = Ext.create('Ext.form.Panel', {
//            autoScroll   : true,
//            title        : 'Speech Dictation',
//            action       : 'encounter',
//            frame        : true,
//            bodyPadding  : 5,
//            bodyStyle    : 'background-color:white',
//            fieldDefaults: { msgTarget: 'side' },
//            buttons      : [
//                {
//                    text   : 'Save',
//                    iconCls: 'save',
//                    action : 'speechDictation',
//                    scope  : me,
//                    handler: me.onSave
//                }
//            ]
//        });

        if(me.renderAdministrative){
            me.centerPanel = Ext.create('Ext.tab.Panel', {
                region     : 'center',
                margin     : '1 0 0 0',
                activeTab  : 0,
                bodyPadding: 5,
                listeners  : {
                    render: function() {
                        this.items.each(function(i) {
                            i.tab.on('click', function() {
                                me.onTapPanelChange(this);
                            });
                        });
                    }
                }
            });
        }else{
            me.centerPanel = Ext.create('Ext.panel.Panel', {
                region     : 'center',
                margin     : '1 0 0 0',
                layout:'fit',
                bodyPadding: 5
            });
        }

        /**
         * Encounter Tab Panel and its Panels...
         * @type {*}
         */
        me.encounterTabPanel = me.centerPanel.add(
            Ext.create('Ext.tab.Panel', {
                title     : me.renderAdministrative ? i18n['encounter'] : false,
                itemId    : 'encounter',
                plain     : true,
                activeItem: 0,
                border:false,
                defaults  : {
                    bodyStyle : 'padding:15px',
                    bodyBorder: true,
                    layout    : 'fit'
                }
            })
        );
        if(acl['access_patient_vitals']){
            me.vitalsPanel = me.encounterTabPanel.add(
                Ext.create('Ext.panel.Panel', {
                    title      : i18n['vitals'],
                    action     : 'encounter',
                    cls        : 'vitals-panel',
                    bodyPadding: '5 10',
                    overflowY  : 'auto',
                    frame      : true,
                    bodyStyle  : 'background-color:white',
                    layout     : {
                        type   : 'hbox',
                        stretch: true
                    },
                    items      : [
                        {
                            xtype        : 'form',
                            width        : 313,
                            margin       : 0,
                            border       : false,
                            layout       : 'anchor',
                            fieldDefaults: { msgTarget: 'side', labelAlign: 'right' },
                            buttons      : [
                                {
                                    text   : i18n['reset'],
                                    width  : 40,
                                    scope  : me,
                                    handler: me.resetVitalsForm
                                },
                                {
                                    text   : i18n['save'],
                                    action : 'vitals',
                                    width  : 40,
                                    scope  : me,
                                    handler: me.onSave
                                },
                                {
                                    text    : i18n['sign'],
                                    width   : 40,
                                    disabled: true,
                                    action  : 'signBtn',
                                    scope   : me,
                                    handler : me.onVitalsSign
                                }

                            ]
                        },
                        {
                            xtype     : 'vitalsdataview',
                            flex      : 1,
                            autoScroll: true,
                            listeners : {
                                scope       : me,
                                itemdblclick: me.onVitalsClick
                            }
                        }
                    ],
                    dockedItems: {
                        xtype: 'toolbar',
                        dock : 'top',
                        items: [
                            '->', {
                                text   : i18n['vector_charts'],
                                iconCls: 'icoChart',
                                scope  : me,
                                handler: me.onChartWindowShow
                            }
                        ]
                    }
                })
            );
        }
        if(acl['access_review_of_systems']){
            me.reviewSysPanel = me.encounterTabPanel.add(
                Ext.create('Ext.form.Panel', {
                    autoScroll   : true,
                    action       : 'encounter',
                    title        : i18n['review_of_systems'],
                    frame        : true,
                    bodyPadding  : 5,
                    bodyStyle    : 'background-color:white',
                    fieldDefaults: { msgTarget: 'side' },
                    buttons      : [
                        {
                            text   : i18n['save'],
                            iconCls: 'save',
                            action : 'reviewOfSystems',
                            scope  : me,
                            handler: me.onSave
                        }
                    ]
                })
            );
        }
        if(acl['access_review_of_systems_checks']){
            me.reviewSysCkPanel = me.encounterTabPanel.add(
                Ext.create('Ext.form.Panel', {
                    autoScroll   : true,
                    action       : 'encounter',
                    title        : i18n['review_of_systems_checks'],
                    frame        : true,
                    bodyPadding  : 5,
                    bodyStyle    : 'background-color:white',
                    fieldDefaults: { msgTarget: 'side' },
                    buttons      : [
                        {
                            text   : i18n['save'],
                            iconCls: 'save',
                            action : 'reviewOfSystemsChecks',
                            scope  : me,
                            handler: me.onSave
                        }
                    ]
                })
            );
        }
        if(acl['access_soap']){
            me.soapPanel = me.encounterTabPanel.add(
                Ext.create('Ext.form.Panel', {
                    autoScroll   : true,
                    title        : i18n['soap'],
                    action       : 'encounter',
                    frame        : true,
                    bodyPadding  : 5,
                    bodyStyle    : 'background-color:white',
                    fieldDefaults: { msgTarget: 'side' },
                    buttons      : [
                        {
                            text   : i18n['save'],
                            iconCls: 'save',
                            action : 'soap',
                            scope  : me,
                            handler: me.onSave
                        }
                    ]
                })
            );
        }
        if(acl['access_itmes_to_review']){
            me.itemsToReview = me.encounterTabPanel.add(
                Ext.create('App.view.patient.ItemsToReview', {
                    title      : i18n['items_to_review'],
                    bodyPadding: '7 5 2 5'
                })
            );
        }

        /**
         * Administravive Tab Panel and its Panels
         * @type {*}
         */
        if(acl['access_enc_hcfa'] || acl['access_enc_cpt'] || acl['access_enc_history']){
            me.administrativeTabPanel = me.centerPanel.add(
                Ext.create('Ext.tab.Panel', {
                    title     : i18n['administrative'],
                    itemId    : 'administrative',
                    plain     : true,
                    activeItem: 0,
                    defaults  : {
                        bodyStyle : 'padding:15px',
                        bodyBorder: true,
                        layout    : 'fit'
                    }
                })
            );
        }
        if(acl['access_enc_hcfa']){
            me.MiscBillingOptionsPanel = me.administrativeTabPanel.add(
                Ext.create('App.view.patient.encounter.HealthCareFinancingAdministrationOptions', {
                    autoScroll: true,
                    title     : i18n['misc_billing_options_HCFA_1500']
                })
            );
        }
        if(acl['access_enc_cpt']){
            me.CurrentProceduralTerminology = me.administrativeTabPanel.add(
                Ext.create('App.view.patient.encounter.CurrentProceduralTerminology', {
                    title: i18n['current_procedural_terminology']
                })
            );
        }
        if(acl['access_enc_history']){
            me.EncounterEventHistory = me.administrativeTabPanel.add(
                Ext.create('App.classes.grid.EventHistory', {
                    bodyStyle: 0,
                    title    : i18n['encounter_history'],
                    store    : me.encounterEventHistoryStore
                })
            );
        }

        /**
         * Progress Note
         */
        me.progressNote = Ext.create('App.view.patient.ProgressNote', {
            title       : i18n['encounter_progress_note'],
            region      : 'east',
            margin      : '0 0 0 2',
            bodyStyle   : 'padding:15px',
            width       : 500,
            collapsible : true,
            animCollapse: true,
            collapsed   : true,
            listeners   : {
                scope   : this,
                collapse: me.progressNoteCollapseExpand,
                expand  : me.progressNoteCollapseExpand
            },
            tools       : [
                {
                    type   : 'print',
                    tooltip: i18n['print_progress_note'],
                    scope  : me,
                    handler: function() {
                        var win = window.open('print.html', 'win', 'left=20,top=20,width=700,height=700,toolbar=0,resizable=1,location=1,scrollbars=1,menubar=0,directories=0');
                        var dom = me.progressNote.body.dom;
                        var wrap = document.createElement('div');
                        var html = wrap.appendChild(dom.cloneNode(true));
                        win.document.write(html.innerHTML);
                        Ext.defer(function() {
                            win.print();
                        }, 1000);

                    }
                }
            ]
        });

        me.panelToolBar =  Ext.create('Ext.toolbar.Toolbar', {
            dock    : 'top',
            defaults: {
                scope  : me,
                handler: me.onMedicalWin
            },
            items   : [
                '-', {
                    text  : i18n['immunizations'] + ' ',
                    action: 'immunization'
                }, '-', {
                    text  : i18n['allergies'] + ' ',
                    action: 'allergies'
                }, '-', {
                    text  : i18n['active_problems'] + ' ',
                    action: 'issues'
                }, '-', {
                    text  : i18n['surgeries'] + ' ',
                    action: 'surgery'
                }, '-', {
                    text  : i18n['dental'] + ' ',
                    action: 'dental'
                }, '-', {
                    text  : i18n['medications'] + ' ',
                    action: 'medications'
                }, '-', {
                    text  : i18n['laboratories'] + ' ',
                    action: 'laboratories'
                }, '-', {
                    text   : i18n['new_lab_order'],
                    action : 'lab',
                    scope  : me,
                    handler: me.newDoc
                }, '-', {
                    text   : i18n['new_xray_order'],
                    action : 'xRay',
                    scope  : me,
                    handler: me.newDoc
                }, '-', {
                    text   : i18n['new_prescription'],
                    action : 'prescription',
                    scope  : me,
                    handler: me.newDoc
                }, '-', {
                    text   : i18n['new_doctors_note'],
                    action : 'notes',
                    scope  : me,
                    handler: me.newDoc
                }, '-', '->', '-',
                me.priorityCombo = Ext.create('App.classes.combo.EncounterPriority', {
                    listeners: {
                        scope : me,
                        select: me.prioritySelect
                    }
                }), '-'
            ]
        });

        if(acl['access_encounter_checkout']){
            me.panelToolBar.add({
                text   : i18n['checkout'],
                handler: me.onCheckout
            },'-');
        }

        me.pageBody = [ me.centerPanel, me.progressNote ];
        me.listeners = {
            beforerender: me.beforePanelRender
        };
        me.callParent();
        me.down('panel').addDocked(me.panelToolBar);
    },
    newDoc                : function(btn) {
        app.onNewDocumentsWin(btn.action)
    },
    /**
     * opens the Medical window
     * @param btn
     */
    onMedicalWin          : function(btn) {
        app.onMedicalWin(btn);
    },
    /**
     * opens the Chart window
     */
    onChartWindowShow     : function() {
        app.onChartsWin();
    },

    prioritySelect: function(cmb, records) {
        this.changeEncounterPriority(records[0].data.option_value);
    },

    changeEncounterPriority:function(priority){
        var me = this,
            params = {
                pid : me.pid,
                eid : me.eid,
                priority : priority
            };
        Encounter.updateEncounterPriority(params, function(){
            app.patientButtonRemoveCls();
            app.patientBtn.addCls(priority);
        });
        me.updateProgressNote();
    },

    /**
     * Checks for opened encounters, if open encounters are
     * found alert the user, if not then open the
     * new encounter window
     */
    newEncounter  : function() {
        var me = this, form, model;
        me.resetTabs();
        if(acl['add_encounters']){
            Encounter.checkOpenEncounters(function(provider, response) {
                /** @namespace response.result.encounter */
                if(response.result.encounter) {
                    Ext.Msg.show({
                        title  : 'Oops! ' + i18n['open_encounters_found'] + '...',
                        msg    : i18n['do_you_want_to'] + ' <strong>' + i18n['continue_creating_the_new_encounters'] + '</strong><br>"' + i18n['click_no_to_review_encounter_history'] + '"',
                        buttons: Ext.Msg.YESNO,
                        icon   : Ext.Msg.QUESTION,
                        fn     : function(btn) {
                            if(btn == 'yes') {
                                form = me.newEncounterWindow.down('form');
                                form.getForm().reset();
                                model = Ext.ModelManager.getModel('App.model.patient.Encounter');
                                model = Ext.ModelManager.create({
                                    start_date: new Date()
                                }, model);
                                form.getForm().loadRecord(model);
                                me.newEncounterWindow.show();
                            } else {
                                app.openPatientVisits();
                            }
                        }
                    });
                } else {
                    form = me.newEncounterWindow.down('form');
                    form.getForm().reset();
                    model = Ext.ModelManager.getModel('App.model.patient.Encounter');
                    model = Ext.ModelManager.create({
                        start_date: new Date()
                    }, model);
                    form.getForm().loadRecord(model);
                    me.newEncounterWindow.show();
                }
            });
        }else{
            app.accessDenied();
        }
    },

    /**
     * CheckOut Functions
     */
    onCheckout: function() {
        var me = this, win = me.checkoutWindow, patient = me.getCurrPatient();
        win.setTitle(patient.name +' #'+patient.pid+ ' - ' + Ext.Date.format(me.currEncounterStartDate, 'F j, Y, g:i:s a') + ' (' + i18n['checkout'] + ')');
        win.show();
    },
    coSignEncounter: function() {

    },
    signEncounter: function() {
        this.closeEncounter();
        this.checkoutWindow.close();
    },
    cancelCheckout: function(btn) {
        var win = btn.up('window'), form = win.down('form').getForm();
        win.close();
        form.reset();
    },



    /**
     * Sends the data to the server to be saved.
     * This function needs the button action to determine
     * which form  to save.
     * @param SaveBtn
     */
    onSave: function(SaveBtn) {
        var me = this, panel = me.centerPanel.getActiveTab().getActiveTab(), form;
          if(SaveBtn.action == "encounter") {
            form = me.newEncounterWindow.down('form').getForm();
        } else if(SaveBtn.action == 'vitals') {
            form = panel.down('form').getForm();
        } else {
            form = panel.getForm();
        }
        if(form.isValid()) {
            var values = form.getValues(), store, record, storeIndex;

            if(SaveBtn.action == 'encounter') {
                ACL.hasPermission('add_encounters', function(provider, response) {
                    if(response.result) {
                        store = me.encounterStore;
                        record = form.getRecord();
                        storeIndex = store.indexOf(record);

                        if(storeIndex == -1) {
                            store.add(values);
                            record = store.last();
                        } else {
                            record.set(values);
                        }
                        record.save({
                            callback: function(store) {
                                app.patientButtonRemoveCls();
                                app.patientBtn.addCls(store.data.priority);
                                me.openEncounter(store.data.eid);
                                SaveBtn.up('window').hide();
                            }
                        });
                    } else {
                        SaveBtn.up('window').close();
                        app.accessDenied();
                    }
                });
            } else if(SaveBtn.action == 'vitals') {
                var VFields = form.getFields().items, VFieldsCount = VFields.length, emptyCount = 0;
                for(var i = 0; i < VFields.length; i++) {
                    if(VFields[i].xtype != 'mitos.datetime') {
                        if(VFields[i].value == '') {
                            emptyCount++;
                        }
                    }
                }
                if((VFieldsCount - 3) > emptyCount) {
                    ACL.hasPermission('add_vitals', function(provider, response) {
                        if(response.result) {
                            store = me.encounterStore.getAt(0).vitals();
                            record = form.getRecord();
                            values = me.addDefaultData(values);
                            storeIndex = store.indexOf(record);
                            if(storeIndex == -1) {
                                store.insert(0, values);
                            } else {
                                record.set(values);
                            }
                            store.sync({
                                scope  : me,
                                success: function() {
                                    me.msg('Sweet!', i18n['vitals_saved']);
                                    me.updateProgressNote();
                                    me.vitalsPanel.down('vitalsdataview').refresh();
                                    me.resetVitalsForm();
                                }
                            });
                        } else {
                            app.accessDenied();
                        }
                    });
                } else {
                    me.msg('Oops!', i18n['vitals_form_is_epmty'])
                }

            } else {
                ACL.hasPermission('edit_encounters', function(provider, response) {
                    if(response.result) {
                        store = me.encounterStore;
                        if(SaveBtn.action == 'reviewOfSystems') {
                            record = store.getAt(0).reviewofsystems().getAt(0);
                        } else if(SaveBtn.action == 'reviewOfSystemsChecks') {
                            record = store.getAt(0).reviewofsystemschecks().getAt(0);
                        } else if(SaveBtn.action == 'soap') {
                            record = store.getAt(0).soap().getAt(0);
                        } else if(SaveBtn.action == 'speechDictation') {
                            record = store.getAt(0).speechdictation().getAt(0);
                        }
                        values = me.addDefaultData(values);
                        record.set(values);
                        record.save({
                            callback: function() {
                                me.updateProgressNote();
                            }
                        });
                        me.msg('Sweet!', i18n['encounter_updated']);
                        me.encounterEventHistoryStore.load({params: {eid: app.patient.eid}});
                    } else {
                        app.accessDenied();
                    }
                });
            }
        }
    },

    onVitalsSign: function() {
        var me = this,
            form = me.vitalsPanel.down('form').getForm(),
            store = me.encounterStore.getAt(0).vitals(),
            record = form.getRecord();
        if(form.isValid()) {
            me.passwordVerificationWin(function(btn, password) {
                if(btn == 'ok') {
                    User.verifyUserPass(password, function(provider, response) {
                        if(response.result) {
                            record.set({auth_uid: user.id});
                            store.sync({
                                callback: function() {
                                    form.reset();
                                    me.msg('Sweet!', i18n['vitals_signed']);
                                    me.updateProgressNote();
                                    me.resetVitalsForm();
                                    me.vitalsPanel.down('vitalsdataview').refresh();
                                }
                            });

                        } else {
                            Ext.Msg.show({
                                title  : 'Oops!',
                                msg    : i18n['incorrect_password'],
                                buttons: Ext.Msg.OKCANCEL,
                                icon   : Ext.Msg.ERROR,
                                fn     : function(btn) {
                                    if(btn == 'ok') {
                                        me.onVitalsSign();
                                    }
                                }
                            });
                        }
                    });
                }
            });
        }
    },

    /**
     * Takes the form data to be send and adds the default
     * data used by every encounter form. For example
     * pid (Patient ID), eid (Encounter ID), uid (User ID),
     * and date (Current datetime as 00-00-00 00:00:00)
     * @param data
     */
    addDefaultData: function(data) {
        data.pid = this.pid;
        data.eid = this.eid;
        data.uid = user.id;
        data.date = Ext.Date.format(new Date(), 'Y-m-d H:i:s');
        return data;
    },

    /**
     * Cancels the New Encounter process, closing the window
     * and send the user to the Patient Summary panel
     */
    cancelNewEnc: function() {
        this.newEncounterWindow.close();
        app.openPatientSummary();
    },

    /**
     *
     * @param eid
     */
    openEncounter: function(eid) {
        var me = this, vitals;
        me.resetTabs();
        say('patient data');
        say(app.patient);
        me.eid = app.patient.eid = eid;
        me.encounterStore.getProxy().extraParams.eid = me.eid;
        me.encounterStore.load({
            scope   : me,
            callback: function(record) {
                var data = record[0].data;
                me.pid = data.pid;
                me.currEncounterStartDate = data.start_date;
                if(!data.close_date) {
                    me.startTimer();
                    me.setButtonsDisabled(me.getButtonsToDisable());
                } else {
                    if(me.stopTimer()) {
                        var timer = me.timer(data.start_date, data.close_date),
                            patient = app.patient;
                        me.updateTitle(patient.name +' #'+patient.pid+' - '+patient.age.str+' - ' + Ext.Date.format(me.currEncounterStartDate, 'F j, Y, g:i:s a') + ' (' + i18n['closed_encounter'] + ')', app.patient.readOnly, timer);
                        me.setButtonsDisabled(me.getButtonsToDisable(), true);
                    }
                }

                if(me.vitalsPanel){
                    vitals = me.vitalsPanel.down('vitalsdataview');
                    me.resetVitalsForm();
                    vitals.store = record[0].vitalsStore;
                    vitals.refresh();
                }


                if(me.reviewSysPanel) me.reviewSysPanel.getForm().loadRecord(record[0].reviewofsystems().getAt(0));
                if(me.reviewSysCkPanel) me.reviewSysCkPanel.getForm().loadRecord(record[0].reviewofsystemschecks().getAt(0));
                if(me.soapPanel) me.soapPanel.getForm().loadRecord(record[0].soap().getAt(0));

                //me.speechDicPanel.getForm().loadRecord(record[0].speechdictation().getAt(0));

                me.encounterEventHistoryStore.load({params: {eid: eid}});

                if(me.soapPanel) me.soapPanel.query('icdsfieldset')[0].loadIcds(record[0].soap().getAt(0).data.icdxCodes);

                if(me.CurrentProceduralTerminology) {
                    me.CurrentProceduralTerminology.encounterCptStoreLoad(me.pid, eid, function() {
                        me.CurrentProceduralTerminology.setDefaultQRCptCodes();
                    });
                }
                me.priorityCombo.setValue(data.priority);
                app.PreventiveCareWindow.loadPatientPreventiveCare();
            }
        });
    },

    /**
     * Function to close the encounter..
     */
    closeEncounter            : function() {
        var me = this, form, values;
        me.passwordVerificationWin(function(btn, password) {
            if(btn == 'ok') {
                form = me.checkoutWindow.down('form').getForm();
                values = form.getValues();
                values.eid = me.eid;
                values.pid = me.pid;
                values.close_date = Ext.Date.format(new Date(), 'Y-m-d H:i:s');
                values.signature = password;
                Encounter.closeEncounter(values, function(provider, response) {
                    if(response.result.success) {
                        if(me.stopTimer()) {
                            app.patient.eid = null;
                            app.openPatientVisits();
                            me.msg('Sweet!', i18n['encounter_closed']);
                        }
                    } else {
                        Ext.Msg.show({
                            title  : 'Oops!',
                            msg    : i18n['incorrect_password'],
                            buttons: Ext.Msg.OKCANCEL,
                            icon   : Ext.Msg.ERROR,
                            fn     : function(btn) {
                                if(btn == 'ok') {
                                    me.closeEncounter();
                                }
                            }
                        });
                    }
                });
            }
        });
    },
    /**
     * listen for the progress note panel and runs the
     * doLayout function to re-adjust the dimensions.
     */
    progressNoteCollapseExpand: function() {
        this.centerPanel.doLayout();
    },

    updateProgressNote: function() {
        var me = this;
        Encounter.getProgressNoteByEid(me.eid, function(provider, response) {
            var data = response.result;
            me.progressNote.tpl.overwrite(me.progressNote.body, data);
        });
    },

    onTapPanelChange: function(panel) {
        if(panel.card.itemId == 'encounter') {
            this.isProgressNoteCollapsed(true);
        } else {
            this.isProgressNoteCollapsed(true);
        }
    },

    isProgressNoteCollapsed: function(ans) {
        ans ? this.progressNote.collapse() : this.progressNote.expand();

    },

    onVitalsClick: function(view, record, e) {
        var me = this, form = me.vitalsPanel.down('form').getForm();
        form.reset();
        if(!record.data.auth_uid) {
            me.vitalsPanel.query('button[action="signBtn"]')[0].setDisabled(false);
            form.loadRecord(record);
        } else {
            Ext.Msg.show({
                title        : 'Oops!',
                msg          : i18n['this_column_can_not_be_modified_because_it_has_been_signed_by'] + ' ' + record.data.auth_uid,
                buttons      : Ext.Msg.OK,
                icon         : Ext.Msg.WARNING,
                animateTarget: e
            });
        }
    },

    resetVitalsForm  : function() {
        var me = this, form = me.vitalsPanel.down('form').getForm(), model = Ext.ModelManager.getModel('App.model.patient.Vitals'), newModel = Ext.ModelManager.create({}, model);
        me.vitalsPanel.query('button[action="signBtn"]')[0].setDisabled(true);
        form.loadRecord(newModel);
    },

    //***************************************************************************************************//
    //***************************************************************************************************//
    //*********    *****  ******    ****** **************************************************************//
    //*********  *  ****  ****  ***  ***** **************************************************************//
    //*********  **  ***  ***  *****  **** **************************************************************//
    //*********  ***  **  ***  *****  **** **************************************************************//
    //*********  ****  *  ****  ***  ********************************************************************//
    //*********  *****    *****    ******* **************************************************************//
    //***************************************************************************************************//
    //***************************************************************************************************//
    alertIconRenderer: function(v) {
        if(v == 1) {
            return '<img src="resources/images/icons/icoLessImportant.png" />'
        } else if(v == 2) {
            return '<img src="resources/images/icons/icoImportant.png" />'
        }
        return v;
    },

    /**
     * Start the timerTask
     */
    startTimer: function() {
        Ext.TaskManager.start(this.timerTask);
        return true;
    },
    /**
     * stops the timerTask
     */
    stopTimer : function() {
        Ext.TaskManager.stop(this.timerTask);
        return true;
    },

    /**
     * This will update the timer every sec
     */
    encounterTimer: function() {
        var me = this,
            timer = me.timer(me.currEncounterStartDate, new Date());
        me.updateTitle(app.patient.name +' #'+app.patient.pid+ ' - ' + app.patient.age.str + ' - ' + Ext.Date.format(me.currEncounterStartDate, 'F j, Y, g:i:s a') + ' (' + i18n['opened_encounter'] + ')', app.patient.readOnly, timer);
    },

    /**
     * This function use the "start time" and "stop time"
     * and gets the time elapsed between the two then
     * returns it as a timer (00:00:00)  or (1 day(s) 00:00:00)
     * if more than 24 hrs
     *
     * @param start
     * @param stop
     */
    timer: function(start, stop) {
        var ms = Ext.Date.getElapsed(start, stop), t, sec = Math.floor(ms / 1000);

        function twoDigit(d) {
            return (d >= 10) ? d : '0' + d;
        }

        var min = Math.floor(sec / 60);
        sec = sec % 60;
        t = twoDigit(sec);
        var hr = Math.floor(min / 60);
        min = min % 60;
        t = twoDigit(min) + ":" + t;
        var day = Math.floor(hr / 24);
        hr = hr % 24;
        t = twoDigit(hr) + ":" + t;
        t = (day == 0 ) ? '<span class="time">' + t + '</span>' : '<span class="day">' + day + ' ' + i18n['day_s'] + '</span><span class="time">' + t + '</span>';
        return t;
    },

    /**
     * Convert Celsius to Fahrenheit
     * @param field
     * @param e
     */
    cf: function(field, e) {
        var v = field.getValue(), temp = 9 * v / 5 + 32, res = Ext.util.Format.round(temp, 1);
        if(e.getKey() != e.TAB) {
            field.up('form').getForm().findField('temp_f').setValue(res);
        }
    },
    /**
     * Convert Fahrenheit to Celsius
     * @param field
     * @param e
     */
    fc: function(field, e) {
        var v = field.getValue(), temp = (v - 32) * 5 / 9, res = Ext.util.Format.round(temp, 1);
        if(e.getKey() != e.TAB) {
            field.up('form').getForm().findField('temp_c').setValue(res);
        }
    },

    /**
     * Convert Lbs to Kg
     * @param field
     * @param e
     */
    lbskg: function(field, e) {
        var v = field.getValue(), weight = v / 2.2, res = Ext.util.Format.round(weight, 1);
        if(e.getKey() != e.TAB) {
            field.up('form').getForm().findField('weight_kg').setValue(res);
        }
    },
    /**
     * Convert Kg to Lbs
     * @param field
     * @param e
     */
    kglbs: function(field, e) {
        var v = field.getValue(), weight = v * 2.2, res = Ext.util.Format.round(weight, 1);
        if(e.getKey() != e.TAB) {
            field.up('form').getForm().findField('weight_lbs').setValue(res);
        }
    },
    /**
     * Convert Inches to Centimeter
     * @param field
     * @param e
     */
    incm : function(field, e) {
        var v = field.getValue(), weight = v * 2.54, res = Ext.util.Format.round(weight, 1);
        if(e.getKey() != e.TAB) {
            if(field.name == 'head_circumference_in') {
                field.up('form').getForm().findField('head_circumference_cm').setValue(res);
            } else if(field.name == 'waist_circumference_in') {
                field.up('form').getForm().findField('waist_circumference_cm').setValue(res);
            } else if(field.name == 'height_in') {
                field.up('form').getForm().findField('height_cm').setValue(res);
            }
        }
    },
    /**
     * Convert Centimeter to Inches
     * @param field
     * @param e
     */
    cmin : function(field, e) {
        var v = field.getValue(), weight = v * 0.39, res = Ext.util.Format.round(weight, 1);
        if(e.getKey() != e.TAB) {
            if(field.name == 'head_circumference_cm') {
                field.up('form').getForm().findField('head_circumference_in').setValue(res);
            } else if(field.name == 'waist_circumference_cm') {
                field.up('form').getForm().findField('waist_circumference_in').setValue(res);
            } else if(field.name == 'height_cm') {
                field.up('form').getForm().findField('height_in').setValue(res);
            }
        }
    },

    bmi: function(field) {
        var form = field.up('form').getForm(), weight = form.findField('weight_kg').getValue(), height = form.findField('height_cm').getValue(), bmi, status;
        if(weight > 0 && height > 0) {
            bmi = weight / (height / 100 * height / 100);
            if(bmi < 15) {
                status = i18n['very_severely_underweight']
            } else if(bmi >= 15 && bmi < 16) {
                status = i18n['severely_underweight']
            } else if(bmi >= 16 && bmi < 18.5) {
                status = i18n['underweight']
            } else if(bmi >= 18.5 && bmi < 25) {
                status = i18n['normal']
            } else if(bmi >= 25 && bmi < 30) {
                status = i18n['overweight']
            } else if(bmi >= 30 && bmi < 35) {
                status = i18n['obese_class_1']
            } else if(bmi >= 35 && bmi < 40) {
                status = i18n['obese_class_2']
            } else if(bmi >= 40) {
                status = i18n['obese_class_3']
            }
            field.up('form').getForm().findField('bmi').setValue(Ext.util.Format.number(bmi, '0.00'));
            field.up('form').getForm().findField('bmi_status').setValue(status);

        }

    },

    /**
     * After this panel is render add the forms and listeners for conventions
     */
    beforePanelRender: function() {
        var me = this, form, defaultFields = function() {
                return [
                    {name: 'id', type: 'int'},
                    {name: 'pid', type: 'int'},
                    {name: 'eid', type: 'int'},
                    {name: 'uid', type: 'int'}
                ]
            };
        /**
         * Get 'Vitals' Form Fields and add listeners to convert values
         */
        if(me.vitalsPanel){
            me.getFormItems(me.vitalsPanel.down('form'), 4, function() {
                form = me.vitalsPanel.down('form').getForm();
                form.findField('temp_c').addListener('keyup', me.cf, me);
                form.findField('temp_f').addListener('keyup', me.fc, me);
                form.findField('weight_lbs').addListener('keyup', me.lbskg, me);
                form.findField('weight_kg').addListener('keyup', me.kglbs, me);
                form.findField('height_cm').addListener('keyup', me.cmin, me);
                form.findField('height_in').addListener('keyup', me.incm, me);
                form.findField('weight_lbs').addListener('blur', me.bmi, me);
                form.findField('weight_kg').addListener('blur', me.bmi, me);
                form.findField('height_cm').addListener('blur', me.bmi, me);
                form.findField('height_in').addListener('blur', me.bmi, me);
                form.findField('head_circumference_cm').addListener('keyup', me.cmin, me);
                form.findField('head_circumference_in').addListener('keyup', me.incm, me);
                form.findField('waist_circumference_cm').addListener('keyup', me.cmin, me);
                form.findField('waist_circumference_in').addListener('keyup', me.incm, me);
            });
        }
        /**
         * Get 'Review of Systems' Form and define the Model using the form fields
         */
        if(me.reviewSysPanel){
            me.getFormItems(me.reviewSysPanel, 8, function() {
                var formFields = me.reviewSysPanel.getForm().getFields(), modelFields = new defaultFields;
                for(var i = 0; i < formFields.items.length; i++) {
                    modelFields.push({name: formFields.items[i].name, type: 'auto'});
                }
                Ext.define('App.model.patient.ReviewOfSystems', {
                    extend   : 'Ext.data.Model',
                    fields   : modelFields,
                    proxy    : {
                        type: 'direct',
                        api : {
                            update: Encounter.updateReviewOfSystemsById
                        }
                    },
                    belongsTo: { model: 'App.model.patient.Encounter', foreignKey: 'eid' }
                });
            });
        }
        /**
         * Get 'SOAP' Form and define the Model using the form fields
         */
        if(me.soapPanel){
            me.getFormItems(me.soapPanel, 6, function() {
                var formFields = me.soapPanel.getForm().getFields(), modelFields = new defaultFields;
                for(var i = 0; i < formFields.items.length; i++) {
                    modelFields.push({name: formFields.items[i].name, type: 'auto'});
                }
                Ext.define('App.model.patient.SOAP', {
                    extend   : 'Ext.data.Model',
                    fields   : modelFields,
                    proxy    : {
                        type: 'direct',
                        api : {
                            update: Encounter.updateSoapById
                        }
                    },
                    belongsTo: { model: 'App.model.patient.Encounter', foreignKey: 'eid' }
                });
            });
        }
        /**
         * Get 'Speech Dictation' Form and define the Model using the form fields
         */
//        this.getFormItems(me.speechDicPanel, 'Speech Dictation', function() {
//            var formFields = me.speechDicPanel.getForm().getFields(), modelFields = new defaultFields;
//            for(var i = 0; i < formFields.items.length; i++) {
//                modelFields.push({name: formFields.items[i].name, type: 'auto'});
//            }
//            Ext.define('App.model.patient.SpeechDictation', {
//                extend   : 'Ext.data.Model',
//                fields   : modelFields,
//                proxy    : {
//                    type: 'direct',
//                    api : {
//                        update: Encounter.updateDictationById
//                    }
//                },
//                belongsTo: { model: 'App.model.patient.Encounter', foreignKey: 'eid' }
//            });
//        });
        /**
         * Get 'Review of Systems Check' Form and define the Model using the form fields
         */
        if(me.reviewSysCkPanel){
            me.getFormItems(me.reviewSysCkPanel, 9, function() {
                var formFields = me.reviewSysCkPanel.getForm().getFields(), modelFields = new defaultFields;
                for(var i = 0; i < formFields.items.length; i++) {
                    modelFields.push({name: formFields.items[i].name, type: 'auto'});
                }
                Ext.define('App.model.patient.ReviewOfSystemsCheck', {
                    extend   : 'Ext.data.Model',
                    fields   : modelFields,
                    proxy    : {
                        type: 'direct',
                        api : {
                            update: Encounter.updateReviewOfSystemsChecksById
                        }
                    },
                    belongsTo: { model: 'App.model.patient.Encounter', foreignKey: 'eid' }
                });
            });
        }

        if(me.newEncounterWindow) me.getFormItems(me.newEncounterWindow.down('form'), 5);
    },

    getButtonsToDisable: function() {
        var me = this, buttons = [];
        if(me.ButtonsToDisable == null){
            if(me.vitalsPanel) buttons.concat(buttons, me.vitalsPanel.query('button'));
            if(me.reviewSysPanel) buttons.concat(buttons, me.reviewSysPanel.query('button'));
            if(me.reviewSysCkPanel) buttons.concat(buttons, me.reviewSysCkPanel.query('button'));
            if(me.soapPanel) buttons.concat(buttons, me.soapPanel.query('button'));
            if(me.MiscBillingOptionsPanel) buttons.concat(buttons, me.MiscBillingOptionsPanel.query('button'));
            if(me.CurrentProceduralTerminology) buttons.concat(buttons, me.CurrentProceduralTerminology.query('button'));
            if(me.EncounterEventHistory) buttons.concat(buttons, me.EncounterEventHistory.query('button'));
            if(me.newEncounterWindow) buttons.concat(buttons, me.newEncounterWindow.query('button'));
            if(me.checkoutWindow) buttons.concat(buttons, me.checkoutWindow.query('button'));
            me.ButtonsToDisable = buttons;
        }
        return me.ButtonsToDisable;
    },

    resetTabs:function(){
        var me = this;
        if(me.renderAdministrative) me.centerPanel.setActiveTab(0);
        if(me.encounterTabPanel) me.encounterTabPanel.setActiveTab(0);
        if(me.administrativeTabPanel) me.administrativeTabPanel.setActiveTab(0);
    },

    onDocumentView: function(grid, rowIndex) {
        var rec = grid.getStore().getAt(rowIndex),
            src = rec.data.url;
        app.onDocumentView(src);
    },
    /**
     * This function is called from MitosAPP.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive      : function(callback) {
        var me = this, patient = app.patient;
        if(me.checkIfCurrPatient()) {
            me.updateTitle(patient.name + ' (' + i18n['visits'] + ')', patient.readOnly, null);
            me.setReadOnly(patient.readOnly);
            callback(true);
        } else {
            callback(false);
            me.currPatientError();
        }
    }
});

/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.patient.windows.Medical', {
	extend       : 'App.classes.window.Window',
	title        : i18n['medical_window'],
	id           : 'MedicalWindow',
	layout       : 'card',
	closeAction  : 'hide',
	height       : 750,
	width        : 1200,
	bodyStyle    : 'background-color:#fff',
	modal        : true,
	defaults     : {
		margin: 5
	},
	requires     : [ 'App.view.patient.LaboratoryResults' ],
	pid          : null,
	initComponent: function() {

		var me = this;


		me.patientImmuListStore = Ext.create('App.store.patient.PatientImmunization', {
			groupField: 'immunization_name',
			sorters   : ['immunization_name', 'administered_date'],
			listeners : {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync  : true
		});
		me.patientAllergiesListStore = Ext.create('App.store.patient.Allergies', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientMedicalIssuesStore = Ext.create('App.store.patient.MedicalIssues', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientSurgeryStore = Ext.create('App.store.patient.Surgery', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientDentalStore = Ext.create('App.store.patient.Dental', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.patientMedicationsStore = Ext.create('App.store.patient.Medications', {

			listeners: {
				scope     : me,
				beforesync: me.setDefaults
			},
			autoSync : true
		});
		me.labPanelsStore = Ext.create('App.store.patient.LaboratoryTypes', {
			autoSync: true
		});

		me.items = [
			{
				xtype   : 'grid',
				action  : 'patientImmuListGrid',
				itemId  : 'patientImmuListGrid',
				store   : me.patientImmuListStore,
				features: Ext.create('Ext.grid.feature.Grouping', {
					groupHeaderTpl   : i18n['immunization'] + ': {name} ({rows.length} Item{[values.rows.length > 1 ? "s" : ""]})',
					hideGroupedHeader: true
				}),
				columns : [
					{
						header   : i18n['immunization_name'],
						width    : 100,
						dataIndex: 'immunization_name'
					},
					{
						xtype    : 'datecolumn',
						header   : 'Date',
						format   : 'Y-m-d',
						width    : 100,
						dataIndex: 'administered_date'
					},
					{
						header   : i18n['lot_number'],
						width    : 100,
						dataIndex: 'lot_number'
					},
					{
						header   : 'Notes',
						flex     : 1,
						dataIndex: 'note'
					}
				],

				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [

						{

							title : 'general',
							xtype : 'container',
							layout: 'vbox',
							items : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 3 0', xtype: 'textfield'},
									items   : [

										{
											xtype          : 'immunizationlivesearch',
											fieldLabel     : i18n['name'],
											hideLabel      : false,
											allowBlank     : false,
											itemId         : 'immunization_name',
											name           : 'immunization_name',
											enableKeyEvents: true,
											action         : 'immunizations',
											width          : 570,
											listeners      : {
												scope : me,
												select: me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'immunization_id',
											action: 'idField'
										},
										{
											fieldLabel: i18n['administrator'],
											name      : 'administered_by',
											width     : 295,
											labelWidth: 160

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 3 0', xtype: 'textfield' },
									items   : [
										{
											fieldLabel: i18n['lot_number'],
											xtype     : 'textfield',
											width     : 300,
											name      : 'lot_number'

										},
										{

											xtype     : 'numberfield',
											fieldLabel: i18n['dosis_number'],
											width     : 260,
											name      : 'dosis'
										},

										{
											fieldLabel: i18n['info_statement_given'],
											width     : 295,
											labelWidth: 160,
											xtype     : 'datefield',
											format    : 'Y-m-d',
											name      : 'education_date'
										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 3 0', xtype: 'textfield' },
									items   : [

										{
											fieldLabel: i18n['notes'],
											xtype     : 'textfield',
											width     : 300,
											name      : 'note'

										},
										{
											fieldLabel: i18n['manufacturer'],
											xtype     : 'textfield',
											width     : 260,

											name: 'manufacturer'

										},

										{
											fieldLabel: i18n['date_administered'],
											xtype     : 'datefield',
											width     : 295,
											labelWidth: 160,
											format    : 'Y-m-d',
											name      : 'administered_date'
										}

									]

								}

							]

						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_immunizations',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},

			{
				/**
				 * Allergies Card panel
				 */
				xtype  : 'grid',
				action : 'patientAllergiesListGrid',
				store  : me.patientAllergiesListStore,
				columns: [
					{
						header   : i18n['type'],
						width    : 100,
						dataIndex: 'allergy_type'
					},
					{
						header   : i18n['name'],
						width    : 100,
						dataIndex: 'allergy'
					},
					{
						header   : i18n['location'],
						width    : 100,
						dataIndex: 'location'
					},
					{
						header   : i18n['severity'],
						flex     : 1,
						dataIndex: 'severity'
					},
					{
						text     : i18n['active'],
						width    : 55,
						dataIndex: 'alert',
						renderer : me.boolRenderer
					}
				],
				plugins: me.rowEditingAllergies = Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [

						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'mitos.allergiestypescombo',
											fieldLabel     : i18n['type'],
											name           : 'allergy_type',
											action         : 'allergy_type',
											allowBlank     : false,
											width          : 225,
											labelWidth     : 70,
											enableKeyEvents: true,
											listeners      : {
												scope   : me,
												'select': me.onAllergyTypeSelect
											}
										},
										{
											xtype     : 'mitos.allergieslocationcombo',
											fieldLabel: i18n['location'],
											name      : 'location',
											action    : 'location',
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope   : me,
												'select': me.onLocationSelect
											}

										},
										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											format    : 'Y-m-d',
											name      : 'begin_date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'mitos.allergiescombo',
											fieldLabel     : i18n['allergy'],
											action         : 'allergie_name',
											name           : 'allergy',
											enableKeyEvents: true,
											disabled       : true,
											width          : 225,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect,
												change  : me.disableFieldLogic
											}
										},
										{
											xtype          : 'medicationlivetsearch',
											fieldLabel     : i18n['allergy'],
											hideLabel      : false,
											action         : 'drug_name',
											name           : 'allergy',
											hidden         : true,
											disabled       : true,
											enableKeyEvents: true,
											width          : 225,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect,
												change  : me.disableFieldLogic
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'allergy_id',
											action: 'idField'
										},
										{
											xtype     : 'mitos.allergiesabdominalcombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											xtype     : 'mitos.allergieslocalcombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											hidden    : true,
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											xtype     : 'mitos.allergiesskincombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											hidden    : true,
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											xtype     : 'mitos.allergiessystemiccombo',
											fieldLabel: i18n['reaction'],
											name      : 'reaction',
											hidden    : true,
											disabled  : true,
											width     : 225,
											labelWidth: 70,
											listeners : {
												scope : me,
												change: me.disableFieldLogic
											}

										},
										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											format    : 'Y-m-d',
											name      : 'end_date'
										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype     : 'mitos.allergiesseveritycombo',
											fieldLabel: i18n['severity'],
											name      : 'severity',
											width     : 225,
											labelWidth: 70

										}


									]
								}
							]
						}
					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_allergies',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Active Problem Card panel
				 */

				xtype  : 'grid',
				action : 'patientMedicalListGrid',
				store  : me.patientMedicalIssuesStore,
				columns: [

					{
						header   : i18n['problem'],
						flex     : 1,
						dataIndex: 'code_text'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['begin_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'begin_date'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['end_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'end_date'
					}

				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,

					formItems: [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'liveicdxsearch',
											fieldLabel     : i18n['problem'],
											name           : 'code_text',
											allowBlank     : false,
											hideLabel      : false,
											itemId         : 'medicalissues',
											action         : 'medicalissues',
											enableKeyEvents: true,
											width          : 510,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'code',
											action: 'idField'
										},


										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'begin_date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											fieldLabel: i18n['ocurrence'],
											width     : 250,
											labelWidth: 70,
											xtype     : 'mitos.occurrencecombo',
											name      : 'ocurrence'

										},

										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 250,
											labelWidth: 70,
											name      : 'outcome'

										},
										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'end_date'

										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											xtype     : 'textfield',
											width     : 250,
											labelWidth: 70,
											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										}

									]
								}
							]
						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_active_problems',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Surgery Card panel
				 */

				xtype  : 'grid',
				action : 'patientSurgeryListGrid',
				store  : me.patientSurgeryStore,
				columns: [
					{
						header   : i18n['surgery'],
						width    : 100,
						flex     : 1,
						dataIndex: 'surgery'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'date'
					}

				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											fieldLabel     : i18n['surgery'],
											name           : 'surgery',
											hideLabel      : false,
											allowBlank     : false,
											width          : 510,
											labelWidth     : 70,
											xtype          : 'surgerieslivetsearch',
											itemId         : 'surgery',
											action         : 'surgery',
											enableKeyEvents: true,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'surgery_id',
											action: 'idField'
										},
										{
											fieldLabel: i18n['date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											fieldLabel: i18n['notes'],
											xtype     : 'textfield',
											width     : 510,
											labelWidth: 70,
											name      : 'notes'

										},
										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 200,
											labelWidth: 80,
											name      : 'outcome'

										}


									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype     : 'textfield',
											width     : 260,
											labelWidth: 70,

											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										}

									]
								}
							]
						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_surgery',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Dental Card panel
				 */

				xtype  : 'grid',
				action : 'patientDentalListGrid',
				store  : me.patientDentalStore,
				columns: [
					{
						header   : i18n['title'],
						width    : 100,
						dataIndex: 'title'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['begin_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'begin_date'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['end_date'],
						flex     : 1,
						format   : 'Y-m-d',
						dataIndex: 'end_date'
					}
				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,
					formItems   : [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{   xtype     : 'textfield',
											width     : 225,
											labelWidth: 70,
											fieldLabel: i18n['title'],
											action    : 'dental',
											name      : 'title'
										},
//                                        {
//   		                                    xtype:'textfield',
//   		                                    hidden:true,
//   		                                    name:'immunization_id',
//   		                                    action:'idField'
//   	                                    },
										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'begin_date'

										},
										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 250,
											labelWidth: 70,
											name      : 'outcome'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											xtype     : 'textfield',
											width     : 225,
											labelWidth: 70,
											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										},

										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'end_date'

										},
										{
											fieldLabel: i18n['ocurrence'],
											xtype     : 'mitos.occurrencecombo',
											width     : 250,
											labelWidth: 70,
											name      : 'ocurrence'

										}

									]

								}
							]
						}

					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_dental',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Medications panel
				 */

				xtype  : 'grid',
				action : 'patientMedicationsListGrid',
				store  : me.patientMedicationsStore,
				columns: [
					{
						header   : i18n['medication'],
						flex     : 1,
						dataIndex: 'medication'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['begin_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'begin_date'
					},
					{
						xtype    : 'datecolumn',
						header   : i18n['end_date'],
						width    : 100,
						format   : 'Y-m-d',
						dataIndex: 'end_date'
					}
				],
				plugins: Ext.create('App.classes.grid.RowFormEditing', {
					autoCancel  : false,
					errorSummary: false,
					clicksToEdit: 1,

					formItems: [
						{
							title  : i18n['general'],
							xtype  : 'container',
							padding: 10,
							layout : 'vbox',
							items  : [
								{
									/**
									 * Line one
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											xtype          : 'medicationlivetsearch',
											fieldLabel     : i18n['medication'],
											hideLabel      : false,
											itemId         : 'medication',
											name           : 'medication',
											action         : 'medication',
											enableKeyEvents: true,
											width          : 520,
											labelWidth     : 70,
											listeners      : {
												scope   : me,
												'select': me.onLiveSearchSelect
											}
										},
										{
											xtype : 'textfield',
											hidden: true,
											name  : 'medication_id',
											action: 'idField'
										},

										{
											fieldLabel: i18n['begin_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'begin_date'

										}

									]

								},
								{
									/**
									 * Line two
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [
										{
											fieldLabel: i18n['outcome'],
											xtype     : 'mitos.outcome2combo',
											width     : 250,
											labelWidth: 70,
											name      : 'outcome'
										},
										{
											xtype     : 'textfield',
											width     : 260,
											fieldLabel: i18n['referred_by'],
											name      : 'referred_by'
										},
										{
											fieldLabel: i18n['end_date'],
											xtype     : 'datefield',
											width     : 200,
											labelWidth: 80,
											format    : 'Y-m-d',
											name      : 'end_date'
										}

									]

								},
								{
									/**
									 * Line three
									 */
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { margin: '0 10 5 0' },
									items   : [

										{
											fieldLabel: i18n['ocurrence'],
											width     : 250,
											labelWidth: 70,
											xtype     : 'mitos.occurrencecombo',
											name      : 'ocurrence'

										}

									]
								}
							]
						}
					]
				}),
				bbar   : [
					'->', {
						text   : i18n['reviewed'],
						action : 'review',
						itemId : 'review_medications',
						scope  : me,
						handler: me.onReviewed
					}
				]
			},
			{
				/**
				 * Lab panel
				 */
				xtype : 'container',
				action: 'patientLabs',
				layout: 'border',
				items : [
					{
						xtype     : 'panel',
						region    : 'north',
						layout    : 'border',
						bodyBorder: false,
						border    : false,
						height    : 350,
						split     : true,
						items     : [
							{
								xtype    : 'grid',
								region   : 'west',
								width    : 290,
								split    : true,
								store    : me.labPanelsStore,
								columns  : [
									{
										header   : i18n['laboratories'],
										dataIndex: 'label',
										flex     : 1
									}
								],
								listeners: {
									scope          : me,
									itemclick      : me.onLabPanelSelected,
									selectionchange: me.onLabPanelSelectionChange
								}
							},
							{
								xtype : 'panel',
								action: 'labPreviewPanel',
								title : i18n['laboratory_preview'],
								region: 'center',
								items : [
									me.uploadWin = Ext.create('Ext.window.Window', {
										draggable  : false,
										closable   : false,
										closeAction: 'hide',
										items      : [
											{
												xtype      : 'form',
												bodyPadding: 10,
												width      : 400,
												items      : [
													{
														xtype     : 'filefield',
														name      : 'filePath',
														buttonText: i18n['select_a_file'] + '...',
														anchor    : '100%'
													}
												],
												api        : {
													submit: DocumentHandler.uploadDocument
												}
											}
										],
										buttons    : [
											{
												text   : i18n['cancel'],
												handler: function() {
													me.uploadWin.close();
												}
											},
											{
												text   : i18n['upload'],
												scope  : me,
												handler: me.onLabUpload
											}
										]
									})
								]
							}
						],
						tbar      : [
							'->',
							{
								text: i18n['scan']
							},
							'-',
							{
								text    : i18n['upload'],
								disabled: true,
								action  : 'uploadBtn',
								scope   : me,
								handler : me.onLabUploadWind
							}
						]
					},
					{
						xtype : 'container',
						region: 'center',
						layout: 'border',
						split : true,
						items : [
							{
								xtype      : 'form',
								title      : i18n['laboratory_entry_form'],
								region     : 'west',
								width      : 290,
								split      : true,
								bodyPadding: 5,
								autoScroll : true,
								bbar       : [
									'->',
									{
										text   : i18n['reset'],
										scope  : me,
										handler: me.onLabResultsReset
									},
									'-',
									{
										text   : i18n['sign'],
										scope  : me,
										handler: me.onLabResultsSign
									},
									'-',
									{
										text   : i18n['save'],
										scope  : me,
										handler: me.onLabResultsSave
									}
								]
							},
							{
								xtype : 'panel',
								region: 'center',
								height: 300,
								split : true,
								items : [
									{
										xtype    : 'lalboratoryresultsdataview',
										action   : 'lalboratoryresultsdataview',
										store    : Ext.create('App.store.patient.PatientLabsResults'),
										listeners: {
											scope    : me,
											itemclick: me.onLabResultClick
										}
									}
								]
							}
						]
					}
				]
			}
		];

		me.dockedItems = [
			{
				xtype: 'toolbar',
				items: [
					{

						text        : i18n['immunization'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						pressed     : true,
						itemId      : 'immunization',
						action      : 'immunization',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['allergies'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'allergies',
						action      : 'allergies',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['active_problems'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'issues',
						action      : 'issues',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['surgeries'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'surgery',
						action      : 'surgery',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['dental'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'dental',
						action      : 'dental',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['medications'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'medications',
						action      : 'medications',
						scope       : me,
						handler     : me.cardSwitch
					},
					'-',
					{
						text        : i18n['laboratories'],
						enableToggle: true,
						toggleGroup : 'medicalWin',
						itemId      : 'laboratories',
						action      : 'laboratories',
						scope       : me,
						handler     : me.cardSwitch
					},
					'->',
					{
						text   : i18n['add_new'],
						action : 'AddRecord',
						scope  : me,
						handler: me.onAddItem
					}
				]
			}
		];
		me.listeners = {
			scope: me,
			show : me.onMedicalWinShow,
			close : me.onMedicalWinClose
		};
		me.callParent(arguments);
	},

	//*******************************************************

	onLabPanelSelected: function(grid, model) {
		var me = this,
			formPanel = me.query('[action="patientLabs"]')[0].down('form'),
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			fields = model.data.fields;

		me.currLabPanelId = model.data.id;
		me.removeLabDocument();
		formPanel.removeAll();

		formPanel.add({
			xtype : 'textfield',
			name  : 'id',
			hidden: true
		});
		for(var i = 0; i < fields.length; i++) {
			formPanel.add({
				xtype     : 'fieldcontainer',
				layout    : 'hbox',
				margin    : 0,
				anchor    : '100%',
				fieldLabel: fields[i].code_text_short || fields[i].loinc_name,
				labelWidth: 130,
				items     : [
					{
						xtype     : 'textfield',
						name      : fields[i].loinc_number,
						flex      : 1,
						allowBlank: fields[i].required_in_panel != 'R'
					},
					{
						xtype: 'mitos.unitscombo',
						value: fields[i].default_unit,
						name : fields[i].loinc_number + '_unit',
						width: 90
					}
				]
			});
		}

		store.load({params: {parent_id: model.data.id}});
	},

	onLabPanelSelectionChange: function(model, record) {
		this.query('[action="uploadBtn"]')[0].setDisabled(record.length == 0);
	},

	onLabUploadWind: function() {
		var me = this,
			previewPanel = me.query('[action="labPreviewPanel"]')[0];
		me.uploadWin.show();
		me.uploadWin.alignTo(previewPanel.el.dom, 'tr-tr', [-5, 30])
	},

	onLabUpload: function(btn) {
		var me = this,
            formPanel = me.uploadWin.down('form'),
			form = formPanel.getForm(),
			win = btn.up('window');

		if(form.isValid()) {
            formPanel.el.mask(i18n['uploading_laboratory'] + '...');
			form.submit({
				//waitMsg: i18n['uploading_laboratory'] + '...',
				params : {
					pid    : app.patient.pid,
					docType: 'laboratory',
					eid : app.patient.eid
				},
				success: function(fp, o) {
                    formPanel.el.unmask();
                    say(o.result);
					win.close();
					me.getLabDocument(o.result.doc.url);
					me.addNewLabResults(o.result.doc.id);
				},
				failure: function(fp, o) {
                    formPanel.el.unmask();
                    say(o.result);
					win.close();
				}
			});
		}
	},

	onLabResultClick: function(view, model) {
		var me = this,
			form = me.query('[action="patientLabs"]')[0].down('form').getForm();

		if(me.currDocUrl != model.data.document_url) {
			form.reset();
			model.data.data.id = model.data.id;
			form.setValues(model.data.data);
			me.getLabDocument(model.data.document_url);
			me.currDocUrl = model.data.document_url;
		}

	},

	onLabResultsSign: function() {
		var me = this,
			form = me.query('[action="patientLabs"]')[0].down('form').getForm(),
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			values = form.getValues(),
			record = dataView.getSelectionModel().getLastSelected();

		if(form.isValid()) {
			if(values.id) {
				me.passwordVerificationWin(function(btn, password) {
					if(btn == 'ok') {
						User.verifyUserPass(password, function(provider, response) {
							if(response.result) {
								say(record);
								Medical.signPatientLabsResultById(record.data.id, function(provider, response) {
									store.load({params: {parent_id: me.currLabPanelId}});
								});
							} else {
								Ext.Msg.show({
									title  : 'Oops!',
									msg    : i18n['incorrect_password'],
									//buttons:Ext.Msg.OKCANCEL,
									buttons: Ext.Msg.OK,
									icon   : Ext.Msg.ERROR,
									fn     : function(btn) {
										if(btn == 'ok') {
											//me.onLabResultsSign();
										}
									}
								});
							}
						});
					}
				});
			} else {
				Ext.Msg.show({
					title  : 'Oops!',
					msg    : i18n['nothing_to_sign'],
					//buttons:Ext.Msg.OKCANCEL,
					buttons: Ext.Msg.OK,
					icon   : Ext.Msg.ERROR,
					fn     : function(btn) {
						if(btn == 'ok') {
							//me.onLabResultsSign();
						}
					}
				});
			}

		}
	},

	onLabResultsSave: function(btn) {
		var me = this,
			form = btn.up('form').getForm(),
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			values = form.getValues(),
			record = dataView.getSelectionModel().getLastSelected();

		if(form.isValid()) {
			Medical.updatePatientLabsResult(values, function() {
				store.load({params: {parent_id: record.data.parent_id}});
				form.reset();
			});
		}
	},


	addNewLabResults: function(docId) {
		var me = this,
			dataView = me.query('[action="lalboratoryresultsdataview"]')[0],
			store = dataView.store,
			params = {
				parent_id  : me.currLabPanelId,
				document_id: docId
			};
		Medical.addPatientLabsResult(params, function(provider, response) {
			store.load({params: {parent_id: me.currLabPanelId}});

		});
	},

	onReviewed: function(btn) {
		var me = this,
			BtnId = btn.itemId,
			params = {
				eid : app.patient.eid,
				area: BtnId
			};

		Medical.reviewMedicalWindowEncounter(params, function(provider, response) {
			me.msg('Sweet!', i18n['succefully_reviewed']);
		});
	},

	onLabResultsReset: function(btn) {
		var form = btn.up('form').getForm();
		form.reset();
	},

	getLabDocument: function(src) {
		var panel = this.query('[action="labPreviewPanel"]')[0];
		panel.remove(this.doc);
		panel.add(this.doc = Ext.create('App.classes.ManagedIframe', {src: src}));
	},

	removeLabDocument: function(src) {
		var panel = this.query('[action="labPreviewPanel"]')[0];
		panel.remove(this.doc);
	},

	//*********************************************************

	onLiveSearchSelect: function(combo, model) {

		var me = this,
			field, field2, id;
		if(combo.action == 'immunizations') {
			id = model[0].data.id;
			field = combo.up('container').query('[action="idField"]')[0];
			field.setValue(id);
		}
		else if(combo.id == 'allergie_name' || combo.id == 'drug_name') {
			id = model[0].data.id;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field.setValue(id);

		}
		else if(combo.action == 'medicalissues') {
			id = model[0].data.code;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field2 = combo.up('fieldcontainer').query('[action="medicalissues"]')[0];
			field.setValue(id);
			field2.setValue(model[0].data.code_text);
		}
		else if(combo.action == 'surgery') {
			id = model[0].data.id;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field.setValue(id);

		}
		else if(combo.action == 'medication') {
			id = model[0].data.id;
			field = combo.up('fieldcontainer').query('[action="idField"]')[0];
			field.setValue(id);
		}

	},

	onAddItem       : function() {

		var me = this, grid = this.getLayout().getActiveItem(), store = grid.store,
			params;

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			created_uid: app.user.id,
			pid        : app.patient.pid,
			create_date: new Date(),
			eid        : app.patient.eid,
			begin_date : new Date()

		});
		grid.editingPlugin.startEdit(0, 0);
		if(app.patient.eid != null) {
			if(grid.action == 'patientImmuListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_immunizations'
				};
			} else if(grid.action == 'patientAllergiesListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_allergies'
				};
			} else if(grid.action == 'patientMedicalListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_active_problems'
				};
			} else if(grid.action == 'patientSurgeryListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_surgery'
				};
			} else if(grid.action == 'patientDentalListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_dental'
				};
			} else if(grid.action == 'patientMedicationsListGrid') {
				params = {
					eid : app.patient.eid,
					area: 'review_medications'
				};
			}
			Medical.reviewMedicalWindowEncounter(params);
		}


	},
	hideall         : function(combo, skinCombo, localCombo, abdominalCombo, systemicCombo) {

		skinCombo.hide(true);
		skinCombo.setDisabled(true);
		skinCombo.reset();
		localCombo.hide(true);
		localCombo.setDisabled(true);
		localCombo.reset();
		abdominalCombo.hide(true);
		abdominalCombo.setDisabled(true);
		abdominalCombo.reset();
		systemicCombo.hide(true);
		systemicCombo.setDisabled(true);
		systemicCombo.reset();

	},
	onLocationSelect: function(combo, record) {
		var me = this,
			skinCombo = combo.up('form').getForm().findField('skinreaction'),
			localCombo = combo.up('form').getForm().findField('localreaction'),
			abdominalCombo = combo.up('form').getForm().findField('abdominalreaction'),
			systemicCombo = combo.up('form').getForm().findField('systemicreaction'),
			value = combo.getValue();

		me.hideall(combo, skinCombo, localCombo, abdominalCombo, systemicCombo);
		if(value == 'Skin') {
			skinCombo.show(true);
			skinCombo.setDisabled(false);
		} else if(value == 'Local') {
			localCombo.show(true);
			localCombo.setDisabled(false);
		} else if(value == 'Abdominal') {
			abdominalCombo.show(true);
			abdominalCombo.setDisabled(false);
		} else if(value == 'Systemic / Anaphylactic') {
			systemicCombo.show(true);
			systemicCombo.setDisabled(false);

		}
	},


	disableFieldLogic: function(field, newValue) {
		field.setDisabled((newValue == '' || newValue == null));
	},

	onAllergyTypeSelect: function(combo, record) {
		var me = this,
			allergyCombo = combo.up('form').getForm().findField('allergie_name'),
			drugLiveSearch = combo.up('form').getForm().findField('drug_name');

		if(record[0].data.allergy_type == 'Drug'){
			allergyCombo.hide(true);
			allergyCombo.setDisabled(true);
			allergyCombo.reset();
			drugLiveSearch.show(true);
			drugLiveSearch.setDisabled(false);
		}
		else if(record[0].data.allergy_type == '' || record[0].data.allergy_type == null) {
			allergyCombo.setDisabled(true);
			drugLiveSearch.hide(true);
			drugLiveSearch.setDisabled(true);
			allergyCombo.show(true);
		}
		else {
			drugLiveSearch.hide(true);
			drugLiveSearch.setDisabled(true);
			allergyCombo.show(true);
			allergyCombo.setDisabled(false);
			allergyCombo.reset();
			allergyCombo.store.load({params: {allergy_type: record[0].data.allergy_type}})
		}


	},
	setDefaults: function(options) {
		var data;

		if(options.update) {
			data = options.update[0].data;
			data.updated_uid = app.user.id;
		} else if(options.create) {

		}
	},

	cardSwitch: function(btn) {
		var me = this,
			layout = me.getLayout(),
			addBtn = me.down('toolbar').query('[action="AddRecord"]')[0],
			p = app.patient,
			title;

		me.pid = p.pid;
		addBtn.show();

		if(btn.action == 'immunization') {
			layout.setActiveItem(0);
			title = 'Immunizations';

		} else if(btn.action == 'allergies') {
			layout.setActiveItem(1);
			title = 'Allergies';

		} else if(btn.action == 'issues') {
			layout.setActiveItem(2);
			title = 'Medical Issues';

		} else if(btn.action == 'surgery') {
			layout.setActiveItem(3);
			title = 'Surgeries';

		} else if(btn.action == 'dental') {
			layout.setActiveItem(4);
			title = 'Dentals';

		} else if(btn.action == 'medications') {
			layout.setActiveItem(5);
			title = 'Medications';

		} else if(btn.action == 'laboratories') {
			layout.setActiveItem(6);
			title = 'Laboratories';
			addBtn.hide();
		}

		me.setTitle(p.name + ' (' + title + ') ' + (p.readOnly ? '-  <span style="color:red">[Read Mode]</span>' : ''));

	},

	onMedicalWinShow: function() {
		var me = this,
			reviewBts = me.query('button[action="review"]'),
			p = app.patient;

		me.pid = p.pid;
		me.setTitle(p.name + (p.readOnly ? ' <span style="color:red">[' + i18n['read_mode'] + ']</span>' : ''));
		me.setReadOnly(app.patient.readOnly);
		for(var i = 0; i < reviewBts.length; i++) {
			reviewBts[i].setVisible((app.patient.eid != null));
		}
		me.labPanelsStore.load();
		me.patientImmuListStore.load({params: {pid: app.patient.pid}});
		me.patientAllergiesListStore.load({params: {pid: app.patient.pid}});
		me.patientMedicalIssuesStore.load({params: {pid: app.patient.pid}});
		me.patientSurgeryStore.load({params: {pid: app.patient.pid}});
		me.patientDentalStore.load({params: {pid: app.patient.pid}});
		me.patientMedicationsStore.load({params: {pid: app.patient.pid}});

    },

    onMedicalWinClose:function(){
        if(app.currCardCmp.id == 'panelSummary'){

            app.currCardCmp.loadStores();

        }

    }


});
//******************************************************************************
// new.ejs.php
// New Patient Entry Form
// v0.0.1
// 
// Author: Ernest Rodriguez
// Modified: GI Technologies, 2011
// 
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.patient.VisitCheckout', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelVisitCheckout',
	pageTitle    : 'Visit Checkout',
	uses         : ['App.classes.GridPanel'],

    initComponent:function () {
        var me = this;

        me.serviceStore = Ext.create('Ext.data.Store', {
            model:'App.model.patient.CptCodes'
        });


        me.pageBody = Ext.create('Ext.panel.Panel', {
            itemId:'visitpayment',
            defaults:{
                bodyStyle : 'padding:15px',
                bodyBorder: true,
                labelWidth: 110
            },
            items:[
                {
                    xtype :'container',
                    layout:{
                        type : 'hbox',
                        align: 'stretch'
                    },
                    height: 400,
                    items:[
                        {
                            xtype : 'panel',
	                        title: i18n['copay_payment'],
	                        border:true,
	                        frame:true,
	                        bodyPadding:10,
	                        bodyBorder: true,
	                        bodyStyle:'background-color:#fff',
                            margin: 5,
                            flex  : 2,
                            items: [
                                {
                                    xtype:'container',
                                    itemId:'serviceContainer',
                                    layout:'anchor',
                                    items:[
                                        {
                                            xtype  : 'grid',
                                            frame:false,
                                            border:false,
                                            flex   : 1,
                                            maxHeight:220,
                                            store: me.serviceStore,
                                            columns:[
                                                {
                                                    xtype:'actioncolumn',
                                                    width:20,
                                                    items: [
                                                        {
                                                            icon: 'resources/images/icons/delete.png',
                                                            tooltip: i18n['remove'],
                                                            scope:me,
                                                            handler: me.onRemoveService
                                                        }
                                                    ]
                                                },
                                                {
                                                    header: i18n['item'],
                                                    flex:1,
                                                    dataIndex:'code_text',
                                                    editor: {
                                                        xtype: 'livecptsearch',
                                                        allowBlank: false
                                                    }
                                                },
                                                {
                                                    header: i18n['paid'],
                                                    xtype:'actioncolumn',
                                                    dataIndex:'charge',
                                                    width:35

                                                },
                                                {
                                                    header: i18n['charge'],
                                                    width: 95,
                                                    dataIndex:'charge',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        allowBlank: false
                                                    },
                                                    renderer:me.currencyRenderer
                                                }
                                            ],
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.CellEditing', {
                                                    clicksToEdit: 2
                                                })
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype:'container',
                                    style: 'float:right',
                                    width:208,
                                    defaults: {
                                        labelWidth: 108,
                                        labelAlign:'right',
                                        action: 'receipt',
                                        width:208,
                                        margin: '1 0'
                                    },
                                    items:[
                                        {
                                            fieldLabel: i18n['total'],
                                            xtype     : 'mitos.currency',
                                            action    : 'totalField'
                                        },
                                        {
                                            fieldLabel: i18n['amount_due'],
                                            xtype     : 'mitos.currency'
                                        },

                                        {
                                            fieldLabel: i18n['payment_amount'],
                                            xtype     : 'mitos.currency'
                                        },
                                        {
                                            fieldLabel: i18n['balance'],
                                            xtype     : 'mitos.currency'
                                        }
                                    ]
                                }
                            ],
	                        buttons:[
                                {
                                    text: i18n['add_service'],
                                    scope: me,
                                    handler:me.onNewService
                                },
                                '-',
		                        {
			                        text: i18n['add_copay'],
                                    scope:me,
			                        handler:me.onAddCoPay
		                        },
                                '->',
                                {
                                    text: i18n['add_payment'],
                                    scope: me,
                                    handler:me.onAddPaymentClick
                                },
                                {
                                    text: i18n['save'],
                                    scope:me,
                                    handler: me.onSave
                                }
	                        ]
                        },
                        {

	                        xtype:'documentsimplegrid',
	                        title: i18n['documents'],
	                        frame:true,
                            margin : '5 5 5 0',
                            flex   : 1
                        }
                    ]
                },
                {
                    xtype:'container',
                    layout:'hbox',
                    defaults: { height:195 },
                    items:[
                        {
                            xtype: 'form',
                            title: i18n['notes_and_reminders'],
	                        frame:true,
	                        flex:2,
                            action:'formnotes',
	                        bodyPadding:10,
	                        margin:'0 5 5 5',
                            bodyBorder: true,
                            bodyStyle:'background-color:#fff',
                            defaults: { anchor:'100%'},
                            items:[
                                {
                                    xtype     : 'displayfield',
                                    fieldLabel: i18n['message'],
                                    name: 'message'
                                },
                                {
                                    xtype     : 'textfield',
                                    fieldLabel: i18n['note'],
                                    name: 'new_note',
                                    action: 'notes'
                                },
                                {
                                    xtype     : 'textfield',
                                    grow      : true,
                                    fieldLabel: i18n['reminders'],
                                    name: 'new_reminder',
                                    action: 'notes'
                                }
                            ],
	                        buttons:[
                                {
                                    text: i18n['save'],
                                    scope:me,
                                    handler: me.onSaveNotes
                                },
                                '-',
                                {
                                    text: i18n['reset'],
                                    scope:me,
                                    handler:me.resetNotes
                                }
                            ]
                        },
                        {
                            xtype:'form',
                            title: i18n['followup_information'],
	                        frame:true,
	                        flex:1,
	                        margin:'0 5 5 0',
	                        bodyPadding:10,
                            bodyBorder: true,
                            bodyStyle:'background-color:#fff',
                            defaults:{
                                labelWidth:110,
                                anchor:'100%'
                            },
                            items:[
                                {
                                    fieldLabel: i18n['time'],
                                    xtype     : 'textfield',
                                    name     : 'followup_time'
                                },
                                {
                                    fieldLabel: i18n['facility'],
                                    xtype     : 'mitos.activefacilitiescombo',
	                                name:'followup_facility'
                                }
                            ],
	                        buttons:[
                                {
                                    text: i18n['schedule_appointment'],
	                                scope:me,
                                    handler:me.scheduleAppointment
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);


    },




    onNewService:function(btn){
        var grid = btn.up('panel').down('grid'),
            store = grid.store;

        say(grid);
        say(store);

        store.add({code_text:' ',charge:'20.00'});


    },

    onAddCoPay:function(btn){
        var grid = btn.up('panel').down('grid'),
            store = grid.store;

        store.add({code_text:'Co-Pay',charge:'00.00'});
    },

    onAddService:function(){
        var totalField = this.query('[action="totalField"]')[0];

    },

    onRemoveService:function(grid, rowIndex){
        var me = this,
            totalField = me.query('[action="totalField"]')[0],
            totalVal = totalField.getValue(),
            rec = grid.getStore().getAt(rowIndex),
            newVal;

        me.serviceStore.remove(rec);
        newVal = totalVal - rec.data.charge;
        totalField.setValue(newVal);

    },


    cancelPrint:function (btn) {
        var win = btn.up('window');
        win.close();
    },

	resetReceiptForm:function () {
        var fields = this.query('[action="receipt"]');
        for(var i=0; i < fields.length; i++ ){
            fields[i].reset();
        }
    },

    resetNotes:function () {
        var fields = this.query('[action="notes"]');
        for(var i=0; i < fields.length; i++ ){
            fields[i].reset();
        }
    },

    onAddPaymentClick:function() {
        app.onPaymentEntryWindow();
    },

    currencyRenderer:function(v){
        return ('<span style="float:right; padding-right:17px">$ ' + v + '</span>');
    },

    onSaveNotes: function() {
        var me = this, form, values, container = me.query('form[action="formnotes"]');
        form = container[0].getForm();

        values = form.getFieldValues();
        values.date = Ext.Date.format(new Date(), 'Y-m-d H:i:s');
        values.pid = app.patient.pid;
        values.eid = me.eid;
        values.uid = app.user.id;
        values.type ='administrative';

        if(form.isValid()) {

            Patient.addPatientNoteAndReminder(values, function(provider, response){
                if(response.result.success){
	                app.msg('Sweet!', i18n['note_and_reminder']);
                }else{
                    app.msg('Oops!', i18n['note_entry_error']);
                }
            });
        }
    },

	scheduleAppointment:function(btn){
		var form = btn.up('form').getForm(),
			time = form.findField('followup_time').getValue(),
			facility = form.findField('followup_facility').getValue(),
			calendar = Ext.getCmp('app-calendar'),
			date;


		switch(time){
			case '1 Day':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 1);
				break;
			case '2 Days':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 2);
				break;
			case '3 Days':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 3);
				break;
			case '1 Week':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 7);
				break;
			case '2 Weeks':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 14);
				break;
			case '3 Weeks':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 21);
				break;
			case '1 Month':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 1);
				break;
			case '2 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 2);
				break;
			case '3 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 3);
				break;
			case '4 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 4);
				break;
			case '5 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 5);
				break;
			case '6 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 6);
				break;
			case '1 Year':
				date = Ext.Date.add(new Date(), Ext.Date.YEAR, 1);
				break;
			case '2 Year':
				date = Ext.Date.add(new Date(), Ext.Date.YEAR, 2);
				break;
			default:
				date = new Date();
				break;
		}

		app.navigateTo('panelCalendar');
		calendar.facility = facility;
		calendar.setStartDate(date);
	},

	getVisitOtherInfo:function(){
		var me = this, forms, fields = [];
		forms = me.query('form');

		Encounter.getEncounterFollowUpInfoByEid(me.eid, function(provider, response){
			forms[1].getForm().setValues(response.result);
		});

		Encounter.getEncounterMessageByEid(me.eid, function(provider, response){
			forms[0].getForm().setValues(response.result);
		});
        for(var i=0; i < forms.length; i++ ){
            fields.push(forms[i].getForm().getFields().items);
        }
	},

	setPanel:function(eid){
		this.eid = eid || null;
		this.query('documentsimplegrid')[0].loadDocs(eid);

		this.getVisitOtherInfo();
	},

    /**
     * This function is called from MitosAPP.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback) {
        var me = this;

        if(me.checkIfCurrPatient()) {
            var patient = me.getCurrPatient();
	        me.updateTitle(patient.name + ' - #' + patient.pid + ' (' + i18n['visit_checkout'] + ')');
	        callback(true);
        } else {
            callback(false);
            me.currPatientError();
        }
    }


}); //end Checkout class

//******************************************************************************
// Billing.ejs.php
// Billing Forms
// v0.0.1
// Author: Emmanuel J. Carrasquillo
// Modified:
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.fees.Billing', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelBilling',
	pageTitle    : i18n['billing'],
	uses         : [ 'App.classes.GridPanel' ],
	pageLayout   : 'card',
	initComponent: function() {
		var me = this;
		me.paymentstatus = 1;
		me.patient = null;
		me.pastDue = null;
		me.dateRange = { start: null, limit: null };

		me.patientListStore = Ext.create('App.store.fees.Billing');

		me.encountersGrid = Ext.create('Ext.grid.Panel', {
			store     : me.patientListStore,
			selModel  : Ext.create('Ext.selection.CheckboxModel', {
				listeners: {
					scope          : me,
					selectionchange: me.onSelectionChanged
				}
			}),
			viewConfig: {
				stripeRows: true
			},
			columns   : [
				{
					header   : i18n['service_date'],
					dataIndex: 'start_date',
					width    : 200
				},
				{
					header   : i18n['patient'],
					dataIndex: 'patientName',
					width    : 200
				},
				{
					header   : i18n['primary_provider'],
					dataIndex: 'primaryProvider',
					width    : 200
				},
				{
					header   : i18n['encounter_provider'],
					dataIndex: 'encounterProvider',
					flex     : 1
				},
				{
					header   : i18n['insurance'],
					dataIndex: 'insurance',
					width    : 200
				},
				{
					header   : i18n['billing_stage'],
					dataIndex: 'billing_stage',
					renderer : me.stage,
					width    : 135
				}
			],
			tbar      : [
				{
					xtype: 'fieldcontainer',
					items: [
						{
							xtype     : 'displayfield',
							fieldLabel: i18n['patient_search']
						},
						{
							xtype: 'patienlivetsearch',

							width : 235,
							margin: '0 5 0 0'

						}
					]
				},
				{
					xtype: 'fieldcontainer',
					items: [
						{
							xtype     : 'datefield',
							fieldLabel: i18n['from'],
							labelWidth: 35,
							action    : 'datefrom',
							width     : 150
						},
						{
							xtype     : 'datefield',
							fieldLabel: i18n['to'],
							labelWidth: 35,
							action    : 'dateto',
							padding   : '0 5 0 0',
							width     : 150
						}
					]
				},
				{
					xtype: 'fieldcontainer',
					items: [
						{
							xtype     : 'mitos.providerscombo',
							labelWidth: 60,
							typeAhead : true,
							padding   : '0 5 0 5',

							fieldLabel  : i18n['provider'],
							defaultValue: 'All'

						},
						{
							xtype       : 'mitos.insurancepayertypecombo',
							labelWidth  : 60,
							padding     : '0 5 0 5',
							fieldLabel  : i18n['insurance'],
							defaultValue: 'All'


						}
					]
				},
				'->',
				{
					xtype: 'tbtext',
					text : i18n['past_due'] + ':'
				},
				{
					text           : '30+',
					enableToggle   : true,
					action         : 30,
					toggleGroup    : 'pastduedates',
					enableKeyEvents: true,
					scale          : 'large',
					listeners      : {
						scope: me,
						click: me.onBtnClicked
					}
				},
				{
					text        : '60+',
					enableToggle: true,
					action      : 60,
					scale       : 'large',
					toggleGroup : 'pastduedates',
					listeners   : {
						scope: me,
						click: me.onBtnClicked
					}
				},
				{
					text        : '120+',
					enableToggle: true,
					action      : 120,
					scale       : 'large',
					toggleGroup : 'pastduedates',
					listeners   : {
						scope: me,
						click: me.onBtnClicked
					}
				},
				{
					text        : '180+',
					enableToggle: true,
					action      : 180,
					scale       : 'large',
					toggleGroup : 'pastduedates',
					listeners   : {
						scope: me,
						click: me.onBtnClicked
					}
				}
			],
			listeners : {
				scope       : me,
				itemdblclick: me.rowDblClicked
			}
		});

		me.encounterBillingDetails = Ext.create('Ext.panel.Panel', {
			defaultTitle: i18n['encounter_billing_details'],
			title       : i18n['encounter_billing_details'],
			layout      : 'border',
			bodyStyle   : 'background-color:#fff',
			items       : [
				Ext.create('Ext.container.Container', {
					region: 'center',
					layout: 'border',
					style : 'background-color:#fff',
					items : [
						me.icdForm = Ext.create('Ext.form.Panel', {
							region: 'north',
							border: false,
							items : [
								{
									xtype : 'fieldset',
									title : i18n['encounter_general_info'],
									margin: '5 5 0 5',
									items : [
										{
											xtype    : 'fieldcontainer',
											layout   : {
												type: 'hbox'
											},
											defaults : {
												margin: '0 10'
											},
											hideLabel: true,
											items    : [
												{
													xtype     : 'textfield',
													name      : 'service_date',
													fieldLabel: i18n['service_date'],
													labelAlign: 'right',
													labelWidth: 80
												},
												{
													xtype     : 'textfield',
													name      : 'insurance',
													fieldLabel: i18n['insurance'],
													labelAlign: 'right'
												},
												{
													xtype     : 'textfield',
													name      : 'facility',
													fieldLabel: i18n['facillity'],
													labelAlign: 'right',
													labelWidth: 60,
													flex      : 1
												}
											]
										},
										{
											xtype    : 'fieldcontainer',
											layout   : {
												type: 'hbox'
											},
											defaults : {
												margin: '0 10'
											},
											hideLabel: true,
											items    : [
												{
													xtype     : 'textfield',
													name      : 'hosp_date',
													fieldLabel: i18n['hosp_date'],
													labelAlign: 'right',
													labelWidth: 80
												},
												{
													xtype     : 'textfield',
													name      : 'sec_insurance',
													fieldLabel: i18n['sec_insurance'],
													labelAlign: 'right'
												},
												{
													xtype     : 'textfield',
													name      : 'provider',
													fieldLabel: i18n['provider'],
													labelAlign: 'right',
													labelWidth: 60,
													flex      : 1
												}
											]
										},
										{
											xtype    : 'fieldcontainer',
											layout   : {
												type: 'hbox'
											},
											defaults : {
												margin: '0 10'
											},
											hideLabel: true,
											items    : [
												{
													xtype     : 'textfield',
													name      : 'authorization',
													fieldLabel: i18n['authorization'],
													labelAlign: 'right',
													labelWidth: 80
												},
												{
													xtype     : 'textfield',
													name      : 'sec_authorization',
													fieldLabel: i18n['sec_authorization'],
													labelAlign: 'right'
												},
												{
													xtype     : 'textfield',
													name      : 'referal_by',
													fieldLabel: i18n['referal_by'],
													labelAlign: 'right',
													labelWidth: 60,
													flex      : 1
												}
											]
										}
									]
								},
								{
									xtype : 'icdsfieldset',
									title : i18n['encounter_icd9'],
									margin: '5 5 0 5'
								}
							]
						}), me.cptPanel = Ext.create('App.view.patient.encounter.CurrentProceduralTerminology', {
							region: 'center'
						})
					]
				}),

				me.progressNote = Ext.create('App.view.patient.ProgressNote', {
					title       : i18n['encounter_progress_note'],
					region      : 'east',
					margin      : 5,
					bodyStyle   : 'padding:15px',
					width       : 500,
					autoScroll  : true,
					collapsible : true,
					animCollapse: true,
					collapsed   : false
				})
			],
			buttons     : [
				{
					text   : i18n['encounters'],
					scope  : me,
					action : 'encounters',
					tooltip: i18n['back_to_encounter_list'],
					handler: me.onBtnCancel
				},
				'->',
				{
					xtype : 'tbtext',
					action: 'page',
					text  : '( 1 of 1 )'
				},
				{
					text   : '<<<  ' + i18n['back'],
					scope  : me,
					action : 'back',
					tooltip: i18n['previous_encounter_details'],
					handler: me.onBtnBack
				},
				{
					text   : i18n['save'],
					scope  : me,
					action : 'save',
					tooltip: i18n['save_billing_details'],
					handler: me.onBtnSave
				},

				{
					text   : i18n['cancel'],
					scope  : me,
					action : 'cancel',
					tooltip: i18n['cancel_and_go_back_to_encounter_list'],
					handler: me.onBtnCancel
				},
				{
					text   : i18n['next'] + '  >>>',
					scope  : me,
					action : 'next',
					tooltip: i18n['next_encounter_details'],
					handler: me.onBtnNext
				}
			]
		});

		me.pageBody = [ me.encountersGrid, me.encounterBillingDetails ];
		me.callParent(arguments);
	}, // end of initComponent


	stage: function(val) {
		if(val == '1') {
			return '<img src="resources/images/icons/stage1.png" />';
		} else if(val == '2') {
			return '<img src="resources/images/icons/stage2.png" />';
		} else if(val == '3') {
			return '<img src="resources/images/icons/stage3.png" />';
		} else if(val == '4') {
			return '<img src="resources/images/icons/stage4.png" />';
		}
		return val;
	},

	onBtnClicked: function(btn) {
		var datefrom = this.query('datefield[action="datefrom"]'), dateto = this.query('datefield[action="dateto"]');
		if(btn.pressed) {
			datefrom[0].reset();
			dateto[0].reset();
			this.pastDue = btn.action;
		} else {
			this.pastDue = 0;
		}
		this.reloadGrid();

	},

	rowDblClicked: function() {
		this.goToEncounterBillingDetail();
	},

	goToEncounterBillingDetail: function() {
		this.getPageBody().getLayout().setActiveItem(1);
	},

	goToEncounterList: function() {
		this.getPageBody().getLayout().setActiveItem(0);
	},

	onSelectionChanged: function(sm, model) {
		if(model[0]) {
			var me = this, title = me.encounterBillingDetails.defaultTitle, backbtn = me.encounterBillingDetails.query('button[action="back"]'), nextBtn = me.encounterBillingDetails.query('button[action="next"]'), pageInfo = me.encounterBillingDetails.query('tbtext[action="page"]'), rowIndex = model[0].index;

			me.pid = model[0].data.pid;
			me.eid = model[0].data.eid;

			me.updateProgressNote(me.eid);
			me.encounterBillingDetails.setTitle(title + ' ( ' + model[0].data.patientName + ' )');

			me.getEncounterIcds();

			me.cptPanel.encounterCptStoreLoad(me.pid, me.eid, function() {
				me.cptPanel.setDefaultQRCptCodes();
			});

			pageInfo[0].setText( '( ' + i18n['page'] + ' (rowIndex + 1) of ' + sm.store.data.length + ' )' );
			nextBtn[0].setDisabled(rowIndex == sm.store.data.length - 1);
			backbtn[0].setDisabled(rowIndex == 0);
		}
	},

	onBtnCancel: function() {
		this.getPageBody().getLayout().setActiveItem(0);
	},

	onBtnBack: function() {
		var sm = this.encountersGrid.getSelectionModel(), currRowIndex = sm.getLastSelected().index, prevRowindex = currRowIndex - 1;
		sm.select(prevRowindex);
	},

	onBtnNext: function() {
		var sm = this.encountersGrid.getSelectionModel(), currRowIndex = sm.getLastSelected().index, nextRowindex = currRowIndex + 1;
		sm.select(nextRowindex);
	},

	onBtnSave: function() {
		var me = this, form = me.icdForm.getForm(), values = form.getValues();

		me.updateEncounterIcds(values);
		me.msg('Sweet!', i18n['encounter_billing_data_updated']);
	},

	getEncounterIcds: function() {
		var me = this;

		Encounter.getEncounterIcdxCodes({eid: me.eid}, function(provider, response) {
			me.icdForm.down('icdsfieldset').loadIcds(response.result);
		});
	},

	updateEncounterIcds: function(data) {
		var me = this;

		data.eid = me.eid;

		Encounter.updateEncounterIcdxCodes(data, function(provider, response) {
			say(response.result);
			return true;
		});
	},

	reloadGrid: function() {
		this.patientListStore.load({
			params: {
				query: {
					patient  : this.patient,
					pastDue  : this.pastDue,
					dateRange: this.dateRange
				}
			}
		});
	},

	updateProgressNote: function(eid) {
		var me = this;
		Encounter.getProgressNoteByEid(eid, function(provider, response) {
			var data = response.result;
			me.progressNote.tpl.overwrite(me.progressNote.body, data);
		});
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.reloadGrid();
		callback(true);
	}
}); //ens oNotesPage class
//******************************************************************************
// new.ejs.php
// New Patient Entry Form
// v0.0.1
//
// Author: Ernest Rodriguez
// Modified: GI Technologies, 2011
//
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.fees.PaymentEntryWindow', {
    extend:'Ext.window.Window',
    title: i18n['add_new_payment'],
    closeAction:'hide',
    modal:true,

    initComponent:function () {

        var me = this;

        me.items = [
            {
                xtype:'form',
                defaults:{ margin:5 },
                border:false,
                height:163,
                width:747,
                items:[
                    {
                        xtype:'fieldcontainer',
                        layout:'hbox',
                        items:[
                            {
                                fieldLabel: i18n['paying_entity'],
                                xtype:'mitos.payingentitycombo',
                                name:'paying_entity',
                                action: 'new_payment',
                                labelWidth:98,
                                width:220
                            },
                            {
                                xtype:'patienlivetsearch',
                                fieldLabel: i18n['from'],
                                hideLabel:false,
                                name:'payer_id',
                                action: 'new_payment',
                                anchor:null,
                                labelWidth:42,
                                width:300,
                                margin:'0 0 0 25'
                            },
                            {
                                xtype:'textfield',
                                fieldLabel: i18n['no'],
                                action: 'new_payment',
                                name:'check_number',
                                labelWidth:47,
                                width:167,
                                margin:'0 0 0 25'
                            }
                        ]
                    },
                    {
                        xtype:'fieldcontainer',
                        layout:'hbox',
                        items:[
                            {
                                fieldLabel: i18n['payment_method'],
                                xtype:'mitos.paymentmethodcombo',
                                action: 'new_payment',
                                labelWidth:98,
                                name:'payment_method',
                                width:220
                            },
                            {
                                xtype:'mitos.billingfacilitiescombo',
                                fieldLabel: i18n['pay_to'],
                                action: 'new_payment',
                                labelWidth:42,
                                name:'pay_to',
                                width:300,
                                margin:'0 0 0 25'
                            },
                            {
                                xtype:'mitos.currency',
                                fieldLabel: i18n['amount'],
                                action: 'new_payment',
                                name:'amount',
                                labelWidth:47,
                                width:167,
                                margin:'0 0 0 25',
                                enableKeyEvents:true
                            }
                        ]
                    },
                    {
                        fieldLabel: i18n['post_to_date'],
                        xtype:'datefield',
                        name:'post_to_date',
                        action:'new_payment',
                        format:'Y-m-d',
                        labelWidth:98,
                        width:220
                    },
                    {
                        fieldLabel	: i18n['note'],
                        xtype		: 'textareafield',
                        grow		: true,
                        action		: 'new_payment',
                        name		:'note',
                        labelWidth	:98,
                        anchor		:'100%'
                    }
                ]
            }
        ];

        me.buttons = [
            {
                text: i18n['save'],
                scope:me,
                handler: me.onSave
            },
            '-',
            {
                text: i18n['reset'],
                scope:me,
                handler:me.resetNewPayment
            }
        ];
        me.callParent(arguments);
    },
    onSave: function() {
        var me = this, panel, form, values;
        panel = me.down('form');
        form = panel.getForm();
        values = form.getFieldValues();
        values.date_created = Ext.Date.format(new Date(), 'Y-m-d H:i:s');

        if(form.isValid()) {

            Fees.addPayment(values, function(provider, response){
                if(response.result.success){
                    form.reset();
                    me.hide();
                }else{
                    app.msg('Oops!', i18n['payment_entry_error'])
                }

            });
        }
    },

    resetNewPayment:function () {
        var fields = this.query('[action="new_payment"]');
        for(var i=0; i < fields.length; i++ ){
            fields[i].reset();
        }
    }


}); //end Checkout class
//******************************************************************************
// new.ejs.php
// New payments Forms
// v0.0.1
// 
// Author: Ernest Rodriguez
// Modified: 
// 
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.fees.Payments', {
    extend:'App.classes.RenderPanel',
    id:'panelPayments',
    pageTitle: i18n['payments'],
    initComponent:function () {
        var me = this;

        me.encountersPaymentsStore = Ext.create('App.store.fees.EncountersPayments');

		/*
		 * Search Panel Object
		 */
	    me.searchPanel = Ext.create('Ext.panel.Panel',{
		    title: i18n['search'],
		    layout:'border',
		    items:[
			    {
			        xtype:'form',
                    height:145,
				    region:'north',
                    bodyPadding:10,
                    bodyStyle:'background-color:transparent',
                    margin:'0 0 5 0',
                    items:[
	                    {
                            xtype:'fieldcontainer',
                            layout:'hbox',
                            items:[
                                {
                                    fieldLabel: i18n['paying_entity'],
                                    xtype:'mitos.payingentitycombo',
                                    labelWidth:95,
                                    width:230
                                },
                                {
                                    xtype:'patienlivetsearch',
                                    fieldLabel: i18n['from'],
                                    hideLabel:false,
                                    itemId:'patientFrom',
                                    name:'from',
                                    anchor:null,
                                    labelWidth:42,
                                    width:470,
                                    margin:'0 0 0 25'
                                },
                                {
                                    xtype:'textfield',
                                    fieldLabel: i18n['no'],
                                    name:'transaction_number',
                                    labelWidth:45,
                                    width:230,
                                    labelAlign:'right',
                                    margin:'0 0 0 25',
                                    fieldStyle:'text-align: right;'
                                }

                            ]
                        },
                        {
                            xtype:'fieldcontainer',
                            layout:'hbox',
                            items:[
                                {
                                    fieldLabel: i18n['payment_method'],
                                    xtype:'mitos.paymentmethodcombo',
                                    labelWidth:95,
                                    width:230
                                },
                                {
                                    xtype:'mitos.billingfacilitiescombo',
                                    fieldLabel: i18n['pay_to'],
                                    labelWidth:42,
                                    width:470,
                                    margin:'0 0 0 25'
                                },
                                {
                                    xtype:'mitos.currency',
                                    fieldLabel: i18n['amount'],
                                    name:'amount',
                                    labelWidth:45,
                                    width:230,
                                    labelAlign:'right',
                                    margin:'0 0 0 25',
                                    enableKeyEvents:true
                                }
                            ]
                        },
                        {
                            xtype:'fieldcontainer',
                            layout:'hbox',
                            items:[
                                {
                                    fieldLabel: i18n['from'],
                                    xtype:'datefield',
                                    labelWidth:95,
                                    width:230
                                },
                                {
                                    fieldLabel: i18n['to'],
                                    xtype:'datefield',
                                    margin:'0 0 0 25',
                                    labelWidth:42,
                                    width:230
                                }
                            ]
                        }
                    ],
                    buttons:[
                        {
                            text: i18n['search']
                        },
                        '-',
                        {
                            text: i18n['reset']
                        },
                        '->',
                        {
                            text: i18n['add_payment'],
                            scope: me,
                            handler:me.onAddPaymentClick
                        }
                    ]
                },
			    {
				    xtype:'grid',
				    region:'center',
	                store:me.encountersPaymentsStore,
	                columns:[
	                    {
	                        header: i18n['service_date']
	                    },
	                    {
	                        header: i18n['patient_name']
	                    },
	                    {
	                        header: i18n['insurance']
	                    },
	                    {
	                        header: i18n['billing_notes'],
	                        flex:1
	                    },
	                    {
	                        header: i18n['balance_due']
	                    }
	                ]
			    }

		    ]
	    });


		/*
		 * Detail Panel Object
		 */
	    me.detailPanel = Ext.create('Ext.panel.Panel',{
		    title: i18n['detail'],
		    layout:'border',
		    items:[
			    {
			        xtype:'form',
                    height:145,
				    region:'north',
                    bodyPadding:10,
                    bodyStyle:'background-color:transparent',
                    margin:'0 0 5 0',
                    items:[
	                    {
                            xtype:'fieldcontainer',
                            layout:'hbox',
                            items:[
                                {
                                    fieldLabel: i18n['paying_entity'],
                                    xtype:'mitos.payingentitycombo',
                                    labelWidth:95,
                                    width:230
                                },
                                {
                                    xtype:'patienlivetsearch',
                                    fieldLabel: i18n['from'],
                                    hideLabel:false,
                                    itemId:'patientFrom',
                                    name:'from',
                                    anchor:null,
                                    labelWidth:42,
                                    width:470,
                                    margin:'0 0 0 25'
                                },
                                {
                                    xtype:'textfield',
                                    fieldLabel: i18n['no'],
                                    name:'transaction_number',
                                    labelWidth:45,
                                    width:230,
                                    labelAlign:'right',
                                    margin:'0 0 0 25',
                                    fieldStyle:'text-align: right;'
                                }

                            ]
                        },
                        {
                            xtype:'fieldcontainer',
                            layout:'hbox',
                            items:[
                                {
                                    fieldLabel: i18n['payment_method'],
                                    xtype:'mitos.paymentmethodcombo',
                                    labelWidth:95,
                                    width:230
                                },
                                {
                                    xtype:'mitos.billingfacilitiescombo',
                                    fieldLabel: i18n['pay_to'],
                                    labelWidth:42,
                                    width:470,
                                    margin:'0 0 0 25'
                                },
                                {
                                    xtype:'mitos.currency',
                                    fieldLabel: i18n['amount'],
                                    name:'amount',
                                    labelWidth:45,
                                    width:230,
                                    labelAlign:'right',
                                    margin:'0 0 0 25',
                                    enableKeyEvents:true
                                }
                            ]
                        },
                        {
                            xtype:'fieldcontainer',
                            layout:'hbox',
                            items:[
                                {
                                    fieldLabel: i18n['from'],
                                    xtype:'datefield',
                                    labelWidth:95,
                                    width:230
                                },
                                {
                                    fieldLabel: i18n['to'],
                                    xtype:'datefield',
                                    margin:'0 0 0 25',
                                    labelWidth:42,
                                    width:230
                                }
                            ]
                        }
                    ],
				    buttons:[
			            {
			                text: i18n['save']
			            },
			            '-',
			            {
			                text: i18n['reset']
			            },
			            '->',
			            {
			                text: i18n['add_payment'],
                            scope: me,
                            handler:me.onAddPaymentClick

			            }
			        ]
                },
			    {
				    xtype:'grid',
				    region:'center',
	                //store:me.encountersPaymentsStore,
	                plugins: Ext.create('App.classes.grid.RowFormEditing', {
                        autoCancel:false,
                        errorSummary:false,
                        clicksToEdit:1,
                        enableRemove:true,
                        listeners:{
                            scope:me,
                            beforeedit:me.beforeCptEdit
                        }
                    }),
	                columns:[
	                    {
	                        header: i18n['service_date']
	                    },
	                    {
	                        header: i18n['patient_name']
	                    },
	                    {
	                        header: i18n['insurance']
	                    },
	                    {
	                        header: i18n['billing_notes'],
	                        flex:1
	                    },
	                    {
	                        header: i18n['balance_due']
	                    }
	                ]
			    }

		    ]
	    });



	    me.tapPanel = Ext.create('Ext.tab.Panel',{
		    layout:'fit',
            items:[ me.searchPanel, me.detailPanel ]
        });

        me.pageBody = [ me.tapPanel ];
        me.callParent(arguments);
    },

    onAddPaymentClick:function() {
        app.onPaymentEntryWindow();
    },

    beforeCptEdit:function (editor, e) {
        this.addCptFields(editor.editor, e.record.data)
    },


    addCptFields:function (editor, cpts) {

        editor.removeAll();

        var testData = this.testData();
        for(var i=0; i < testData.length; i++ ){
            editor.add({
                xtype:'fieldcontainer',
                layout:'hbox',
                items:[
                    {
                        xtype:'textfield',
                        width:100,
                        name:'code',
                        readOnly:true,
                        margin:'0 5 0 10'
                    },
                    {
                        xtype:'textfield',
                        name:'copay',
                        readOnly:true,
                        width:400,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'mitos.currency',
                        name:'remaining',
                        readOnly:true,
                        width:100,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'mitos.currency',
                        name:'allowed',
                        readOnly:true,
                        width:100,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'mitos.currency',
                        name:'payment',
                        readOnly:true,
                        width:100,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'mitos.currency',
                        name:'deductible',
                        readOnly:true,
                        width:100,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'mitos.currency',
                        name:'takeback',
                        readOnly:true,
                        width:100,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'checkbox',
                        name:'takeback',
                        readOnly:true,
                        width:50,
                        margin:'0 5 0 5'
                    },
                    {
                        xtype:'textfield',
                        name:'takeback',
                        readOnly:true,
                        width:100,
                        margin:'0 5 0 5'
                    }
                ]
            });
        }
    },

    testData:function () {
        var data = [],
            i;

        floor = Math.floor((Math.random() * 6) + 1);

        for (i = 0; i < floor; i++) {
            data.push({
                data1:Math.floor(Math.max((Math.random() * 100), floor)),
                data2:Math.floor(Math.max((Math.random() * 100), floor)),
                data3:Math.floor(Math.max((Math.random() * 100), floor)),
                data4:Math.floor(Math.max((Math.random() * 100), floor)),
                data5:Math.floor(Math.max((Math.random() * 100), floor)),
                data6:Math.floor(Math.max((Math.random() * 100), floor)),
                data7:Math.floor(Math.max((Math.random() * 100), floor)),
                data8:Math.floor(Math.max((Math.random() * 100), floor)),
                data9:Math.floor(Math.max((Math.random() * 100), floor))
            });
        }
        return data;
    },


    onBtnClick:function (btn) {
        var me = this;

        if (btn.action == 'search') {
            me.forms.getLayout().setActiveItem(0);
        } else if (btn.action == 'details') {
            me.forms.getLayout().setActiveItem(1);
        } else if (btn.action == 'new') {
            me.window.show();
        }
    },

    /**
     * This function is called from MitosAPP.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive:function (callback) {
        this.encountersPaymentsStore.load();
        callback(true);
    }

}); //end Payments class


/**
 * services.ejs.php
 * Services
 * v0.0.1
 *
 * Author: Ernest Rodriguez
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 *
 * @namespace Services.getServices
 * @namespace Services.addService
 * @namespace Services.updateService
 */
Ext.define('App.view.administration.DataManager', {
    extend       : 'App.classes.RenderPanel',
    id           : 'panelDataManager',
    pageTitle    : 'Data Manager',
    uses         : [
        'App.classes.GridPanel', 'App.classes.combo.CodesTypes', 'App.classes.combo.Titles'
    ],
    initComponent: function() {
        var me = this;

        me.active = 1;
        me.dataQuery = '';
        me.code_type = 'CPT4';

        me.store = Ext.create('App.store.administration.Services');

        me.activeProblemsStore = Ext.create('App.store.administration.ActiveProblems');
        me.medicationsStore = Ext.create('App.store.administration.Medications');
        me.ImmuRelationStore = Ext.create('App.store.administration.ImmunizationRelations');
        me.labObservationsStore = Ext.create('App.store.administration.LabObservations');

        function code_type(val) {
            if(val == '1') {
                return 'CPT4';
            }  else if(val == '3') {
                return 'HCPCS';
            } else if(val == '100') {
                return 'CVX';
            }
            return val;
        }

        /**
         * CPT Container
         */
        me.cptContainer = Ext.create('Ext.container.Container', {
            layout: 'column',
            action: 'CPT4',
            //hidden: true,
            items : [

                {
                    xtype    : 'fieldcontainer',
                    msgTarget: 'under',
                    defaults : { action: 'field'  },
                    items    : [
                        {

                            fieldLabel: 'Type',
                            xtype     : 'mitos.codestypescombo',
                            name      : 'code_type'
                        },
                        {

                            fieldLabel: 'Code',
                            xtype     : 'textfield',
                            name      : 'code'
                        }

                    ]
                },
                {
                    xtype   : 'fieldcontainer',
                    margin  : '0 0 0 10',
                    defaults: { action: 'field' },
                    items   : [
                        {

                            fieldLabel: i18n['description'],
                            xtype     : 'textfield',
                            name      : 'code_text',
	                        width:500
                        }
                    ]
                },
                {
                    xtype   : 'fieldcontainer',
                    margin  : '0 0 0 20',
                    defaults: { action: 'field' },
                    items   : [

                        {

                            boxLabel: i18n['reportable'],
                            xtype   : 'checkboxfield',
                            name    : 'reportable'
                        },
                        {
                            boxLabel  : i18n['active'],
                            labelWidth: 75,
                            xtype     : 'checkboxfield',
                            name      : 'active'
                        }
                    ]
                }
            ]
        });


        /**
         * HCPSC Container
         */
        me.hpccsContainer = Ext.create('Ext.container.Container', {
            layout: 'column',
            action: 'HCPCS',
            //hidden: true,
            items : [

                {
                    xtype    : 'fieldcontainer',
                    msgTarget: 'under',
                    defaults : { action: 'field'  },
                    items    : [
                        {

                            fieldLabel: i18n['type'],
                            xtype     : 'mitos.codestypescombo',
                            name      : 'code_type'
                        },
                        {

                            fieldLabel: i18n['code'],
                            xtype     : 'textfield',
                            name      : 'code'
                        },
                        {

                            fieldLabel: i18n['modifier'],
                            xtype     : 'textfield',
                            name      : 'mod'
                        }

                    ]
                },
                {
                    xtype   : 'fieldcontainer',
                    margin  : '0 0 0 10',
                    defaults: { action: 'field' },
                    items   : [
                        {

                            fieldLabel: i18n['description'],
                            xtype     : 'textfield',
                            name      : 'code_text'
                        },
                        {
                            fieldLabel: i18n['category'],
                            xtype     : 'mitos.titlescombo',
                            name      : 'title'
                        }
                    ]
                },
                {
                    xtype   : 'fieldcontainer',
                    margin  : '0 0 0 20',
                    defaults: { action: 'field' },
                    items   : [

                        {
                            boxLabel: i18n['reportable'],
                            xtype   : 'checkboxfield',
                            name    : 'reportable'
                        }
                        ,
                        {
                            boxLabel  : i18n['active'],
                            labelWidth: 75,
                            xtype     : 'checkboxfield',
                            name      : 'active'
                        }
                    ]
                }

            ]

        });

        /**
         * CVX Container
         */
        me.cvxCintainer = Ext.create('Ext.tab.Panel', {
            //hidden   : true,
            action   : i18n['immunizations'],
            layout   : 'fit',
            plain    : true,
            listeners: {
                scope    : me,
                tabchange: me.onFormTapChange
            },
            items    : [
                {
                    title  : i18n['general'],
                    xtype  : 'container',
                    padding: 10,
                    layout : 'vbox',
                    items  : [
                        {
                            /**
                             * line One
                             */
                            xtype   : 'fieldcontainer',
                            layout  : 'hbox',
                            defaults: { margin: '0 10 5 0', action: 'field' },
                            items   : [
                                {

                                    xtype     : 'textfield',
                                    fieldLabel: i18n['immunization_name'],
                                    name      : 'code_text',
                                    labelWidth: 130,
                                    width     : 703
                                },
                                {
                                    xtype     : 'mitos.sexcombo',
                                    fieldLabel: i18n['sex'],
                                    name      : 'sex',
                                    width     : 100,
                                    labelWidth: 30

                                }

                            ]
                        },
                        {
                            /**
                             * Line two
                             */
                            xtype   : 'fieldcontainer',
                            layout  : 'hbox',
                            defaults: { margin: '0 10 5 0', action: 'field'  },
                            items   : [
                                {
                                    xtype     : 'mitos.codestypescombo',
                                    fieldLabel: i18n['coding_system'],
                                    labelWidth: 130,
                                    value     : 'CVX',
                                    name      : 'code_type',
                                    readOnly  : true

                                },
                                {
                                    xtype     : 'numberfield',
                                    fieldLabel: i18n['frequency'],
                                    margin    : '0 0 5 0',
                                    value     : 0,
                                    minValue  : 0,
                                    width     : 150,
                                    name      : 'frequency_number'

                                },
                                {
                                    xtype: 'mitos.timecombo',
                                    name : 'frequency_time',
                                    width: 100

                                },
                                {
                                    xtype     : 'numberfield',
                                    fieldLabel: i18n['age_start'],
                                    name      : 'age_start',
                                    labelWidth: 75,
                                    width     : 140,
                                    value     : 0,
                                    minValue  : 0

                                },
                                {
                                    fieldLabel: i18n['must_be_pregnant'],
                                    xtype     : 'checkboxfield',
                                    labelWidth: 105,
                                    name      : 'pregnant'


                                }
                            ]

                        },
                        {
                            /**
                             * Line three
                             */
                            xtype   : 'fieldcontainer',
                            layout  : 'hbox',
                            defaults: { margin: '0 10 5 0', action: 'field'  },
                            items   : [
                                {
                                    xtype     : 'textfield',
                                    fieldLabel: i18n['code'],
                                    name      : 'code',
                                    labelWidth: 130

                                },
                                {
                                    xtype     : 'numberfield',
                                    fieldLabel: i18n['times_to_perform'],
                                    name      : 'times_to_perform',
                                    width     : 250,
                                    value     : 0,
                                    minValue  : 0,
                                    tooltip   : i18n['greater_than_1_or_just_check_perform_once']

                                },
                                {

                                    xtype     : 'numberfield',
                                    fieldLabel: i18n['age_end'],
                                    name      : 'age_end',
                                    labelWidth: 75,
                                    width     : 140,
                                    value     : 0,
                                    minValue  : 0


                                },

                                {
                                    fieldLabel: i18n['perform_only_once'],
                                    xtype     : 'checkboxfield',
                                    labelWidth: 105,
                                    //margin  : '5 0 0 10',
                                    name      : 'only_once'
                                }

                            ]

                        }

                    ]
                },
                {
                    title  : i18n['active_problems'],
                    action : 'problems',
                    xtype  : 'grid',
                    margin : 5,
                    store  : me.ImmuRelationStore,
                    columns: [

                        {
                            xtype: 'actioncolumn',
                            width: 20,
                            items: [
                                {
                                    icon   : 'resources/images/icons/delete.png',
                                    tooltip: i18n['remove'],
                                    scope  : me,
                                    handler: me.onRemoveRelation
                                }
                            ]
                        },
                        {
                            header   : i18n['code'],
                            width    : 100,
                            dataIndex: 'code'
                        },
                        {
                            header   : i18n['description'],
                            flex     : 1,
                            dataIndex: 'code_text'
                        }

                    ],
                    bbar   : {
                        xtype     : 'liveicdxsearch',
                        margin    : 5,
                        fieldLabel: i18n['add_problem'],
                        hideLabel : false,
                        disable   : true,
                        listeners : {
                            scope : me,
                            select: me.addActiveProblem
                        }
                    }
                },
                {
                    title  : i18n['medications'],
                    action : 'medications',
                    xtype  : 'grid',
                    width  : 300,
                    store  : me.ImmuRelationStore,
                    columns: [
                        {
                            xtype: 'actioncolumn',
                            width: 20,
                            items: [
                                {
                                    icon   : 'resources/images/icons/delete.png',
                                    tooltip: i18n['remove'],
                                    scope  : me,
                                    handler: me.onRemoveRelation
                                }
                            ]
                        },
                        {
                            header   : i18n['code'],
                            width    : 100,
                            dataIndex: 'code'
                        },
                        {
                            header   : i18n['description'],
                            flex     : 1,
                            dataIndex: 'code_text'
                        }

                    ],
                    bbar   : {
                        xtype     : 'medicationlivetsearch',
                        margin    : 5,
                        fieldLabel: i18n['add_problem'],
                        hideLabel : false,
                        disable   : true,
                        listeners : {
                            scope : me,
                            select: me.addMedications
                        }
                    }
                },
                {
                    title  : i18n['labs'],
                    action : 'labs',
                    xtype  : 'grid',
                    store  : me.ImmuRelationStore,
                    width  : 300,
                    columns: [
                        {
                            xtype: 'actioncolumn',
                            width: 20,
                            items: [
                                {
                                    icon   : 'resources/images/icons/delete.png',
                                    tooltip: i18n['remove'],
                                    scope  : me,
                                    handler: me.onRemoveRelation
                                }
                            ]
                        },
                        {
                            header   : i18n['value_name'],
                            flex     : 1,
                            dataIndex: 'value_name'
                        },
                        {
                            header   : i18n['less_than'],
                            flex     : 1,
                            dataIndex: 'less_than'
                        },
                        {
                            header   : i18n['greater_than'],
                            flex     : 1,
                            dataIndex: 'greater_than'
                        },
                        {
                            header   : i18n['equal_to'],
                            flex     : 1,
                            dataIndex: 'equal_to'
                        }

                    ]
                }

            ]

        });

        /**
         * Labs Container
         */
        me.labContainer = Ext.create('Ext.container.Container', {
            action: i18n['laboratories'],
            layout: {
                type:'vbox',
                align:'stretch'
            },
            items : [
                {
                    /**
                     * line One
                     */
                    xtype   : 'fieldcontainer',
                    layout  : 'hbox',
                    defaults: { margin: '0 10 5 0', action: 'field' },
                    items   : [
                        {
                            xtype     : 'textfield',
                            fieldLabel: i18n['short_name_alias'],
                            name      : 'code_text_short',
                            labelWidth: 130,
                            width     : 500
                        },
                        {
                            xtype     : 'mitos.checkbox',
                            fieldLabel: i18n['active'],
                            name      : 'active',
                            anchor     : '100%',
                            labelWidth: 50

                        }
                    ]
                },
                {
                    xtype  : 'grid',
                    frame:true,
                    store:me.labObservationsStore,
                    plugins: Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 2
                    }),
                    columns: [
                        {
                            header: i18n['label_alias'],
                            dataIndex: 'code_text_short',
                            width:100,
                            editor:{
                                xtype:'textfield'
                            }
                        },
                        {
                            header: i18n['loinc_name'],
                            dataIndex: 'loinc_name',
                            width:200
                        },
                        {
                            header: i18n['loinc_number'],
                            dataIndex: 'loinc_number',
                            width:100
                        },
                        {
                            header: i18n['default_unit'],
                            dataIndex: 'default_unit',
                            width:100,
                            editor:{
                                xtype:'mitos.unitscombo'
                            }
                        },
                        {
                            header: i18n['req_opt'],
                            dataIndex: 'required_in_panel',
                            width:75
                        },
                        {
                            header: i18n['range_start'],
                            dataIndex: 'range_start',
                            width:100,
                            editor:{
                                xtype:'numberfield'
                            }
                        },
                        {
                            header: i18n['range_end'],
                            dataIndex: 'range_end',
                            width:100,
                            editor:{
                                xtype:'numberfield'
                            }
                        },
                        {
                            header: i18n['description'],
                            dataIndex: 'description',
                            flex:1,
                            editor:{
                                xtype:'textfield'
                            }
                        }
                    ]
//                    tbar:[
//                        {
//                            xtype:'labobservationscombo',
//                            fieldLabel:'Add Observation',
//                            width:300,
//                            listeners: {
//                                scope : me,
//                                select: me.onObservationSelect
//                            }
//                        },
//                        {
//                            text:'Add Observation',
//                            iconCls:'icoAddRecord',
//                            scope:me,
//                            handler:me.addLabObservation
//                        }
//                    ]
                }
            ]
        });

        me.dataManagerGrid = Ext.create('App.classes.GridPanel', {
            region : 'center',
            store  : me.store,
            viewConfig:{
                loadMask:true
            },
            columns: [
                {
                    width: 100,
                    header: i18n['code_type'],
                    sortable: true,
                    dataIndex: 'code_type',
                    renderer: code_type
                },
                {
                    width: 100,
                    header: i18n['code'],
                    sortable: true,
                    dataIndex: 'code'
                },
                {
                    header: i18n['short_name'],
                    dataIndex: 'code_text_short',
                    width:100,
                    flex: 1
                },
                {
                    header: i18n['long_name'],
                    sortable: true,
                    dataIndex: 'code_text',
                    flex: 2
                },
                {
                    width: 60,
                    header: i18n['active'],
                    sortable: true,
                    dataIndex: 'active',
                    renderer: me.boolRenderer
                }
            ],
            plugins: Ext.create('App.classes.grid.RowFormEditing', {
                autoCancel  : false,
                errorSummary: false,
                clicksToEdit: 1,
                listeners   : {
                    scope     : me,
                    beforeedit: me.beforeServiceEdit
                }
            }),
            tbar   : Ext.create('Ext.PagingToolbar', {
                store      : me.store,
                displayInfo: true,
                emptyMsg   : i18n['no_office_notes_to_display'],
                plugins    : Ext.create('Ext.ux.SlidingPager', {}),
                items      : ['-', {
                    xtype    : 'mitos.codestypescombo',
                    width    : 150,
                    listeners: {
                        scope : me,
                        select: me.onCodeTypeSelect
                    }
                }, '-', {
                    text   : i18n['add'],
                    iconCls: 'icoAddRecord',
                    scope  : me,
                    handler: me.onAddData
                }, '-', {
                    xtype          : 'textfield',
                    emptyText      : i18n['search'],
                    width          : 200,
                    enableKeyEvents: true,
                    listeners      : {
                        scope : me,
                        keyup : me.onSearch,
                        buffer: 500
                    }
                }, '-', {
                    xtype       : 'button',
                    text        : i18n['show_inactive_codes_only'],
                    enableToggle: true,
                    listeners   : {
                        scope : me,
                        toggle: me.onActivePressed
                    }
                }]
            })
        }); // END GRID

        me.pageBody = [ me.dataManagerGrid ];
        me.callParent();
    },

    onAddData: function() {
        var me = this;
        if(me.code_type == 'Laboratories'){
            Ext.Msg.alert('Opps!', i18n['ops_laboratories']);
        }else{
            me.dataManagerGrid.plugins[0].cancelEdit();
            me.store.add({code_type:me.code_type});
            me.dataManagerGrid.plugins[0].startEdit(0,0);
        }
    },

    beforeServiceEdit: function(context, e) {
        var me = this,
            editor = context.editor,
            code_type = e.record.data.code_type,
            grids, thisForm;

        if(code_type == 'CPT4'){
            thisForm = me.cptContainer;
        }else if(code_type == 'HCPCS'){
            thisForm = me.hpccsContainer;
        }else if(code_type == 'Immunizations'){
            thisForm = me.cvxCintainer;
        }else if(code_type == 'Laboratories'){
            thisForm = me.labContainer;
        }

        if(!editor.items.length){
            editor.add(thisForm);
            editor.setFields();
        }else if(this.currForm != thisForm){
            editor.remove(0, false);
            editor.add(thisForm);
            editor.setFields();
        }

        /**
         * find grids inside the form and load the its store with the row ID
         * @type {*}
         */
        grids = thisForm.query('grid');
        for(var i=0; i < grids.length; i++ ){
            grids[i].getStore().load({params:{selectedId:me.getSelectId()}});
        }
        this.currForm = thisForm;

    },

    onSearch: function(field) {
        var me = this, store = me.store;
        me.dataQuery = field.getValue();
        store.proxy.extraParams = {active: me.active, code_type: me.code_type, query: me.dataQuery};
        me.store.load();
    },

    onCodeTypeSelect: function(combo, record) {
        var me = this, store = me.store;
        me.code_type = record[0].data.option_value;
        store.proxy.extraParams = {active: me.active, code_type: me.code_type, query: me.dataQuery};
        me.store.load();
    },

    onObservationSelect:function(combo, record){
        say(record[0].data);
        this.labObservationsStore.add({
            lab_id: this.getSelectId(),
            observation_element_id:record[0].data.id
        });
        combo.reset();
    },

    onActivePressed: function(btn, pressed) {
        var me = this, store = me.store;
        me.active = pressed ? 0 : 1;
        store.proxy.extraParams = {active: me.active, code_type: me.code_type, query: me.dataQuery};
        me.store.load();
    },

    onFormTapChange: function(panel, newCard, oldCard) {
        this.ImmuRelationStore.proxy.extraParams = { code_type: newCard.action, selectedId: this.getSelectId() };
        this.ImmuRelationStore.load();
    },

    addActiveProblem: function(field, model) {
        this.ImmuRelationStore.add({
            code           : model[0].data.code,
            code_text      : model[0].data.code_text,
            code_type      : 'problems',
            foreign_id     : model[0].data.id,
            immunization_id: this.getSelectId()
        });
        field.reset();
    },

    addMedications: function(field, model) {
        this.ImmuRelationStore.add({
            code           : model[0].data.PRODUCTNDC,
            code_text      : model[0].data.PROPRIETARYNAME,
            code_type      : 'medications',
            foreign_id     : model[0].data.id,
            immunization_id: this.getSelectId()
        });
        field.reset();

    },

    addLabObservation:function(){
        this.labObservationsStore.add({
            lab_id: this.getSelectId(),
            label:'',
            name:'',
            //unit:'M/uL (H)',
            range_start:'-99999',
            range_end:'99999'

        });
    },

    onRemoveRelation: function(grid, rowIndex) {
        var me = this,
            store = grid.getStore(),
            record = store.getAt(rowIndex);
        store.remove(record);
    },

    getSelectId:function(){
   		var row = this.dataManagerGrid.getSelectionModel().getLastSelected();
   		return row.data.id;
   	},

    /**
     * This function is called from MitosAPP.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback) {
        this.dataManagerGrid.query('combobox')[0].setValue("CPT4");
        this.store.proxy.extraParams = {active: this.active, code_type: this.code_type, query: this.dataQuery};
        this.store.load();
        callback(true);
    }
}); //ens servicesPage class
/**
 * layout.ejs.php
 * Description: Layout Screen Panel
 * v0.0.1
 *
 * Author: GI Technologies, 2011
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 */
Ext.define('App.view.administration.Documents', {
	extend              : 'App.classes.RenderPanel',
	id                  : 'panelDocuments',
	pageTitle           : i18n['document_template_editor'],
	pageLayout          : 'border',
	uses                : [
		'App.classes.GridPanel'
	],
	initComponent       : function() {

		var me = this;

        me.templatesDocumentsStore = Ext.create('App.store.administration.DocumentsTemplates');
//		me.headersAndFooterStore   = Ext.create('App.store.administration.HeadersAndFooters');
		me.defaultsDocumentsStore   = Ext.create('App.store.administration.DefaultDocuments');

        Ext.define('tokenModel', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'title',     type: 'string'},
                {name: 'token',     type: 'string'}
            ]
        });
        me.tokenStore =  Ext.create('Ext.data.Store', {
             model: 'tokenModel',
             data : [
	             {
		             title: i18n['patient_name'],
		             token: '[PATIENT_NAME]'
	             },
	             {
		             title: i18n['patient_full_name'],
		             token: '[PATIENT_FULL_NAME]'
	             },
                 {
                     title: i18n['patient_mothers_maiden_name'],
                     token: '[PATIENT_MAIDEN_NAME]'
                 },
	             {
                     title: i18n['patient_last_name'],
                     token: '[PATIENT_LAST_NAME]'
                 },
	             {
                     title: i18n['patient_birthdate'],
                     token: '[PATIENT_BIRTHDATE]'
                 },
	             {
                     title: i18n['patient_marital_status'],
                     token: '[PATIENT_MARITAL_STATUS]'
                 },
	             {
                     title: i18n['patient_home_phone'],
                     token: '[PATIENT_HOME_PHONE]'
                 },
	             {
                     title: i18n['patient_mobile_phone'],
                     token: '[PATIENT_MOBILE_PHONE]'
                 },
	             {
                     title: i18n['patient_work_phone'],
                     token: '[PATIENT_WORK_PHONE]'
                 },
	             {
                     title: i18n['patient_email'],
                     token: '[PATIENT_EMAIL]'
                 },
	             {
                     title: i18n['patient_social_security'],
                     token: '[PATIENT_SOCIAL_SECURITY]'
                 },
                 {
                     title: i18n['patient_sex'],
                     token: '[PATIENT_SEX]'
                 },
	             {
                     title: i18n['patient_age'],
                     token: '[PATIENT_AGE]'
                 },
	             {
                     title: i18n['patient_city'],
                     token: '[PATIENT_CITY]'
                 },
	             {
                     title: i18n['patient_state'],
                     token: '[PATIENT_STATE]'
                 },
	             {
                     title: i18n['patient_home_address_line_1'],
                     token: '[PATIENT_HOME_ADDRESS_LINE_ONE]'
                 },
	             {
                     title: i18n['patient_home_address_line_1'],
                     token: '[PATIENT_HOME_ADDRESS_LINE_TWO]'
                 },
	             {
		             title: i18n['patient_home_address_zip_code'],
		             token: '[PATIENT_HOME_ADDRESS_ZIP_CODE]'
	             },
	             {
		             title: i18n['patient_home_address_city'],
		             token: '[PATIENT_HOME_ADDRESS_CITY]'
	             },
	             {
		             title: i18n['patient_home_address_state'],
		             token: '[PATIENT_HOME_ADDRESS_STATE]'
	             },
	             {
                     title: i18n['patient_postal_address_line_1'],
                     token: '[PATIENT_POSTAL_ADDRESS_LINE_ONE]'
                 },
	             {
                     title: i18n['patient_postal_address_line_2'],
                     token: '[PATIENT_POSTAL_ADDRESS_LINE_TWO]'
                 },
	             {
		             title: i18n['patient_postal_address_zip_code'],
		             token: '[PATIENT_POSTAL_ADDRESS_ZIP_CODE]'
	             },
	             {
		             title: i18n['patient_postal_address_city'],
		             token: '[PATIENT_POSTAL_ADDRESS_CITY]'
	             },
	             {
		             title: i18n['patient_postal_address_state'],
		             token: '[PATIENT_POSTAL_ADDRESS_STATE]'
	             },
	             {
                     title: i18n['patient_tabacco'],
                     token: '[PATIENT_TABACCO]'
                 },
	             {
                     title: i18n['patient_alcohol'],
                     token: '[PATIENT_ALCOHOL]'
                 },
	             {
                     title: i18n['patient_drivers_license'],
                     token: '[PATIENT_DRIVERS_LICENSE]'
                 },
	             {
                     title: i18n['patient_employeer'],
                     token: '[PATIENT_EMPLOYEER]'
                 },
                 {
                     title: i18n['patient_first_emergency_contact'],
                     token: '[PATIENT_FIRST_EMERGENCY_CONTACT]'
                 },
	             {
                     title: i18n['patient_referral'],
                     token: '[PATIENT_REFERRAL]'
                 },
	             {
                     title: i18n['patient_date_referred'],
                     token: '[PATIENT_REFERRAL_DATE]'
                 },
                 {
                     title: i18n['patient_balance'],
                     token: '[PATIENT_BALANCE]'
                 },
                 {
                     title: i18n['patient_picture'],
                     token: '[PATIENT_PICTURE]'
                 },
                 {
                     title: i18n['patient_primary_plan'],
                     token: '[PATIENT_PRIMARY_PLAN]'
                 },
                 {
                     title: i18n['patient_primary_plan_insured_person'],
                     token: '[PATIENT_PRIMARY_INSURED_PERSON]'
                 },
                 {
                     title: i18n['patient_primary_plan_contract_number'],
                     token: '[PATIENT_PRIMARY_CONTRACT_NUMBER]'
                 },
                 {
                     title: i18n['patient_primary_plan_expiration_date'],
                     token: '[PATIENT_PRIMARY_EXPIRATION_DATE]'
                 },
                 {
                     title: i18n['patient_secondary_plan'],
                     token: '[PATIENT_SECONDARY_PLAN]'
                 },
                 {
                     title: i18n['patient_secondary_insured_person'],
                     token: '[PATIENT_SECONDARY_INSURED_PERSON]'
                 },
                 {
                     title: i18n['patient_secondary_plan_contract_number'],
                     token: '[PATIENT_SECONDARY_CONTRACT_NUMBER]'
                 },
                 {
                     title: i18n['patient_secondary_plan_expiration_date'],
                     token: '[PATIENT_SECONDARY_EXPIRATION_DATE]'
                 },
                 {
                     title: i18n['patient_referral_details'],
                     token: '[PATIENT_REFERRAL_DETAILS]'
                 },
                 {
                     title: i18n['patient_referral_reason'],
                     token: '[PATIENT_REFERRAL_REASON]'
                 },
                 {
                     title: i18n['patient_head_circumference'],
                     token: '[PATIENT_HEAD_CIRCUMFERENCE]'
                 },
                 {
                     title: i18n['patient_height'],
                     token: '[PATIENT_HEIGHT]'
                 },
                 {
                     title: i18n['patient_pulse'],
                     token: '[PATIENT_PULSE]'
                 },
                 {
                     title: i18n['patient_respiratory_rate'],
                     token: '[PATIENT_RESPIRATORY_RATE]'
                 },
                 {
                     title: i18n['patient_temperature'],
                     token: '[PATIENT_TEMPERATURE]'
                 },
                 {
                     title: i18n['patient_weight'],
                     token: '[PATIENT_WEIGHT]'
                 },
                 {
                     title: i18n['patient_pulse_oximeter'],
                     token: '[PATIENT_PULSE_OXIMETER]'
                 },
                 {
                     title: i18n['patient_blood_preasure'],
                     token: '[PATIENT_BLOOD_PREASURE]'
                 },
                 {
                     title: i18n['patient_body_mass_index'],
                     token: '[PATIENT_BMI]'
                 },
                 {
                     title: i18n['patient_active_allergies_list'],
                     token: '[PATIENT_ACTIVE_ALLERGIES_LIST]'
                 },
	             {
                     title: i18n['patient_inactive_allergies_list'],
                     token: '[PATIENT_INACTIVE_ALLERGIES_LIST]'
                 },
	             {
                     title: i18n['patient_active_medications_list'],
                     token: '[PATIENT_ACTIVE_MEDICATIONS_LIST]'
                 },
	             {
                     title: i18n['patient_inactive_medications_list'],
                     token: '[PATIENT_INACTIVE_MEDICATIONS_LIST]'
                 },
	             {
		             title: i18n['patient_active_problems_list'],
		             token: '[PATIENT_ACTIVE_PROBLEMS_LIST]'
	             },
	             {
		             title: i18n['patient_inactive_problems_list'],
		             token: '[PATIENT_INACTIVE_PROBLEMS_LIST]'
	             },
	             {
                     title: i18n['patient_active_immunizations_list'],
                     token: '[PATIENT_ACTIVE_IMMUNIZATIONS_LIST]'
                 },
	             {
                     title: i18n['patient_inactive_immunizations_list'],
                     token: '[PATIENT_INACTIVE_IMMUNIZATIONS_LIST]'
                 },
	             {
                     title: i18n['patient_active_dental_list'],
                     token: '[PATIENT_ACTIVE_DENTAL_LIST]'
                 },
	             {
                     title: i18n['patient_inactive_dental_list'],
                     token: '[PATIENT_INACTIVE_DENTAL_LIST]'
                 },
	             {
                     title: i18n['patient_active_surgery_list'],
                     token: '[PATIENT_ACTIVE_SURGERY_LIST]'
                 },
	             {
                     title: i18n['patient_inactive_surgery_list'],
                     token: '[PATIENT_INACTIVE_SURGERY_LIST]'
                 },
                 {
                     title: i18n['encounter_date'],
                     token: '[ENCOUNTER_DATE]'
                 },
                 {
                     title: i18n['encounter_subjective_part'],
                     token: '[ENCOUNTER_SUBJECTIVE]'
                 },
                 {
                     title: i18n['encounter_subjective_part'],
                     token: '[ENCOUNTER_OBJECTIVE]'
                 },
                 {
                     title: i18n['encounter_assesment'],
                     token: '[ENCOUNTER_ASSESMENT]'
                 },
	             {
                     title: i18n['encounter_assesment_list'],
                     token: '[ENCOUNTER_ASSESMENT_LIST]'
                 },
	             {
                     title: i18n['encounter_assesment_code_list'],
                     token: '[ENCOUNTER_ASSESMENT_CODE_LIST]'
                 },
	             {
                     title: i18n['encounter_assesment_full_list'],
                     token: '[ENCOUNTER_ASSESMENT_FULL_LIST]'
                 },
                 {
                     title: i18n['encounter_plan'],
                     token: '[ENCOUNTER_PLAN]'
                 },
                 {
                     title: i18n['encounter_medications'],
                     token: '[ENCOUNTER_MEDICATIONS]'
                 },
                 {
                     title: i18n['encounter_immunizations'],
                     token: '[ENCOUNTER_IMMUNIZATIONS]'
                 },
                 {
                     title: i18n['encounter_allergies'],
                     token: '[ENCOUNTER_ALLERGIES]'
                 },
                 {
                     title: i18n['encounter_active_problems'],
                     token: '[ENCOUNTER_ACTIVE_PROBLEMS]'
                 },
                 {
                     title: i18n['encounter_surgeries'],
                     token: '[ENCOUNTER_SURGERIES]'
                 },
                 {
                     title: i18n['encounter_dental'],
                     token: '[ENCOUNTER_DENTAL]'
                 },
                 {
                     title: i18n['encounter_laboratories'],
                     token: '[ENCOUNTER_LABORATORIES]'
                 },
                 {
                     title: i18n['encounter_procedures_terms'],
                     token: '[ENCOUNTER_PROCEDURES_TERMS]'
                 },
                 {
                     title: i18n['encounter_cpt_codes_list'],
                     token: '[ENCOUNTER_CPT_CODES]'
                 },
                 {
                     title: i18n['encounter_signature'],
                     token: '[ENCOUNTER_SIGNATURE]'
                 },
                 {
                     title: i18n['orders_laboratories'],
                     token: '[ORDERS_LABORATORIES]'
                 },
                 {
                     title: i18n['orders_x_rays'],
                     token: '[ORDERS_XRAYS]'
                 },
                 {
                     title: i18n['orders_referral'],
                     token: '[ORDERS_REFERRAL]'
                 },
                 {
                     title: i18n['orders_other'],
                     token: '[ORDERS_OTHER]'
                 },
                 {
                     title: i18n['current_date'],
                     token: '[CURRENT_DATE]'
                 },
                 {
                     title: i18n['current_time'],
                     token: '[CURRENT_TIME]'
                 },
                 {
                     title: i18n['current_user_name'],
                     token: '[CURRENT_USER_NAME]'
                 },
                 {
                     title: i18n['current_user_full_name'],
                     token: '[CURRENT_USER_FULL_NAME]'
                 },
                 {
                     title: i18n['current_user_license_number'],
                     token: '[CURRENT_USER_LICENSE_NUMBER]'
                 },
                 {
                     title: i18n['current_user_dea_license_number'],
                     token: '[CURRENT_USER_DEA_LICENSE_NUMBER]'
                 },
	             {
                     title: i18n['current_user_dm_license_number'],
                     token: '[CURRENT_USER_DM_LICENSE_NUMBER]'
                 },
	             {
                     title: i18n['current_user_npi_license_number'],
                     token: '[CURRENT_USER_NPI_LICENSE_NUMBER]'
                 }//,
//                 {
//                     title: '',
//                     token: '[]'
//                 },
//                 {
//                     title: '',
//                     token: '[]'
//                 },
//                 {
//                     title: '',
//                     token: '[]'
//                 },
//                 {
//                     title: '',
//                     token: '[]'
//                 },
//                 {
//                     title: '',
//                     token: '[]'
//                 },
//                 {
//                     title: '',
//                     token: '[]'
//                 },
//                 {
//                     title: '',
//                     token: '[]'
//                 }
             ]
         });



//		me.HeaderFootergrid = Ext.create('Ext.grid.Panel', {
//			title      : i18n['header_footer_templates'],
//			region     : 'south',
//			height     : 250,
//			split      : true,
//			hideHeaders: true,
//			store      : me.headersAndFooterStore,
//			columns    : [
//				{
//					flex     : 1,
//					sortable : true,
//					dataIndex: 'title',
//                    editor:{
//                        xtype:'textfield',
//                        allowBlank:false
//                    }
//				},
//				{
//					icon: 'resources/images/icons/delete.png',
//					tooltip: i18n['remove'],
//					scope:me,
//					handler: me.onRemoveDocument
//				}
//			],
//			listeners  : {
//				scope    : me,
//				itemclick: me.onDocumentsGridItemClick
//			},
//			tbar       :[
//                '->',
//                {
//                    text : i18n['new'],
//                    scope: me,
//                    handler: me.newHeaderOrFooterTemplate
//                }
//            ],
//            plugins:[
//                me.rowEditor2 = Ext.create('Ext.grid.plugin.RowEditing', {
//                    clicksToEdit: 2
//                })
//
//            ]
//		});

		me.DocumentsDefaultsGrid = Ext.create('Ext.grid.Panel', {
			title      : i18n['documents_defaults'],
			region     : 'north',
			width      : 250,
			border     : true,
			split      : true,
            store      : me.defaultsDocumentsStore,
			hideHeaders: true,
			columns    : [
				{
					flex     : 1,
					sortable : true,
					dataIndex: 'title',
                    editor:{
                        xtype:'textfield',
                        allowBlank:false
                    }
				},
				{
					icon: 'resources/images/icons/delete.png',
					tooltip: i18n['remove'],
					scope:me,
					handler: me.onRemoveDocument
				}
			],
			listeners  : {
				scope    : me,
				itemclick: me.onDocumentsGridItemClick
			},
            tbar       :[
                '->',
                {
                    text : i18n['new'],
                    scope: me,
                    handler: me.newDefaultTemplates
                }
            ],
            plugins:[
                me.rowEditor3 = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2
                })

            ]
		});

		me.DocumentsGrid = Ext.create('Ext.grid.Panel', {
			title      : i18n['document_templates'],
			region     : 'center',
			width      : 250,
			border     : true,
			split      : true,
            store      : me.templatesDocumentsStore,
			hideHeaders: true,
			columns    : [
				{
					flex     : 1,
					sortable : true,
					dataIndex: 'title',
                    editor:{
                        xtype:'textfield',
                        allowBlank:false
                    }
				},
				{
					icon: 'resources/images/icons/delete.png',
					tooltip: i18n['remove'],
					scope:me,
					handler: me.onRemoveDocument
				}
			],
			listeners  : {
				scope    : me,
				itemclick: me.onDocumentsGridItemClick
			},
            tbar       :[
                '->',
                {
                    text : i18n['new'],
                    scope: me,
                    handler: me.newDocumentTemplate
                }
            ],
            plugins:[
                me.rowEditor = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2
                })

            ]
		});

        me.LeftCol = Ext.create('Ext.container.Container',{
            region:'west',
            layout:'border',
            width      : 250,
            border     : false,
            split      : true,
            items:[  me.DocumentsDefaultsGrid, me.DocumentsGrid ]
        });

		me.TeamplateEditor = Ext.create('Ext.form.Panel', {
			title      : i18n['document_editor'],
			region     : 'center',
            layout     : 'fit',
            autoScroll : false,
			border     : true,
			split      : true,
			hideHeaders: true,
            items: {
                xtype: 'htmleditor',
	            enableFontSize: false,
                name:'body',
                margin:5
            },
            buttons    :[
                {
                    text     : i18n['save'],
                    scope    : me,
                    handler  : me.onSaveEditor
                },
                {
                    text     : i18n['cancel'],
                    scope    : me,
                    handler  : me.onCancelEditor
                }
            ]
		});


        me.TokensGrid = Ext.create('App.classes.GridPanel', {
            title      : i18n['available_tokens'],
            region     : 'east',
            width      : 250,
            border     : true,
            split      : true,
            hideHeaders: true,
            store:me.tokenStore,
            disableSelection:true,
            viewConfig:{
                stripeRows:false
            },
            columns    : [
                {
                    flex     : 1,
                    sortable : false,
                    dataIndex: 'token'
                },
                {
                    dataIndex: 'token',
                    width: 30,
                    xtype: "templatecolumn",
                    tpl: new Ext.XTemplate(
                        "<object id='clipboard{token}' codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0' width='16' height='16' align='middle'>",
                        "<param name='allowScriptAccess' value='always' />",
                        "<param name='allowFullScreen' value='false' />",
                        "<param name='movie' value='lib/ClipBoard/clipboard.swf' />",
                        "<param name='quality' value='high' />",
                        "<param name='bgcolor' value='#ffffff' />",
                        "<param name='flashvars' value='callback=copyToClipBoard&callbackArg={token}' />",
                        "<embed src='lib/ClipBoard/clipboard.swf' flashvars='callback=copyToClipBoard&callbackArg={token}' quality='high' bgcolor='#ffffff' width='16' height='16' name='clipboard{token}' align='middle' allowscriptaccess='always' allowfullscreen='false' type='application/x-shockwave-flash' pluginspage='http://www.adobe.com/go/getflashplayer' />",
                        "</object>",
                    null)
                }
            ]
        });

        me.pageBody = [ me.LeftCol, me.TeamplateEditor , me.TokensGrid ];
		me.callParent();
	},
	/**
	 * if the form is valid send the POST request
	 */
	onSave: function() {

	},
	/**
	 * Delete logic
	 */
	onDelete: function() {
		
	},

    onTokensGridItemClick:function(){

    },


    onSaveEditor:function(){
        var me = this,
            form = me.down('form').getForm(),
            record = form.getRecord(),
            values = form.getValues();
        record.set(values);
    },
    onCancelEditor:function(){
        var me = this,
            form = me.down('form').getForm(),
            grid = me.DocumentsGrid;
        form.reset();
        grid.getSelectionModel().deselectAll();
    },

    onDocumentsGridItemClick:function(grid, record){
        var me = this;
        var form = me.down('form').getForm();
        form.loadRecord(record);

    },
    newDocumentTemplate:function(){
        var me = this,
            store = me.templatesDocumentsStore;
        me.rowEditor.cancelEdit();
        store.insert(0,{
            title: i18n['new_document'],
	        template_type:'documenttemplate',
            date: new Date(),
	        type: 1
        });
        me.rowEditor.startEdit(0, 0);

    },


	newDefaultTemplates:function(){
        var me = this,
            store = me.defaultsDocumentsStore;
        me.rowEditor3.cancelEdit();
        store.insert(0,{
            title: i18n['new_defaults'],
	        template_type:'defaulttemplate',
            date: new Date(),
	        type: 1
        });
        me.rowEditor3.startEdit(0, 0);

    },

//	newHeaderOrFooterTemplate:function(){
//        var me = this,
//            store = me.headersAndFooterStore;
//        me.rowEditor2.cancelEdit();
//        store.insert(0,{
//            title: i18n['new_header_or_footer'],
//	        template_type:'headerorfootertemplate',
//            date: new Date(),
//	        type: 2
//        });
//        me.rowEditor2.startEdit(0, 0);
//
//    },

    copyToClipBoard:function(grid, rowIndex, colIndex){
        var rec = grid.getStore().getAt(rowIndex),
            text = rec.get('token');
    },

	onRemoveDocument:function(){


	},
	
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive            : function(callback) {
        var me = this
        me.templatesDocumentsStore.load();
//        me.headersAndFooterStore.load();
        me.defaultsDocumentsStore.load();
		callback(true);
	}
});
/**
 * facilities.ejs.php
 * Description: Facilities Screen
 * v0.0.3
 *
 * Author: GI Technologies, 2011
 * Modified: n/a
 *
 * GaiaEHR (Eletronic Health Records) 2011
 *
 * @namespace  Facilities.getFacilities
 * @namespace  Facilities.addFacility
 * @namespace  Facilities.updateFacility
 * @namespace  Facilities.deleteFacility
 */
Ext.define('App.view.administration.Facilities', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelFacilities',
	pageTitle    : i18n['facilities_active'],
	uses         : [
		'App.classes.GridPanel',
		'App.classes.window.Window'
	],
	initComponent: function() {

		var me = this;

		Ext.define('facilityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'},
				{name: 'active', type: 'string'},
				{name: 'phone', type: 'string'},
				{name: 'fax', type: 'string'},
				{name: 'street', type: 'string'},
				{name: 'city', type: 'string'},
				{name: 'state', type: 'string'},
				{name: 'postal_code', type: 'string'},
				{name: 'country_code', type: 'string'},
				{name: 'federal_ein', type: 'string'},
				{name: 'service_location', type: 'string'},
				{name: 'billing_location', type: 'string'},
				{name: 'accepts_assignment', type: 'string'},
				{name: 'pos_code', type: 'string'},
				{name: 'x12_sender_id', type: 'string'},
				{name: 'attn', type: 'string'},
				{name: 'domain_identifier', type: 'string'},
				{name: 'facility_npi', type: 'string'},
				{name: 'tax_id_type', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read   : Facilities.getFacilities,
					create : Facilities.addFacility,
					update : Facilities.updateFacility,
					destroy: Facilities.deleteFacility
				}
			}
		});

		me.FacilityStore = Ext.create('Ext.data.Store', {
			model     : 'facilityModel',
			remoteSort: true
		});

		// *************************************************************************************
		// Facility Grid Panel
		// *************************************************************************************
		me.FacilityGrid = Ext.create('App.classes.GridPanel', {
			store    : me.FacilityStore,
			columns  : [
				{
					text     : i18n['name'],
					flex     : 1,
					sortable : true,
					dataIndex: 'name'
				},
				{
					text     : i18n['phone'],
					width    : 100,
					sortable : true,
					dataIndex: 'phone'
				},
				{
					text     : i18n['fax'],
					width    : 100,
					sortable : true,
					dataIndex: 'fax'
				},
				{
					text     : i18n['city'],
					width    : 100,
					sortable : true,
					dataIndex: 'city'
				}
			],
			tbar     : Ext.create('Ext.PagingToolbar', {
				pageSize   : 30,
				store      : me.FacilityStore,
				displayInfo: true,
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items      : ['-', {
					text   : i18n['add_new_facility'],
					iconCls: 'save',
					handler: function() {
						var form = me.win.down('form');
						me.onNew(form, 'facilityModel', i18n['add_new_facility']);
					}
				}, '-', {
					text   : i18n['show_active_facilities'],
					action : 'active',
					scope  : me,
					handler: me.filterFacilitiesby
				}, '-', {
					text   : i18n['show_inactive_facilities'],
					action : 'inactive',
					scope  : me,
					handler: me.filterFacilitiesby
				}]

			}),
			listeners: {
				itemdblclick: function(view, record) {
					me.onItemdblclick(me.FacilityStore, record, i18n['edit_facility']);
				}
			}
		}); // END Facility Grid

		// *************************************************************************************
		// Window User Form
		// *************************************************************************************
		me.win = Ext.create('App.classes.window.Window', {
			width    : 600,
			items    : [
				{
					xtype        : 'mitos.form',
					fieldDefaults: { msgTarget: 'side', labelWidth: 100 },
					defaultType  : 'textfield',
					defaults     : { anchor: '100%' },
					items        : [
						{
							fieldLabel: i18n['name'],
							name      : 'name',
							allowBlank: false
						},
						{
							fieldLabel: i18n['phone'],
							name      : 'phone',
							vtype     : 'phoneNumber'
						},
						{
							fieldLabel: i18n['fac'],
							name      : 'fax',
							vtype     : 'phoneNumber'
						},
						{
							fieldLabel: i18n['street'],
							name      : 'street'
						},
						{
							fieldLabel: i18n['city'],
							name      : 'city'
						},
						{
							fieldLabel: i18n['state'],
							name      : 'state'
						},
						{
							fieldLabel: i18n['postal_code'],
							name      : 'postal_code',
							vtype     : 'postalCode'
						},
						{
							fieldLabel: i18n['country_code'],
							name      : 'country_code'
						},
						{
							xtype     : 'fieldcontainer',
							fieldLabel: i18n['tax_id'],
							layout    : 'hbox',
							items     : [
								{
									xtype: 'mitos.taxidcombo',
									name : 'tax_id_type',
									width: 50
								},
								{
									xtype: 'textfield',
									name : 'federal_ein'
								}
							]
						},
						{
							xtype     : 'mitos.checkbox',
							fieldLabel: i18n['active'],
							name      : 'active'
						},
						{
							xtype     : 'mitos.checkbox',
							fieldLabel: i18n['service_location'],
							name      : 'service_location'
						},
						{
							xtype     : 'mitos.checkbox',
							fieldLabel: i18n['billing_location'],
							name      : 'billing_location'
						},
						{
							xtype     : 'mitos.checkbox',
							fieldLabel: i18n['accepts_assignment'],
							name      : 'accepts_assignment'
						},
						{
							xtype     : 'mitos.poscodescombo',
							fieldLabel: i18n['pos_code'],
							name      : 'pos_code'
						},
						{
							fieldLabel: i18n['billing_attn'],
							name      : 'attn'
						},
						{
							fieldLabel: i18n['clia_number'],
							name      : 'domain_identifier'
						},
						{
							fieldLabel: 'Facility NPI',
							name      : 'facility_npi'
						},
						{
							name  : 'id',
							hidden: true
						}
					]
				}
			],
			buttons  : [
				{
					text   : i18n['save'],
					cls    : 'winSave',
					handler: function() {
						var form = me.win.down('form').getForm();
						if(form.isValid()) {
							me.onSave(form, me.FacilityStore);
							me.action('close');
						}
					}
				},
				'-',
				{
					text   : i18n['cancel'],
					scope  : me,
					handler: function(btn) {
						btn.up('window').close();
					}
				}
			],
			listeners: {
				scope: me,
				close: function() {
					me.action('close');
				}
			}
		});

		me.pageBody = [ me.FacilityGrid ];
		me.callParent(arguments);
	},

	filterFacilitiesby: function(btn) {
		this.updateTitle(i18n['Facilities'] + ' (' + Ext.String.capitalize(btn.action) + ')');
		this.FacilityStore.proxy.extraParams = { active: btn.action == 'active' ? 1 : 0 };
		this.FacilityStore.load();
	},

	onNew: function(form, model, title) {
		this.setForm(form, title);
		form.getForm().reset();
		var newModel = Ext.ModelManager.create({}, model);
		form.getForm().loadRecord(newModel);
		this.action('new');
		this.win.show();
	},

	onSave: function(form, store) {
		var record = form.getRecord(),
			values = form.getValues(),
			storeIndex = store.indexOf(record);
		if(storeIndex == -1) {
			store.add(values);
		} else {
			record.set(values);
		}
		store.sync();
		store.load();
		this.win.close();
	},

	onItemdblclick: function(store, record, title) {
		var form = this.win.down('form');
		this.setForm(form, title);
		form.getForm().loadRecord(record);
		this.action('old');
		this.win.show();
	},

	setForm: function(form, title) {
		form.up('window').setTitle(title);
	},

	openWin: function() {
		this.win.show();
	},

	action  : function(action) {
		var win = this.win,
			form = win.down('form'),
			winTbar = win.down('toolbar'),
			deletebtn = winTbar.getComponent('delete');

		if(action == 'close') {
			form.getForm().reset();
		}
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.FacilityStore.load();
		callback(true);
	}
}); //ens FacilitiesPanel class
/**
 * Users.ejs.php
 * Description: Users Screen
 * v0.0.4
 *
 * Author: Ernesto J Rodriguez
 * Modified: n/a
 *
 * GaiaEHR (Eletronic Health Records) 2011
 *
 * @namespace Globals.getGlobals
 * @namespace Globals.updateGlobals
 *
 */
Ext.define('App.view.administration.Globals', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelGlobals',
	pageTitle    : 'GaiaEHR ' + i18n['global_settings'],
	uses         : [ 'App.classes.form.fields.Checkbox' ],
	initComponent: function() {
		var me = this;
		// *************************************************************************************
		// Global Model and Data store
		// *************************************************************************************
		Ext.define('GlobalSettingsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'fullname', type: 'auto' },
				{ name: 'default_top_pane', type: 'auto' },
				{ name: 'concurrent_layout', type: 'auto' },
				{ name: 'css_header', type: 'auto' },
				{ name: 'gbl_nav_area_width', type: 'auto' },
				{ name: 'GaiaEHR_name', type: 'auto' },
				{ name: 'full_new_patient_form', type: 'auto' },
				{ name: 'patient_search_results_style', type: 'auto' },
				{ name: 'simplified_demographics', type: 'auto' },
				{ name: 'simplified_prescriptions', type: 'auto' },
				{ name: 'simplified_copay', type: 'auto' },
				{ name: 'use_charges_panel', type: 'auto' },
				{ name: 'online_support_link', type: 'auto' },
				{ name: 'language_default', type: 'auto' },
				{ name: 'language_menu_showall', type: 'auto' },
				{ name: 'translate_layout', type: 'auto' },
				{ name: 'translate_lists', type: 'auto' },
				{ name: 'translate_gacl_groups', type: 'auto' },
				{ name: 'translate_form_titles', type: 'auto' },
				{ name: 'translate_document_categories', type: 'auto' },
				{ name: 'translate_appt_categories', type: 'auto' },
				{ name: 'units_of_measurement', type: 'auto' },
				{ name: 'disable_deprecated_metrics_form', type: 'auto' },
				{ name: 'phone_country_code', type: 'auto' },
				{ name: 'date_display_format', type: 'auto' },
				{ name: 'currency_decimals', type: 'auto' },
				{ name: 'currency_dec_point', type: 'auto' },
				{ name: 'currency_thousands_sep', type: 'auto' },
				{ name: 'gbl_currency_symbol', type: 'auto' },
				{ name: 'specific_application', type: 'auto' },
				{ name: 'inhouse_pharmacy', type: 'auto' },
				{ name: 'disable_chart_tracker', type: 'auto' },
				{ name: 'disable_phpmyadmin_link', type: 'auto' },
				{ name: 'disable_immunizations', type: 'auto' },
				{ name: 'disable_prescriptions', type: 'auto' },
				{ name: 'omit_employers', type: 'auto' },
				{ name: 'select_multi_providers', type: 'auto' },
				{ name: 'disable_non_default_groups', type: 'auto' },
				{ name: 'ignore_pnotes_authorization', type: 'auto' },
				{ name: 'support_encounter_claims', type: 'auto' },
				{ name: 'advance_directives_warning', type: 'auto' },
				{ name: 'configuration_import_export', type: 'auto' },
				{ name: 'restrict_user_facility', type: 'auto' },
				{ name: 'set_facility_cookie', type: 'auto' },
				{ name: 'discount_by_money', type: 'auto' },
				{ name: 'gbl_visit_referral_source', type: 'auto' },
				{ name: 'gbl_mask_patient_id', type: 'auto' },
				{ name: 'gbl_mask_invoice_number', type: 'auto' },
				{ name: 'gbl_mask_product_id', type: 'auto' },
				{ name: 'force_billing_widget_open', type: 'auto' },
				{ name: 'activate_ccr_ccd_report', type: 'auto' },
				{ name: 'disable_calendar', type: 'auto' },
				{ name: 'schedule_start', type: 'auto' },
				{ name: 'schedule_end', type: 'auto' },
				{ name: 'calendar_interval', type: 'auto' },
				{ name: 'calendar_appt_style', type: 'auto' },
				{ name: 'docs_see_entire_calendar', type: 'auto' },
				{ name: 'auto_create_new_encounters', type: 'auto' },
				{ name: 'timeout', type: 'auto' },
				{ name: 'secure_password', type: 'auto' },
				{ name: 'password_history', type: 'auto' },
				{ name: 'password_expiration_days', type: 'auto' },
				{ name: 'password_grace_time', type: 'auto' },
				{ name: 'is_client_ssl_enabled', type: 'auto' },
				{ name: 'certificate_authority_crt', type: 'auto' },
				{ name: 'certificate_authority_key', type: 'auto' },
				{ name: 'client_certificate_valid_in_days', type: 'auto' },
				{ name: 'Emergency_Login_email_id', type: 'auto' },
				{ name: 'practice_return_email_path', type: 'auto' },
				{ name: 'EMAIL_METHOD', type: 'auto' },
				{ name: 'SMTP_HOST', type: 'auto' },
				{ name: 'SMTP_PORT', type: 'auto' },
				{ name: 'SMTP_USER', type: 'auto' },
				{ name: 'SMTP_PASS', type: 'auto' },
				{ name: 'EMAIL_NOTIFICATION_HOUR', type: 'auto' },
				{ name: 'SMS_NOTIFICATION_HOUR', type: 'auto' },
				{ name: 'SMS_GATEWAY_USENAME', type: 'auto' },
				{ name: 'SMS_GATEWAY_PASSWORD', type: 'auto' },
				{ name: 'SMS_GATEWAY_APIKEY', type: 'auto' },
				{ name: 'enable_auditlog', type: 'auto' },
				{ name: 'audit_events_patient-record', type: 'auto' },
				{ name: 'audit_events_scheduling', type: 'auto' },
				{ name: 'audit_events_order', type: 'auto' },
				{ name: 'audit_events_security-administration', type: 'auto' },
				{ name: 'audit_events_backup', type: 'auto' },
				{ name: 'audit_events_other', type: 'auto' },
				{ name: 'audit_events_query', type: 'auto' },
				{ name: 'enable_atna_audit', type: 'auto' },
				{ name: 'atna_audit_host', type: 'auto' },
				{ name: 'atna_audit_port', type: 'auto' },
				{ name: 'atna_audit_localcert', type: 'auto' },
				{ name: 'atna_audit_cacert', type: 'auto' },
				{ name: 'mysql_bin_dir', type: 'auto' },
				{ name: 'perl_bin_dir', type: 'auto' },
				{ name: 'temporary_files_dir', type: 'auto' },
				{ name: 'backup_log_dir', type: 'auto' },
				{ name: 'state_data_type', type: 'auto' },
				{ name: 'state_list', type: 'auto' },
				{ name: 'state_custom_addlist_widget', type: 'auto' },
				{ name: 'country_data_type', type: 'auto' },
				{ name: 'country_list', type: 'auto' },
				{ name: 'print_command', type: 'auto' },
				{ name: 'default_chief_complaint', type: 'auto' },
				{ name: 'default_new_encounter_form', type: 'auto' },
				{ name: 'patient_id_category_name', type: 'auto' },
				{ name: 'patient_photo_category_name', type: 'auto' },
				{ name: 'MedicareReferrerIsRenderer', type: 'auto' },
				{ name: 'post_to_date_benchmark', type: 'auto' },
				{ name: 'enable_hylafax', type: 'auto' },
				{ name: 'hylafax_server', type: 'auto' },
				{ name: 'hylafax_basedir', type: 'auto' },
				{ name: 'hylafax_enscript', type: 'auto' },
				{ name: 'enable_scanner', type: 'auto' },
				{ name: 'scanner_output_directory', type: 'auto' }
			]
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'GlobalSettingsModel',
			proxy   : {
				type: 'direct',
				api : {
					read: Globals.getGlobals
				}
			},
			autoLoad: false
		});

		//------------------------------------------------------------------------------
		// When the data is loaded semd values to de form
		//------------------------------------------------------------------------------
		me.store.on('load', function() {
			var rec = me.store.getAt(0); // get the record from the store
			me.globalFormPanel.getForm().loadRecord(rec);
		});
		// *************************************************************************************
		// DataStores for all static combos
		// *************************************************************************************
		me.default_top_pane_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['dashboard'], "option_id": "app/dashboard/dashboard.ejs.php"},
				{"title": i18n['calendar'], "option_id": "app/calendar/calendar.ejs.php"},
				{"title": i18n['messages'], "option_id": "app/messages/messages.ejs.php"}
			]
		});
		me.fullname_store = Ext.create('Ext.data.Store', {
			fields: ['format', 'option_id'],
			data  : [
				{"format": i18n['last_first_middle'], "option_id": "0"},
				{"format": i18n['first_middle_last'], "option_id": "1"}
			]
		});
		me.concurrent_layout_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['main_navigation_menu_left'], "option_id": "west"},
				{"title": i18n['main_navigation_menu_right'], "option_id": "east"}
			]
		});
		me.css_header_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['grey_default'], "option_id": "ext-all-gray.css"},
				{"title": i18n['blue'], "option_id": "ext-all.css"},
				{"title": i18n['access'], "option_id": "ext-all-access.css"}
			]
		});
		me.full_new_patient_form_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['oldstyle_static_form_without_search_or_duplication_check'], "option_id": "0"},
				{"title": i18n['all_demographics_fields_with_search_and_duplication_check'], "option_id": "1"},
				{"title": i18n['mandatory_or_specified_fields_only_search_and_dup_check'], "option_id": "2"},
				{"title": i18n['mandatory_or_specified_fields_only_dup_check_no_search'], "option_id": "3"}
			]
		});
		me.patient_search_results_style_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['encounter_statistics'], "option_id": "0"},
				{"title": i18n['mandatory_and_specified_fields'], "option_id": "1"}
			]
		});
		me.units_of_measurement_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['show_both_us_and_metric_main_unit_is_us'], "option_id": "1"},
				{"title": i18n['show_both_us_and_metric_main_unit_is_metric'], "option_id": "2"},
				{"title": i18n['show_us_only'], "option_id": "3"},
				{"title": i18n['show_metric_only'], "option_id": "4"}
			]
		});
		me.date_display_format_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['yyyy_mm_dd'], "option_id": "0"},
				{"title": i18n['mm_dd_yyyy'], "option_id": "1"},
				{"title": i18n['dd_mm_yyyy'], "option_id": "2"}
			]
		});
		me.time_display_format_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['24_hr'], "option_id": "0"},
				{"title": i18n['12 hr'], "option_id": "1"}
			]
		});
		me.currency_decimals_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['0'], "option_id": "0"},
				{"title": i18n['1'], "option_id": "1"},
				{"title": i18n['2'], "option_id": "2"}
			]
		});
		me.currency_dec_point_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['comma'], "option_id": ","},
				{"title": i18n['period'], "option_id": "."}
			]
		});
		me.currency_thousands_sep_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['comma'], "option_id": ","},
				{"title": i18n['period'], "option_id": "."},
				{"title": i18n['space'], "option_id": " "},
				{"title": i18n['none'], "option_id": ""}
			]
		});
		me.EMAIL_METHOD_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": "PHPMAIL", "option_id": "PHPMAIL"},
				{"title": "SENDMAIL", "option_id": "SENDMAIL"},
				{"title": "SMTP", "option_id": "SMTP"}
			]
		});
		me.state_country_data_type_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data  : [
				{"title": i18n['text_field'], "option_id": "2"},
				{"title": i18n['single_selection_list'], "option_id": "1"},
				{"title": i18n['single_selection_list_with_ability_to_add_to_the_list'], "option_id": "26"}
			]
		});
		//**************************************************************************
		// Dummy Store
		//**************************************************************************
		me.dummyStore = new Ext.data.ArrayStore({
			fields: ['title', 'option_id'],
			data  : [
				[i18n['option_1'], 'Option 1'],
				[i18n['option_2'], 'Option 2'],
				[i18n['option_3'], 'Option 3'],
				[i18n['option_5'], 'Option 5'],
				[i18n['option_6'], 'Option 6'],
				[i18n['option_7'], 'Option 7']
			]
		});
		//**************************************************************************
		// Global Form Panel
		//**************************************************************************
		me.globalFormPanel = Ext.create('App.classes.form.Panel', {
			layout       : 'fit',
			autoScroll   : true,
			bodyStyle    : 'padding: 0;',
			fieldDefaults: { msgTarget: 'side', labelWidth: 220, width: 520 },
			defaults     : { anchor: '100%' },
			items        : [
				{
					xtype      : 'tabpanel',
					activeTab  : 0,
					defaults   : {bodyStyle: 'padding:10px', autoScroll: true },
					items      : [
						{
							title   : i18n['appearance'],
							defaults: {anchor: '100%'},
							items   : [
								{
									xtype       : 'combo',
									fieldLabel  : i18n['main_top_pane_screen'],
									name        : 'default_top_pane',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.default_top_pane_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['layout_style'],
									name        : 'concurrent_layout',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.concurrent_layout_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['theme'],
									name        : 'css_header',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.css_header_store
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['navigation_area_width'],
									name      : 'gbl_nav_area_width'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['application_title'],
									name      : 'GaiaEHR_name'
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['new_patient_form'],
									name        : 'full_new_patient_form',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.full_new_patient_form_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['patient_search_resuls_style'],
									name        : 'patient_search_results_style',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.patient_search_results_style_store
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['simplified_demographics'],
									name      : 'simplified_demographics'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['simplified_prescriptions'],
									name      : 'simplified_prescriptions'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['simplified_copay'],
									name      : 'simplified_copay'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['user_charges_panel'],
									name      : 'use_charges_panel'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['online_support_link'],
									name      : 'online_support_link'
								}
							]
						},
						{
							title      : 'Locale',
							//defaults: {},
							defaultType: 'textfield',
							items      : [
								{
									xtype       : 'combo',
									fieldLabel  : i18n['fullname_format'],
									name        : 'fullname',
									displayField: 'format',
									valueField  : 'option_id',
									editable    : false,
									store       : me.fullname_store
								},
								{
									xtype     : 'languagescombo',
									fieldLabel: i18n['default_language'],
									name      : 'language_default'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['all_language_allowed'],
									name      : 'language_menu_showall'
								},
								{
									xtype      : 'languagescombo',
									fieldLabel : i18n['allowed_languages'] + ' -??-',
									name       : 'lang_description2', // ???????
									multiSelect: true
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['allow_debuging_language'] + ' -??-',
									name      : 'Loc4'  // ???????
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['translate_layouts'],
									name      : 'translate_layout'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['translate_list'],
									name      : 'translate_lists'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['translate_access_control_roles'],
									name      : 'translate_gacl_groups'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['translate_patient_note_titles'],
									name      : 'translate_form_titles'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['translate_documents_categoies'],
									name      : 'translate_document_categories',
									id        : 'translate_document_categories'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['translate_appointment_categories'],
									name      : 'translate_appt_categories'
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['units_for_visits_forms'],
									name        : 'units_of_measurement',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.units_of_measurement_store
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['disable_old_metric_vitals_form'],
									name      : 'disable_deprecated_metrics_form'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['telephone_country_code'],
									name      : 'phone_country_code'
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['date_display_format'],
									name        : 'date_display_format',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.date_display_format_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['time_display_format'] + ' -??-',
									name        : 'date_display_format', // ??????
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.time_display_format_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['currency_decimal_places'],
									name        : 'currency_decimals',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.currency_decimals_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['currency_decimal_point_symbol'],
									name        : 'currency_dec_point',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.currency_dec_point_store
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['currency_thousands_separator'],
									name        : 'currency_thousands_sep',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.currency_thousands_sep_store
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['currency_designator'],
									name      : 'gbl_currency_symbol'
								}
							]
						},
						{
							title      : 'Features',
							defaultType: 'mitos.checkbox',
							items      : [
								{
									xtype       : 'combo',
									fieldLabel  : i18n['specific_application'],
									name        : 'date_display_format',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['drugs_and_prodructs'],
									name        : 'date_display_format',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									fieldLabel: i18n['disable_chart_tracker'],
									name      : 'date_display_format'
								},
								{
									fieldLabel: i18n['disable_immunizations'],
									name      : 'disable_immunizations'
								},
								{
									fieldLabel: i18n['disable_prescriptions'],
									name      : 'disable_prescriptions'
								},
								{
									fieldLabel: i18n['omit_employers'],
									name      : 'omit_employers'
								},
								{
									fieldLabel: i18n['support_multiprovider_events'],
									name      : 'select_multi_providers'
								},
								{
									fieldLabel: i18n['disable_user_groups'],
									name      : 'disable_non_default_groups'
								},
								{
									fieldLabel: i18n['skip_authorization_of_patient_notes'],
									name      : 'ignore_pnotes_authorization'
								},
								{
									fieldLabel: i18n['allow_encounters_claims'],
									name      : 'support_encounter_claims'
								},
								{
									fieldLabel: i18n['advance_directives_warning'],
									name      : 'advance_directives_warning'
								},
								{
									fieldLabel: i18n['configuration_export_import'],
									name      : 'configuration_import_export'
								},
								{
									fieldLabel: i18n['restrict_users_to_facilities'],
									name      : 'restrict_user_facility'
								},
								{
									fieldLabel: i18n['remember_selected_facility'],
									name      : 'set_facility_cookie'
								},
								{
									fieldLabel: i18n['discounts_as_monetary_ammounts'],
									name      : 'discount_by_money'
								},
								{
									fieldLabel: i18n['referral_source_for_encounters'],
									name      : 'gbl_visit_referral_source'
								},
								{
									fieldLabel: i18n['maks_for_patients_ids'],
									xtype     : 'textfield',
									name      : 'gbl_mask_patient_id'
								},
								{
									fieldLabel: i18n['mask_of_invoice_numbers'],
									xtype     : 'textfield',
									name      : 'gbl_mask_invoice_number'
								},
								{
									fieldLabel: i18n['mask_for_product_ids'],
									xtype     : 'textfield',
									name      : 'gbl_mask_product_id'
								},
								{
									fieldLabel: i18n['force_billing_widget_open'],
									name      : 'force_billing_widget_open'
								},
								{
									fieldLabel: i18n['actiate_ccr_ccd_reporting'],
									name      : 'activate_ccr_ccd_report'
								},
								{
									fieldLabel: i18n['hide_encryption_decryption_options_in_document_managment'] + ' -??-',
									name      : 'Feat22'   // ?????
								}
							]
						},
						{
							title      : i18n['calendar'],
							defaultType: 'combo',
							items      : [
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['disable_calendar'],
									name      : 'Cal1'
								},
								{
									fieldLabel  : i18n['calendar_starting_hour'],
									name        : 'Cal2',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									fieldLabel  : i18n['calendar_ending_hour'],
									name        : 'Cal3',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									fieldLabel  : i18n['calendar_interval'],
									name        : 'Cal4',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									fieldLabel  : i18n['appointment_display_style'],
									name        : 'Cal5',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['provider_see_entire_calendar'],
									name      : 'Cal6'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['auto_create_new_encounters'],
									name      : 'Cal7'
								},
								{
									fieldLabel  : i18n['appointment_event_color'],
									name        : 'Cal8',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								}
							]
						},
						{
							title      : 'Security',
							defaultType: 'textfield',
							items      : [
								{
									fieldLabel: i18n['idle_session_timeout_seconds'],
									name      : 'timeout'
								},
								{
									xtype       : 'mitos.checkbox',
									fieldLabel  : i18n['require_strong_passwords'],
									name        : 'secure_password',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.dummyStore
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['require_unique_passwords'],
									name      : 'password_history'
								},
								{
									fieldLabel: i18n['defaults_password_expiration_days'],
									name      : 'password_expiration_days'
								},
								{
									fieldLabel: i18n['password_expiration_grace_period'],
									name      : 'password_grace_time'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['enable_clients_ssl'],
									name      : 'is_client_ssl_enabled'
								},
								{
									fieldLabel: i18n['path_to_ca_certificate_file'],
									name      : 'certificate_authority_crt'
								},
								{
									fieldLabel: i18n['path_to_ca_key_file'],
									name      : 'certificate_authority_key'
								},
								{
									fieldLabel: i18n['client_certificate_expiration_days'],
									name      : 'client_certificate_valid_in_days'
								},
								{
									fieldLabel: i18n['emergency_login_email_address'],
									name      : 'Emergency_Login_email_id'
								}
							]
						},
						{
							title      : i18n['notifications'],
							defaultType: 'textfield',
							items      : [
								{
									fieldLabel: i18n['notification_email_address'],
									name      : 'practice_return_email_path'
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['email_transport_method'],
									name        : 'EMAIL_METHOD',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.EMAIL_METHOD_store
								},
								{
									fieldLabel: i18n['smpt_server_hostname'],
									name      : 'SMTP_HOST'
								},
								{
									fieldLabel: i18n['smpt_server_port_number'],
									name      : 'SMTP_PORT'
								},
								{
									fieldLabel: i18n['smpt_user_for_authentication'],
									name      : 'SMTP_USER'
								},
								{
									fieldLabel: i18n['smpt_password_for_authentication'],
									name      : 'SMTP_PASS'
								},
								{
									fieldLabel: i18n['email_notification_hours'],
									name      : 'EMAIL_NOTIFICATION_HOUR'
								},
								{
									fieldLabel: i18n['sms_notification_hours'],
									name      : 'SMS_NOTIFICATION_HOUR'
								},
								{
									fieldLabel: i18n['sms_gateway_usarname'],
									name      : 'SMS_GATEWAY_USENAME'
								},
								{
									fieldLabel: i18n['sms_gateway_password'],
									name      : 'SMS_GATEWAY_PASSWORD'
								},
								{
									fieldLabel: i18n['sms_gateway_api_Key'],
									name      : 'SMS_GATEWAY_APIKEY'
								}
							]
						},
						{
							title      : i18n['logging'],
							defaultType: 'mitos.checkbox',
							items      : [
								{
									fieldLabel: i18n['enable_audit_logging'],
									name      : 'enable_auditlog'
								},
								{
									fieldLabel: i18n['audit_logging_patient_record'],
									name      : 'audit_events_patient'
								},
								{
									fieldLabel: i18n['audid_logging_scheduling'],
									name      : 'audit_events_scheduling'
								},
								{
									fieldLabel: i18n['audid_logging_order'],
									name      : 'audit_events_order'
								},
								{
									fieldLabel: i18n['audid_logging_security_administration'],
									name      : 'audit_events_security'
								},
								{
									fieldLabel: i18n['audid_logging_backups'],
									name      : 'audit_events_backup'
								},
								{
									fieldLabel: i18n['audid_logging_miscellaeous'],
									name      : 'audit_events_other'
								},
								{
									fieldLabel: i18n['audid_logging_select_query'],
									name      : 'audit_events_query'
								},
								{
									fieldLabel: i18n['enable_atna_auditing'],
									name      : 'enable_atna_audit'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['atna_audit_host'],
									name      : 'atna_audit_host'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['atna_audit_post'],
									name      : 'atna_audit_port'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['atna_audit_local_certificate'],
									name      : 'atna_audit_localcert'
								},
								{
									xtype     : 'textfield',
									fieldLabel: i18n['atna_audit_ca_certificate'],
									name      : 'atna_audit_cacert'
								}
							]
						},
						{
							title      : i18n['miscellaneous'],
							defaultType: 'textfield',
							items      : [
								{
									fieldLabel: i18n['path_to_mysql_binaries'],
									name      : 'mysql_bin_dir'
								},
								{
									fieldLabel: i18n['path_to_perl_binaries'],
									name      : 'perl_bin_dir'
								},
								{
									fieldLabel: i18n['path_to_temporary_files'],
									name      : 'temporary_files_dir'
								},
								{
									fieldLabel: i18n['path_for_event_log_backup'],
									name      : 'backup_log_dir'
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['state_data_type'],
									name        : 'state_data_type',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.state_country_data_type_store
								},
								{
									fieldLabel: i18n['state_list'],
									name      : 'state_list'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['state_list_widget_custom_fields'],
									name      : 'state_custom_addlist_widget'
								},
								{
									xtype       : 'combo',
									fieldLabel  : i18n['country_data_type'],
									name        : 'country_data_type',
									displayField: 'title',
									valueField  : 'option_id',
									editable    : false,
									store       : me.state_country_data_type_store
								},
								{
									fieldLabel: i18n['country_list'],
									name      : 'country_list'
								},
								{
									fieldLabel: i18n['print_command'],
									name      : 'print_command'
								},
								{
									fieldLabel: i18n['default_reason_for_visit'],
									name      : 'default_chief_complaint'
								},
								{
									fieldLabel: i18n['default_encounter_form_id'],
									name      : 'default_new_encounter_form'
								},
								{
									fieldLabel: i18n['patient_id_category_name'],
									name      : 'patient_id_category_name'
								},
								{
									fieldLabel: i18n['patient_photo_category_name'],
									name      : 'patient_photo_category_name'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['medicare_referrer_is_renderer'],
									name      : 'MedicareReferrerIsRenderer'
								},
								{
									fieldLabel: i18n['final_close_date_yyy_mm_dd'],
									name      : 'post_to_date_benchmark'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['enable_hylafax_support'],
									name      : 'enable_hylafax'
								},
								{
									fieldLabel: i18n['hylafax_server'],
									name      : 'hylafax_server'
								},
								{
									fieldLabel: i18n['hylafax_directory'],
									name      : 'hylafax_basedir'
								},
								{
									fieldLabel: i18n['hylafax_enscript_command'],
									name      : 'hylafax_enscript'
								},
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['enable_scanner_support'],
									name      : 'enable_scanner'
								},
								{
									fieldLabel: i18n['scanner_directory'],
									name      : 'scanner_output_directory'
								}
							]
						},
						{
							title      : i18n['connectors'],
							defaultType: 'textfield',
							items      : [
								{
									xtype     : 'mitos.checkbox',
									fieldLabel: i18n['enable_lab_exchange'],
									name      : 'Conn1'
								},
								{
									fieldLabel: i18n['lab_exchange_site_id'],
									name      : 'Conn2'
								},
								{
									fieldLabel: i18n['lab_exchange_token_id'],
									name      : 'Conn3'
								},
								{
									fieldLabel: i18n['lab_exchange_site_address'],
									name      : 'Conn4'
								}
							]
						}
					],
					dockedItems: [
						{
							xtype: 'toolbar',
							dock : 'top',
							items: [
								{
									text   : i18n['save_configuration'],
									iconCls: 'save',
									handler: function() {
										var form = me.globalFormPanel.getForm();
										me.onSave(form, me.store);
									}
								}
							]
						}
					]
				}
			]
		});
		me.pageBody = [ me.globalFormPanel ];
		me.callParent(arguments);
	}, // end of initComponent
	onSave       : function(form, store) {
		var record = form.getRecord(),
			values = form.getValues();
		Globals.updateGlobals(values, function() {
			store.load();
		});

		this.msg(i18n['new_global_configuration_saved'], i18n['refresh_the_application']);
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive     : function(callback) {
		this.store.load();
		callback(true);
	}
}); //ens LogPage class
/**
 * layout.ejs.php
 * Description: Layout Screen Panel
 * v0.0.1
 *
 * Author: GI Technologies, 2011
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011

 * @namespace FormLayoutBuilder.getFormFieldsTree
 * @namespace FormLayoutBuilder.getParentFields
 * @namespace FormLayoutBuilder.getForms
 * @namespace FormLayoutBuilder.addField
 * @namespace FormLayoutBuilder.updateField
 * @namespace FormLayoutBuilder.deleteField
 * @namespace FormLayoutBuilder.sortFields
 * @namespace CombosData.getFiledXtypes
 * @namespace CombosData.getOptionsByListId
 */
Ext.define('App.view.administration.Layout', {
	extend              : 'App.classes.RenderPanel',
	id                  : 'panelLayout',
	pageTitle           : i18n['layout_form_editor'],
	pageLayout          : 'border',
	uses                : [
		'App.classes.GridPanel'
	],
	initComponent       : function() {

		var me = this;
		me.currForm = null;
		me.currField = null;

		// *************************************************************************************
		// Form Fields TreeGrid Store
		// *************************************************************************************
		Ext.define('layoutTreeModel', {
			extend    : 'Ext.data.Model',
			fields    : [
				{name: 'id', type: 'string'},
				{name: 'text', type: 'string'},
				{name: 'pos', type: 'string'},
				{name: 'xtype', type: 'string'},
				{name: 'form_id', type: 'string'},
				{name: 'item_of', type: 'string'},
				{name: 'title', type: 'string'},
				{name: 'fieldLabel', type: 'string'},
				{name: 'emptyText', type: 'string'},
				{name: 'labelWidth', type: 'string'},
				{name: 'hideLabel', type: 'string'},
				{name: 'layout', type: 'string'},
				{name: 'width', type: 'string'},
				{name: 'height', type: 'string'},
				{name: 'anchor', type: 'string'},
				{name: 'margin', type: 'string'},
				{name: 'flex', type: 'string'},
				{name: 'collapsible', type: 'string'},
				{name: 'checkboxToggle', type: 'string'},
				{name: 'collapsed', type: 'string'},
				{name: 'inputValue', type: 'string'},
				{name: 'allowBlank', type: 'string'},
				{name: 'value', type: 'string'},
				{name: 'maxValue', type: 'string'},
				{name: 'minValue', type: 'string'},
				{name: 'boxLabel', type: 'string'},
				{name: 'grow', type: 'string'},
				{name: 'growMin', type: 'string'},
				{name: 'growMax', type: 'string'},
				{name: 'increment', type: 'string'},
				{name: 'name', type: 'string'},
				{name: 'list_id', type: 'string'}
			],
			idProperty: 'id'
		});
		/**
		 * form fields list (center grid)
		 */
		me.fieldsGridStore = Ext.create('Ext.data.TreeStore', {
			model      : 'layoutTreeModel',
			//clearOnLoad: true,
			proxy      : {
				type: 'direct',
				api : {
					read: FormLayoutBuilder.getFormFieldsTree
				}
			},
			folderSort : false,
			autoLoad   : false
		});
		/**
		 * Xtype Combobox store
		 */
		Ext.define('XtypesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'string'},
				{name: 'name', type: 'string'},
				{name: 'value', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getFiledXtypes
				}
			}
		});
		me.fieldXTypesStore = Ext.create('Ext.data.Store', {
			model   : 'XtypesComboModel',
			autoLoad: true
		});

		/**
		 * Forms grid store (left grid)
		 */
		Ext.define('FormsListModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'string'},
				{name: 'name', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: FormLayoutBuilder.getForms
				}
			}
		});
		me.formsGridStore = Ext.create('Ext.data.Store', {
			model   : 'FormsListModel',
			autoLoad: true
		});

		/**
		 * Field available on this form as parent items (fieldset / fieldcontainer )
		 * use to get the "Child of" combobox data
		 */
		Ext.define('ParentFieldsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'name', type: 'string'},
				{name: 'value', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: FormLayoutBuilder.getParentFields
				}
			}
		});
		me.parentFieldsStore = Ext.create('Ext.data.Store', {
			model   : 'ParentFieldsModel',
			autoLoad: false
		});

		/**
		 * This are the select lists available to use for comboboxes
		 * this lists can be created an modified at "Lists" administration panel.
		 */
		Ext.define('formlistoptionsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string'},
				{name: 'option_value', type: 'string'}
			]

		});
		me.selectListoptionsStore = Ext.create('Ext.data.Store', {
			model   : 'formlistoptionsModel',
			proxy   : {
				type: 'direct',
				api : {
					read: CombosData.getOptionsByListId
				}
			},
			autoLoad: false
		});

		/**
		 * This grid only available if the field is a Combobox
		 */
		me.selectListGrid = Ext.create('App.classes.GridPanel', {
			store           : me.selectListoptionsStore,
			region          : 'south',
			collapseMode    : 'mini',
			width           : 250,
			height          : 250,
			split           : true,
			border          : false,
			titleCollapse   : false,
			hideCollapseTool: true,
			collapsible     : true,
			collapsed       : true,
			columns         : [
				{
					text     : i18n['name'],
					flex     : 1,
					sortable : false,
					dataIndex: 'option_name'
				},
				{
					text     : i18n['value'],
					flex     : 1,
					sortable : false,
					dataIndex: 'option_value'
				}
			]
		});
		/**
		 * form to create and modified the fields
		 */
		me.fieldForm = Ext.create('App.classes.form.Panel', {
			region       : 'center',
			//url	            : 'app/administration/layout/data.php?task=formRequest',
			border       : false,
			autoScroll   : true,
			fieldDefaults: { msgTarget: 'side', labelWidth: 100 },
			defaults     : { anchor: '100%' },
			items        : [
				{
					name  : 'id',
					xtype : 'textfield',
					itemId: 'id',
					hidden: true
				},
				{
					name  : i18n['pos'],
					xtype : 'textfield',
					itemId: 'pos',
					hidden: true
				},
				{
					name  : i18n['form_id'],
					xtype : 'textfield',
					itemId: 'form_id',
					hidden: true
				},
				{
					fieldLabel  : i18n['type'],
					xtype       : 'combo',
					name        : 'xtype',
					displayField: 'name',
					valueField  : 'value',
					allowBlank  : false,
					editable    : false,
					store       : me.fieldXTypesStore,
					queryMode   : 'local',
					margin      : '5px 5px 5px 10px',
					itemId      : 'xtype',
					listeners   : {
						scope : me,
						change: me.onXtypeChange
					}
				},
				{
					fieldLabel  : i18n['child_of'],
					xtype       : 'combo',
					name        : 'item_of',
					displayField: 'name',
					valueField  : 'value',
					editable    : false,
					hideTrigger : true,
					store       : me.parentFieldsStore,
					queryMode   : 'local',
					margin      : '5px 5px 5px 10px',
					emptyText   : 'None',
					itemId      : 'parentFields',
					listeners   : {
						scope : me,
						expand: me.onParentFieldsExpand
					}
				},
				{
					xtype   : 'fieldset',
					itemId  : 'aditionalProperties',
					title   : i18n['aditional_properties'],
					defaults: { anchor: '100%' },
					items   : [
						{
							fieldLabel: i18n['title'],
							xtype     : 'textfield',
							name      : 'title',
							itemId    : 'title',
							allowBlank: false,
							hidden    : true
						},
						{
							fieldLabel: i18n['field_label'],
							xtype     : 'textfield',
							name      : 'fieldLabel',
							itemId    : 'fieldLabel',
							allowBlank: false,
							hidden    : true
						},
						{
							fieldLabel: i18n['box_label'],
							xtype     : 'textfield',
							name      : 'boxLabel',
							itemId    : 'boxLabel',
							allowBlank: false,
							hidden    : true
						},
						{
							fieldLabel: i18n['label_width'],
							xtype     : 'textfield',
							name      : 'labelWidth',
							itemId    : 'labelWidth',
							hidden    : true
						},
						{
							fieldLabel: i18n['hide_label'],
							xtype     : 'checkbox',
							name      : 'hideLabel',
							itemId    : 'hideLabel',
							hidden    : true
						},
						{
							fieldLabel: i18n['empty_text'],
							xtype     : 'textfield',
							name      : 'emptyText',
							itemId    : 'emptyText',
							hidden    : true
						},
						{
							fieldLabel: i18n['layout'],
							xtype     : 'textfield',
							name      : 'layout',
							itemId    : 'layout',
							hidden    : true
						},
						{
							fieldLabel: i18n['name'],
							xtype     : 'textfield',
							name      : 'name',
							itemId    : 'name',
							allowBlank: false,
							hidden    : true
						},
						{
							fieldLabel: i18n['input_value'],
							xtype     : 'textfield',
							name      : 'inputValue',
							itemId    : 'inputValue',
							allowBlank: false,
							hidden    : true
						},
						{
							fieldLabel: i18n['width'],
							xtype     : 'textfield',
							name      : 'width',
							itemId    : 'width',
							emptyText : 'ei. 5 for 5px',
							hidden    : true
						},
						{
							fieldLabel: i18n['height'],
							xtype     : 'textfield',
							name      : 'height',
							itemId    : 'height',
							emptyText : 'ei. 5 for 5px',
							hidden    : true
						},
						{
							fieldLabel: i18n['anchor'],
							xtype     : 'textfield',
							name      : 'anchor',
							itemId    : 'anchor',
							emptyText : 'ei. 100%',
							hidden    : true
						},
						{
							fieldLabel: i18n['flex'],
							xtype     : 'checkbox',
							name      : 'flex',
							itemId    : 'flex',
							hidden    : true
						},
						{
							fieldLabel: i18n['collapsible'],
							xtype     : 'checkbox',
							name      : 'collapsible',
							itemId    : 'collapsible',
							hidden    : true
						},
						{
							fieldLabel: i18n['checkbox_toggle'],
							xtype     : 'checkbox',
							name      : 'checkboxToggle',
							itemId    : 'checkboxToggle',
							hidden    : true
						},
						{
							fieldLabel: i18n['collapsed'],
							xtype     : 'checkbox',
							name      : 'collapsed',
							itemId    : 'collapsed',
							hidden    : true
						},
						{
							fieldLabel: i18n['margin'],
							xtype     : 'textfield',
							name      : 'margin',
							itemId    : 'margin',
							emptyText : 'ei. 5 5 5 5',
							hidden    : true
						},
						{
							fieldLabel: i18n['column_width'],
							xtype     : 'textfield',
							name      : 'columnWidth',
							itemId    : 'columnWidth',
							emptyText : 'ei. .5',
							hidden    : true
						},
						{
							fieldLabel: i18n['is_required'],
							xtype     : 'checkbox',
							name      : 'allowBlank',
							itemId    : 'allowBlank',
							hidden    : true
						},
						{
							fieldLabel: i18n['value'],
							xtype     : 'textfield',
							name      : 'value',
							itemId    : 'value',
							hidden    : true
						},
						{
							fieldLabel: i18n['max_value'],
							xtype     : 'textfield',
							name      : 'maxValue',
							itemId    : 'maxValue',
							hidden    : true
						},
						{
							fieldLabel: i18n['min_value'],
							xtype     : 'textfield',
							name      : 'minValue',
							itemId    : 'minValue',
							hidden    : true
						},
						{
							fieldLabel: i18n['max_value'],
							xtype     : 'timefield',
							name      : 'maxValue',
							itemId    : 'timeMaxValue',
							hidden    : true
						},
						{
							fieldLabel: i18n['min_value'],
							xtype     : 'timefield',
							name      : 'minValue',
							itemId    : 'timeMinValue',
							hidden    : true
						},
						{
							fieldLabel: i18n['grow'],
							xtype     : 'checkbox',
							name      : 'grow',
							itemId    : 'grow',
							hidden    : true
						},
						{
							fieldLabel: i18n['grow_min'],
							xtype     : 'textfield',
							name      : 'growMin',
							itemId    : 'growMin',
							hidden    : true
						},
						{
							fieldLabel: i18n['grow_max'],
							xtype     : 'textfield',
							name      : 'growMax',
							itemId    : 'growMax',
							hidden    : true
						},
						{
							fieldLabel: i18n['increment'],
							xtype     : 'textfield',
							name      : 'increment',
							itemId    : 'increment',
							hidden    : true
						},
						{
							fieldLabel: i18n['list_options'],
							xtype     : 'mitos.listscombo',
							name      : 'list_id',
							itemId    : 'list_id',
							hidden    : true,
							allowBlank: false,
							listeners : {
								scope : me,
								change: me.onSelectListSelect
							}
						}
					]
				}
			]
		});
		/**
		 * this container holds the form and the select list grid.
		 * remember that the select list grid only shows if
		 * the field xtype is a combobox
		 */
		me.formContainer = Ext.create('Ext.panel.Panel', {
			title      : i18n['field_configuration'],
			border     : true,
			split      : true,
			width      : 390,
			region     : 'east',
			layout     : 'border',
			bodyStyle  : 'background-color:#fff!important',
			items      : [
				me.fieldForm,
				me.selectListGrid
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					items: [
						{
							text   : i18n['save'],
							iconCls: 'save',
							scope  : me,
							handler: me.onSave
						},
						'-',
						{
							text   : i18n['new'],
							iconCls: 'icoAddRecord',
							scope  : me,
							handler: me.onFormReset
						},
						'-',
						{
							text    : i18n['add_child'],
							iconCls : 'icoAddRecord',
							itemId  : 'addChild',
							disabled: true,
							scope   : me,
							handler : me.onAddChild
						},
						'-',
						{
							text   : i18n['delete'],
							iconCls: 'delete',
							cls    : 'toolDelete',
							scope  : me,
							handler: me.onDelete
						},
						'-',
						{
							text        : i18n['form_preview'],
							iconCls     : 'icoPreview',
							enableToggle: true,
							listeners   : {
								scope : me,
								toggle: me.onFormPreview
							}
						}
					]

				}
			]
		});
		/**
		 * This is the fields associated with the current Form selected
		 */
		me.fieldsGrid = Ext.create('Ext.tree.Panel', {
			store      : me.fieldsGridStore,
			region     : 'center',
			border     : true,
			sortable   : false,
			rootVisible: false,
			title      : i18n['field_editor_demographics'],
			viewConfig : {
				plugins  : { ptype: 'treeviewdragdrop', allowParentInsert: true },
				listeners: {
					scope: me,
					drop : me.onDragDrop
				}
			},
			columns    : [
				{
					xtype    : 'treecolumn',
					text     : i18n['field_type'],
					sortable : false,
					dataIndex: 'xtype',
					width    : 200,
					align    : 'left'
				},
				{
					text     : i18n['title'],
					sortable : false,
					dataIndex: 'title',
					width    : 100,
					align    : 'left'
				},
				{
					text     : i18n['label'],
					sortable : false,
					dataIndex: 'fieldLabel',
					flex     : 1,
					align    : 'left'
				}
			],
			listeners  : {
				scope    : me,
				itemclick: me.onFieldsGridClick
			}
		});
		/**
		 * Form grid will show the available forms to modified.
		 * the user will not have the options to create
		 * forms, just to modified the fields of existing forms.
		 */
		me.formsGrid = Ext.create('App.classes.GridPanel', {
			title      : i18n['form_list'],
			region     : 'west',
			store      : me.formsGridStore,
			width      : 200,
			border     : true,
			split      : true,
			hideHeaders: true,
			columns    : [
				{
					dataIndex: 'id',
					hidden   : true
				},
				{
					flex     : 1,
					sortable : true,
					dataIndex: 'name'
				}
			],
			listeners  : {
				scope    : me,
				itemclick: me.onFormGridItemClick
			}
		});
		/**
		 * this panel will render the current form to preview
		 * all the changes done.
		 */
		me.fromPreview = Ext.create('Ext.form.Panel', {
			region          : 'south',
			height          : 300,
			collapsible     : true,
			titleCollapse   : false,
			hideCollapseTool: true,
			collapsed       : true,
			border          : true,
			split           : true,
			collapseMode    : 'header',
			bodyStyle       : 'padding: 5px',
			layout          : 'anchor',
			fieldDefaults   : {msgTarget: 'side'},
			tools           : [
				{
					itemId : 'refresh',
					type   : 'refresh',
					scope  : me,
					handler: me.previewFormRender
				}
			]
		});

		me.pageBody = [ me.fieldsGrid, me.formsGrid , me.formContainer, me.fromPreview ];
		me.callParent(arguments);
	},
	/**
	 * if the form is valid send the POST request
	 */
	onSave              : function() {
		var me = this,
			form = me.fieldForm.getForm();
		if(form.isValid()) {
			var params = form.getValues();

			if(form.findField('id').getValue() == '') {
				FormLayoutBuilder.addField(params, function(provider, response) {
					if(response.result.success) {
						me.loadFieldsGrid();
					} else {
						Ext.Msg.alert('Opps!', response.result.error);
					}
				});
			} else {
				FormLayoutBuilder.updateField(params, function(provider, response) {
					if(response.result.success) {
						me.loadFieldsGrid();
					} else {
						Ext.Msg.alert('Opps!', response.result.error);
					}
				});
			}
		}
	},
	/**
	 * Delete logic
	 */
	onDelete            : function() {
		var me = this,
			form = me.fieldForm.getForm(),
			rec = form.getRecord();

		Ext.Msg.show({
			title  : i18n['please_confirm'] + '...',
			icon   : Ext.MessageBox.QUESTION,
			msg    : i18n['delete_this_field'],
			buttons: Ext.Msg.YESNO,
			scope  : this,
			fn     : function(btn) {
				if(btn == 'yes') {
					var params = {
						id     : rec.data.id,
						form_id: rec.data.form_id,
						name   : rec.data.name,
						xtype  : rec.data.xtype
					};

					FormLayoutBuilder.deleteField(params, function(provider, response) {
						if(response.result.success) {
							me.msg('Sweet!', i18n['field_deleted']);
							me.currField = null;
							me.loadFieldsGrid();
							me.onFormReset();
						} else {
							Ext.Msg.alert('Opps!', response.result.error);
						}
					});
				}
			}
		});
	},
	/**
	 *
	 * @param node
	 * @param data
	 * @param overModel
	 */
	onDragDrop          : function(node, data, overModel) {
		var me = this,
			childItems = [];
        for(var i=0; i < overModel.parentNode.childNodes.length; i++ ){
			childItems.push(overModel.parentNode.childNodes[i].data.id);
		}
		var params = {
			id              : data.records[0].data.id,
			parentNode      : overModel.parentNode.data.id,
			parentNodeChilds: childItems
		};


		FormLayoutBuilder.sortFields(params, function(provider, response) {
			if(response.result.success) {
				me.msg('Sweet!', i18n['form_fields_sorted']);
				me.loadFieldsGrid();
				me.onFormReset();
			} else {
				Ext.Msg.alert('Opps!', response.result.error);
			}
		});
	},
	/**
	 * This is to reset the Form and load
	 * a new Model with the currForm id
	 */
	onFormReset         : function() {
		var formPanel = this.fieldForm,
			form = formPanel.getForm(),
			row = this.fieldsGrid.getSelectionModel();
		row.deselectAll();
		form.reset();
		var model = Ext.ModelManager.getModel('layoutTreeModel'),
			newModel = Ext.ModelManager.create({
				form_id: this.currForm
			}, model);
		formPanel.el.unmask();
		form.loadRecord(newModel);
	},
	/**
	 *
	 * load a new model with the form_id and item_of values.
	 * This is the easy way to add a child to a fieldset or fieldcontainer.
	 */
	onAddChild          : function() {
		var formPanel = this.fieldForm,
			form = formPanel.getForm(),
			row = this.fieldsGrid.getSelectionModel();
		row.deselectAll();
		form.reset();
		var model = Ext.ModelManager.getModel('layoutTreeModel'),
			newModel = Ext.ModelManager.create({
				form_id: this.currForm,
				item_of: this.currField
			}, model);
		formPanel.el.unmask();
		form.loadRecord(newModel);
	},
	/**
	 *
	 * This will load the current field data to the form,
	 * set the currField, and enable the Add Child btn if
	 * the field allows child items (fieldset or fieldcontainer)
	 *
	 * @param grid
	 * @param record
	 */
	onFieldsGridClick   : function(grid, record) {
		var formPanel = this.fieldForm,
			form = formPanel.getForm();
		form.loadRecord(record);
		this.currField = record.data.id;
		if(record.data.xtype == 'fieldset' || record.data.xtype == 'fieldcontainer') {
			this.formContainer.down('toolbar').getComponent('addChild').enable();
		} else {
			this.formContainer.down('toolbar').getComponent('addChild').disable();
		}
		formPanel.el.unmask();
	},
	/**
	 *
	 * @param DataView
	 * @param record
	 */
	onFormGridItemClick : function(DataView, record) {
		this.currForm = record.get('id');
		this.fieldsGrid.setTitle( i18n['field_editor'] + ' (' + record.get('name') + ')');
		this.loadFieldsGrid();
		this.onFormReset();
		this.fieldForm.el.mask( i18n['or_select_a_field_to_update'] );
	},
	/**
	 *
	 * This will load the Select List options. This Combobox shows only when
	 * a Type of Combobox is selected
	 *
	 * @param combo
	 * @param value
	 */
	onSelectListSelect  : function(combo, value) {
		this.selectListoptionsStore.load({params: {list_id: value}});
	},
	/**
	 *
	 * This is to handle a error when loading a combobox store.
	 *
	 * @param combo
	 */
	onParentFieldsExpand: function(combo) {
		combo.picker.loadMask.destroy();
	},
	/**
	 * onXtypeChange will search the combo value and enable/disable
	 * the fields appropriate for the xtype selected
	 *
	 * @param combo
	 * @param value
	 */
	onXtypeChange       : function(combo, value) {
		var me = this;

		if(value == 'combobox') {
			me.selectListGrid.setTitle( i18n['select_list_options']);
			me.selectListGrid.expand();
			me.selectListGrid.enable();
		} else {
			me.selectListGrid.setTitle('');
			me.selectListGrid.collapse();
			me.selectListGrid.disable();
		}

		/**
		 *
		 * @param searchStr
		 */
		Array.prototype.find = function(searchStr) {
			var returnArray = false;
			for(var i = 0; i < this.length; i++) {
				if(typeof(searchStr) == 'function') {
					if(searchStr.test(this[i])) {
						if(!returnArray) {
							returnArray = [];
						}
						returnArray.push(i);
					}
				} else {
					if(this[i] === searchStr) {
						if(!returnArray) {
							returnArray = [];
						}
						returnArray.push(i);
					}
				}
			}
			return returnArray;
		};


		var addProp = me.fieldForm.getComponent('aditionalProperties');
		var is = addProp.items.keys;

		/**
		 *
		 * @param items
		 */
		function enableItems(items) {
			for(var i = 0; i < is.length; i++) {
				if(!items.find(is[i])) {
					addProp.getComponent(is[i]).hide();
					addProp.getComponent(is[i]).disable();
				} else {
					addProp.getComponent(is[i]).show();
					addProp.getComponent(is[i]).enable();
				}

			}
		}

		var items;
		if(value == 'fieldset') {
			items = [
				'title',
				'collapsible',
				'collapsed',
				'checkboxToggle',
				'margin',
				'columnWidth'
			];
		} else if(value == 'fieldcontainer') {
			items = [
				'fieldLabel',
				'labelWidth',
				'hideLabel',
				'width',
				'layout',
				'margin',
				'columnWidth'
			];
		} else if(value == 'combobox') {
			items = [
				'name',
				'width',
				'emptyText',
				'fieldLabel',
				'hideLabel',
				'labelWidth',
				'margin',
				'allowBlank',
				'list_id'
			];
		} else if(value == 'mitos.checkbox') {
			items = [
				'name',
				'width',
				'fieldLabel',
				'hideLabel',
				'labelWidth',
				'margin'
			];
		} else if(value == 'textfield') {
			items = [
				'name',
				'width',
				'anchor',
				'emptyText',
				'fieldLabel',
				'hideLabel',
				'labelWidth',
				'allowBlank',
				'margin'
			];
		} else if(value == 'textareafield') {
			items = [
				'name',
				'width',
				'anchor',
				'height',
				'emptyText',
				'fieldLabel',
				'hideLabel',
				'labelWidth',
				'allowBlank',
				'grow',
				'growMin',
				'growMax',
				'margin'
			];
		} else if(value == 'numberfield') {
			items = [
				'name',
				'width',
				'value',
				'emptyText',
				'maxValue',
				'minValue',
				'increment',
				'fieldLabel',
				'labelWidth',
				'hideLabel',
				'margin'
			];
		} else if(value == 'timefield') {
			items = [
				'name',
				'width',
				'value',
				'emptyText',
				'timeMaxValue',
				'timeMinValue',
				'increment',
				'fieldLabel',
				'labelWidth',
				'hideLabel',
				'margin'
			];
		} else if(value == 'radiofield') {
			items = [
				'name',
				'width',
				'boxLabel',
				'labelWidth',
				'hideLabel',
				'margin',
				'inputValue'
			];
		} else if(value == 'datefield' || value == 'mitos.datetime') {
			items = [
				'name',
				'width',
				'value',
				'layout',
				'emptyText',
				'fieldLabel',
				'labelWidth',
				'hideLabel',
				'allowBlank',
				'margin'
			];
		} else {
			items = [
				'name',
				'width',
				'emptyText',
				'fieldLabel',
				'labelWidth',
				'hideLabel',
				'margin'
			];
		}
		enableItems(items);
	},
	/**
	 *
	 * On toggle down/true expand the preview panel and re-render the form
	 *
	 * @param btn
	 * @param toggle
	 */
	onFormPreview       : function(btn, toggle) {
		var me = this;

		if(toggle === true) {
			me.previewFormRender();
			me.fromPreview.expand(false);
		} else {
			me.fromPreview.collapse(false);
		}
	},
	/**
	 *
	 *  this function re-render the preview form
	 */
	previewFormRender   : function() {
		var me = this,
			form = this.fromPreview;

		form.el.mask();
		me.getFormItems(form, me.currForm, function() {
			form.doLayout();
			form.el.unmask();
		});

	},
	/**
	 *
	 *  re-load the fields grid (main TreeGrid)
	 *  check if a form is selected, if not the select the first choice
	 *  save the form id inside this.currForm and load the grid and the
	 *  parent fields of this form.
	 *
	 *  parentFieldsStore is use to create the child of select list
	 */
	loadFieldsGrid      : function() {
		var me = this,
			row = me.formsGrid.getSelectionModel();
		if(me.currForm === null) {
			row.select(0);
		}
		me.currForm = row.getLastSelected().data.id;

		me.fieldsGridStore.load({params: {currForm: me.currForm }});
		me.parentFieldsStore.load({params: {currForm: me.currForm }});

		me.previewFormRender();
		me.fieldsGrid.doLayout()
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive            : function(callback) {
        var me = this;
        me.onFormReset();
        me.fieldForm.el.mask( i18n['or_select_a_field_to_update'] );
        me.selectListoptionsStore.load({
            callback:function(){
                me.loadFieldsGrid();
            }
        });
        //me.loadFieldsGrid();
		callback(true);
	}
});
/**
 *
 * list.ejs.php
 * List Options Panel
 * v0.0.2
 *
 * Author: Ernest Rodriguez
 * Modified: GI Technologies, 2011
 *
 * GaiaEHR (Eletronic Health Records) 2011
 *
 * @namespace Lists.getOptions
 * @namespace Lists.addOption
 * @namespace Lists.updateOption
 * @namespace Lists.deleteOption
 * @namespace Lists.sortOptions
 * @namespace Lists.getLists
 * @namespace Lists.addList
 * @namespace Lists.updateList
 * @namespace Lists.deleteList
 *
 */
Ext.define('App.view.administration.Lists', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelLists',
	pageTitle    : i18n['select_list_options'],
	pageLayout   : 'border',
	uses         : [
		'App.classes.GridPanel',
		'App.classes.form.Panel',
		'Ext.grid.plugin.RowEditing'
	],
	initComponent: function() {

		var me = this;
		me.currList = null;
		me.currTask = null;

		/**
		 * Options Store
		 */
		Ext.define('ListOptionsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'        },
				{name: 'list_id', type: 'string'    },
				{name: 'option_value', type: 'string'    },
				{name: 'option_name', type: 'string'    },
				{name: 'seq', type: 'string'     },
				{name: 'notes', type: 'string'    },
				{name: 'active', type: 'bool'    }
			]

		});
		me.optionsStore = Ext.create('Ext.data.Store', {
			model   : 'ListOptionsModel',
			proxy   : {
				type: 'direct',
				api : {
					read  : Lists.getOptions,
					create: Lists.addOption,
					update: Lists.updateOption
				}
			},
			autoLoad: false
		});
		/**
		 * List Store
		 */
		Ext.define('ListsGridModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'        },
				{name: 'title', type: 'string'    },
				{name: 'active', type: 'bool'    },
				{name: 'in_use', type: 'bool'    }
			]
		});
		me.listsStore = Ext.create('Ext.data.Store', {
			model   : 'ListsGridModel',
			proxy   : {
				type: 'direct',
				api : {
					read  : Lists.getLists,
					create: Lists.addList,
					update: Lists.updateList
				}
			},
			autoLoad: false
		});
		/**
		 * RowEditor Classes
		 */
		me.optionsRowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
			autoCancel   : false,
			errorSummary : false,
			listeners    : {
				scope     : me,
				afteredit : me.afterEdit,
				canceledit: me.onCancelEdit
			}
		});
		me.listsRowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
			autoCancel   : false,
			errorSummary : false,
			listeners    : {
				scope     : me,
				afteredit : me.afterEdit,
				canceledit: me.onCancelEdit
			}
		});
		/**
		 * Lists Grid
		 */
		me.listsGrid = Ext.create('App.classes.GridPanel', {
			store      : me.listsStore,
			itemId     : 'listsGrid',
			plugins    : [ me.listsRowEditing ],
			width      : 320,
			margin     : '0 2 0 0',
			region     : 'west',
			columns    : [
				{
					text     : i18n['select_lists'],
					flex     : 1,
					sortable : false,
					dataIndex: 'title',
					editor   : {
						allowBlank: false
					}
				},
				{
					text     : i18n['active'],
					width    : 55,
					sortable : false,
					dataIndex: 'active',
					renderer : me.boolRenderer,
					editor   : {
						xtype  : 'mitos.checkbox',
						padding: '0 0 0 18'
					}
				},
				{
					text     : i18n['in_use'],
					width    : 55,
					sortable : false,
					dataIndex: 'in_use',
					renderer : me.boolRenderer
				}
			],
			listeners  : {
				scope    : me,
				selectionchange: me.onListsGridClick
			},
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: [
						{
							text   : i18n['new_list'],
							iconCls: 'icoAddRecord',
							scope  : me,
							handler: me.onNewList
						},
						'->',
						{
							text    : i18n['delete_list'],
							iconCls : 'icoDeleteBlack',
							itemId  : 'listDeleteBtn',
							disabled: true,
							scope   : me,
							handler : me.onDelete,
							tooltip : i18n['can_be_disable']
						}
					]
				}
			]
		});
		/**
		 * Options Grid
		 */
		me.optionsGrid = Ext.create('App.classes.GridPanel', {
			store      : me.optionsStore,
			itemId     : 'optionsGrid',
			plugins    : [ me.optionsRowEditing ],
			region     : 'center',
			viewConfig : {
				plugins  : {
					ptype   : 'gridviewdragdrop',
					dragText: i18n['drag_and_drop_reorganize']
				},
				listeners: {
					scope: me,
					drop : me.onDragDrop
				}
			},
			columns    : [
				{
					text     : i18n['option_title'],
					width    : 200,
					sortable : true,
					dataIndex: 'option_name',
					editor   : {
						allowBlank     : false,
						enableKeyEvents: true,
						listeners      : {
							scope: me,
							keyup: me.onOptionTitleChange
						}
					}
				},
				{
					text     : i18n['option_value'],
					width    : 200,
					sortable : true,
					dataIndex: 'option_value',
					editor   : {
						allowBlank: false,
						readOnly  : true,
						itemId    : 'optionValueTextField'
					}
				},
				{
					text     : i18n['notes'],
					sortable : true,
					dataIndex: 'notes',
					flex     : 1,
					editor   : { allowBlank: true }
				},
				{
					text     : i18n['active'],
					width    : 55,
					sortable : false,
					dataIndex: 'active',
					renderer : me.boolRenderer,
					editor   : {
						xtype  : 'mitos.checkbox',
						padding: '0 0 0 18'
					}
				}
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: ['->', {
						text   : i18n['add_option'],
						iconCls: 'icoAddRecord',
						scope  : me,
						handler: me.onNewOption
					}]
				}
			]
		});
		me.pageBody = [me.listsGrid, me.optionsGrid ];
		me.callParent(arguments);
	},

	/**
	 * This wll load a new record to the grid
	 * and start the rowEditor
	 */
	onNewList: function() {
		var me = this;
		me.listsRowEditing.cancelEdit();
		var m = Ext.create('ListsGridModel', {});
		me.listsStore.insert(0, m);
		me.listsRowEditing.startEdit(0, 0);
	},

	/**
	 *
	 * @param grid
	 * @param record
	 */
	onListsGridClick: function(grid, selected) {
		var me = this,
			deleteBtn = me.listsGrid.down('toolbar').getComponent('listDeleteBtn'),
		inUse = !!selected[0].data.in_use == '1';

		me.currList = selected[0].data.id;
		me.optionsStore.load({params: {list_id: me.currList}});

		inUse ? deleteBtn.disable() : deleteBtn.enable();
	},

	/**
	 * This wll load a new record to the grid
	 * and start the rowEditor
	 */
	onNewOption: function() {
		var me = this;
		me.optionsRowEditing.cancelEdit();
		var m = Ext.create('ListOptionsModel', {
			list_id: me.currList
		});
		me.optionsStore.insert(0, m);
		me.optionsRowEditing.startEdit(0, 0);
	},

	/**
	 * Set the Option Value same as Option Title
	 * @param a
	 */
	onOptionTitleChange: function(a) {
		var value = a.getValue(),
			field = a.up('container').getComponent('optionValueTextField');
		field.setValue(value);
	},
	/**
	 * Logic to sort the options
	 * @param node
	 * @param data
	 * @param overModel
	 */
	onDragDrop         : function(node, data, overModel) {
		var me = this,
			items = overModel.stores[0].data.items,
			gridItmes = [];
        for(var i=0; i < items.length; i++ ){
            gridItmes.push(items[i].data.id);
		}
		var params = {
			list_id: data.records[0].data.list_id,
			fields : gridItmes
		};
		Lists.sortOptions(params, function() {
			me.optionsStore.load({params: {list_id: me.currList}});
		});
	},


	/**
	 * Row Editting stuff
	 * @param a
	 */
	afterEdit: function(a) {
		a.context.store.sync();
		//a.context.store.load({params: {list_id: this.currList}});
	},

	onCancelEdit: function(a) {
        say(a);
		a.context.store.load({params: {list_id: this.currList}});
	},

	onDelete: function(a) {
		var me = this,
			grid = a.up('grid'),
			store = grid.getStore(),
			sm = grid.getSelectionModel(),
			record = sm.getLastSelected();

		Ext.Msg.show({
			title  : i18n['please_confirm'] + '...',
			icon   : Ext.MessageBox.QUESTION,
			msg    : i18n['delete_this_record'],
			buttons: Ext.Msg.YESNO,
			scope  : me,
			fn     : function(btn) {
				if(btn == 'yes') {
					Lists.deleteList(record.data, function(provider, response) {
						if(response.result.success) {
							me.msg('Sweet!', i18n['list'] + ' "' + record.data.title + '" ' + i18n['deleted'] + '.');
							store.load();
							me.optionsStore.load();
						} else {
							Ext.Msg.alert('Oops!', i18n['unable_to_delete'] + ' "' + record.data.title + '"<br>' + i18n['list_currently_used_forms'] + '.');
						}

					});
				}
			}
		});
	},

	loadGrid: function() {
		var me = this;
		if(me.currList === null) {
			me.currList = me.listsStore.getAt(0).data.id;
		}
		me.optionsStore.load({params: {list_id: me.currList}});
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
        var me = this;
        this.listsStore.load({
            scope:me,
            callback:me.loadGrid
        });
		//this.loadGrid();
        callback(true);
	}
});

/**
 * Logs.ejs.php
 * Description: Log Screen
 * v0.0.4
 *
 * Author: Ernesto J Rodriguez
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Logs.getLogs
 */
Ext.define('App.view.administration.Log', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelLog',
	uses         : [ 'App.classes.GridPanel' ],
	pageTitle    : i18n['event_history_log'],
	initComponent: function() {
		var me = this;

		Ext.define('LogsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'date', type: 'string'},
				{name: 'event', type: 'auto'},
				{name: 'user', type: 'string'},
				{name: 'facility', type: 'string'},
				{name: 'comments', type: 'string'},
				{name: 'user_notes', type: 'string'},
				{name: 'patient_id', type: 'string'},
				{name: 'success', type: 'int'},
				{name: 'checksum', type: 'string'},
				{name: 'crt_user', type: 'string'}
			]

		});

		me.logStore = Ext.create('Ext.data.Store', {
			model   : 'LogsModel',
			proxy   : {
				type  : 'direct',
				api   : {
					read: Logs.getLogs
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			},
			autoLoad: false
		});

		// *************************************************************************************
		// Create the GridPanel
		// *************************************************************************************
		me.logGrid = Ext.create('App.classes.GridPanel', {
			store    : me.logStore,
			columns  : [
				{ text: 'id', sortable: false, dataIndex: 'id', hidden: true},
				{ width: 120, text: 'Date', sortable: true, dataIndex: 'date' },
				{ width: 160, text: 'User', sortable: true, dataIndex: 'user' },
				{ width: 100, text: 'Event', sortable: true, dataIndex: 'event' },
				{ flex: 1, text: 'Activity', sortable: true, dataIndex: 'comments' }
			],
			listeners: {
				scope       : this,
				itemclick   : me.onItemclick,
				itemdblclick: me.onItemdblclick
			},
			tbar     : Ext.create('Ext.PagingToolbar', {
				store      : me.logStore,
				displayInfo: true,
				emptyMsg   : i18n['no_office_notes_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items      : [
					{
						xtype   : 'button',
						text    : i18n['view_log_event_details'],
						iconCls : 'edit',
						itemId  : 'detail',
						disabled: true,
						handler : function() {
							me.winLog.show();
						}
					}
				]
			})
		});

		// *************************************************************************************
		// Event Detail Window
		// *************************************************************************************
		me.winLog = Ext.create('Ext.window.Window', {
			title      : i18n['log_event_details'],
			width      : 500,
			closeAction: 'hide',
			items      : [
				{
					xtype     : 'form',
					bodyStyle : 'padding: 10px;',
					autoWidth : true,
					border    : false,
					hideLabels: true,
					defaults  : { labelWidth: 89, anchor: '100%',
						layout              : { type: 'hbox', defaultMargins: {top: 0, right: 5, bottom: 0, left: 0} }
					},
					items     : [
						{ xtype: 'textfield', hidden: true, name: 'id'},
						{ fieldLabel: i18n['date'], xtype: 'displayfield', name: 'date'},
						{ fieldLabel: i18n['event'], xtype: 'displayfield', name: 'event'},
						{ fieldLabel: i18n['user'], xtype: 'displayfield', name: 'user'},
						{ fieldLabel: i18n['facility'], xtype: 'displayfield', name: 'facility'},
						{ fieldLabel: i18n['comments'], xtype: 'displayfield', name: 'comments'},
						{ fieldLabel: i18n['user_notes'], xtype: 'displayfield', name: 'user_notes'},
						{ fieldLabel: i18n['patient_id'], xtype: 'displayfield', name: 'patient_id'},
						{ fieldLabel: i18n['success'], xtype: 'displayfield', name: 'success'},
						{ fieldLabel: i18n['check_sum'], xtype: 'displayfield', name: 'checksum'},
						{ fieldLabel: i18n['crt_user'], xtype: 'displayfield', name: 'crt_user'}
					]
				}
			],
			buttons    : [
				{
					text   : i18n['close'],
					handler: function() {
						this.up('window').hide();
					}
				}
			]
		});
		me.pageBody = [ me.logGrid ];
		me.callParent(arguments);
	}, // end of initComponent

	onItemclick   : function(view, record) {
		var form = this.winLog.down('form'),
			editBtn = this.logGrid.down('toolbar').getComponent('detail');
		form.getForm().loadRecord(record);
		editBtn.enable();
	},
	onItemdblclick: function(view, record) {
		var form = this.winLog.down('form');
		form.getForm().loadRecord(record);
		this.winLog.show();
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive      : function(callback) {
		this.logStore.load();
		callback(true);
	}
});
/**
 * services.ejs.php
 * Services
 * v0.0.1
 *
 * Author: Ernest Rodriguez
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 *
 * @namespace Services.getServices
 * @namespace Services.addService
 * @namespace Services.updateService
 */
Ext.define('App.view.administration.Medications', {
	extend   : 'App.classes.RenderPanel',
	id       : 'panelMedications',
	pageTitle: i18n['medications'],

	initComponent: function() {
		var me = this;
		me.query = '';

		me.storeMedications = Ext.create('App.store.administration.Medications');

		me.medicationsGrid = Ext.create('App.classes.GridPanel', {
			region : 'center',
			store  : me.storeMedications,
			columns: [
				{
					width    : 70,
					header   : i18n['number'],
					dataIndex: 'PRODUCTNDC',
					sortable : true
				},
				{
					width    : 80,
					header   : i18n['name'],
					dataIndex: 'PROPRIETARYNAME',
					sortable : true
				},
				{
					width    : 200,
					header   : i18n['active_component'],
					dataIndex: 'NONPROPRIETARYNAME',
					sortable : true
				},
				{
					width    : 175,
					header   : i18n['dosage'],
					dataIndex: 'DOSAGEFORMNAME',
					sortable : true
				},
				{
					width    : 45,
					header   : i18n['number'],
					dataIndex: 'ACTIVE_NUMERATOR_STRENGTH',
					sortable : true
				},
				{
					flex     : 1,
					header   : i18n['unit'],
					dataIndex: 'ACTIVE_INGRED_UNIT',
					sortable : true
				}
			],
			plugins: Ext.create('App.classes.grid.RowFormEditing', {
				autoCancel  : false,
				errorSummary: false,
				clicksToEdit: 1,
				enableRemove:true,
				formItems   : [
					{

						title  : 'general',
						xtype  : 'container',
						padding: 10,
						layout : 'vbox',
						items  : [
							{
								/**
								 * Line one
								 */
								xtype   : 'fieldcontainer',
								layout  : 'hbox',
								defaults: { margin: '0 10 5 0' },
								items   : [
									{
										xtype     : 'textfield',
										fieldLabel: i18n['name'],
										width     : 150,
										labelWidth: 50,
										name      : 'PROPRIETARYNAME'


									},
									{
										xtype     : 'textfield',
										fieldLabel: i18n['active_component'],
										width     : 350,
										labelWidth: 125,
										name      : 'NONPROPRIETARYNAME'

									},

									{
										xtype     : 'textfield',
										fieldLabel: i18n['dosage'],
										width     : 200,
										labelWidth: 50,
										name      : 'DOSAGEFORMNAME'

									}
								]

							},
							{
								/**
								 * Line two
								 */
								xtype   : 'fieldcontainer',
								layout  : 'hbox',
								defaults: { margin: '0 10 5 0' },
								items   : [
									{
										xtype     : 'textfield',
										fieldLabel: i18n['code'],
										labelWidth: 50,
										width     : 150,
										name      : 'PRODUCTNDC'


									},
									{
										xtype     : 'textfield',
										fieldLabel: i18n['dosis'],
										margin    : '0 0 5 0',
										value     : 0,
										minValue  : 0,
										width     : 275,
										labelWidth: 125,
										name      : 'ACTIVE_NUMERATOR_STRENGTH'

									},
									{
										xtype: 'textfield',
										name : 'ACTIVE_INGRED_UNIT',
										width: 75

									}
								]

							}

						]


					}
				]

			}),
			tbar   : Ext.create('Ext.PagingToolbar', {
				store      : me.storeMedications,
				displayInfo: true,
				emptyMsg   : i18n['no_office_notes_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items:[
					'-',
					{
					text:'Add New',
					scope:me,
					handler:me.onAddMedication
					},'-',
					{
					xtype          : 'textfield',
					emptyText      : i18n['search'],
					enableKeyEvents: true,
					itemId         : 'query',
					listeners      : {
						scope : me,
						keyup : me.onSearchMedications,
						buffer: 500
								}
					},'-',
					{
						text: i18n['reset'],
						scope:me,
						handler:me.onFieldReset
					}
				]
			})


		});
		me.pageBody = [ me.medicationsGrid ];
		me.callParent(arguments);
	}, // end of initComponent

	onFieldReset: function(){


	},

	onAddMedication: function() {
		this.medicationsGrid.editingPlugin.cancelEdit();

		this.storeMedications.insert(0,{});
		this.medicationsGrid.editingPlugin.startEdit(0,0);

	},

	onSearchMedications: function(field) {
		var me = this,
			store = me.storeMedications;

		me.query = field.getValue();

		store.proxy.extraParams = {query: me.query};
		store.load();
	},




	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function() {
		this.medicationsGrid.down('toolbar').getComponent('query').reset();
		this.storeMedications.proxy.extraParams = {};
		this.storeMedications.load();

	}
}); //ens servicesPage class
/**
 * Users.ejs.php
 * Description: Users Screen
 * v0.0.4
 *
 * Author: Ernesto J Rodriguez (Certun)
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace User.getUsers
 * @namespace User.addUser
 * @namespace User.updateUser
 * @namespace User.chechPasswordHistory
 */
Ext.define('App.view.administration.FloorPlans', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelFloorPlans',
	pageTitle    : i18n['floor_plan_editor'],
	pageLayout   : 'border',
	floorPlanId  : null,
	activeZone   : null,
	initComponent: function() {
		var me = this;
		me.floorPlansStore = Ext.create('App.store.administration.FloorPlans',{
			autoLoad:true
		});
		me.floorPlanZonesStore = Ext.create('App.store.administration.FloorPlanZones');

		me.floorPlans = Ext.create('Ext.grid.Panel',{
			title: i18n['floor_plans'],
			region:'west',
			width:200,
			split:true,
			hideHeaders:true,
			store: me.floorPlansStore,
			plugins:[
				me.floorPlanEditing = Ext.create('Ext.grid.plugin.RowEditing', {
		            clicksToEdit: 2
		        })
			],
			columns:[
				{
					dataIndex:'title',
					sortable: false,
                    hideable: false,
					flex: 1,
					editor:{
						xtype:'textfield'
					}
				}
			],
			tbar:[
				'->',
				{
					text: i18n['add_floor_plan'],
					action:'newFloorPlan',
					scope:me,
					handler:me.onNewFloorPlan
				}
			],
			listeners:{
				scope:me,
				select:me.onFloorPlanSelected
			}
		});

		me.floorPlan = Ext.create('Ext.panel.Panel',{
			title: i18n['floor_plan'],
			region:'center',
			bodyCls:'floorPlan',
			layout:'absolute',
			tbar:[
				'->',
				{
					text: i18n['add_zone'],
					action:'newZone',
					scope:me,
					handler:me.onNewZone
				}
			]
		});



		me.listeners = {
			show:function(){
				me.nav = Ext.create('Ext.util.KeyNav', Ext.getDoc(), {
			        scope: me,
			        left: function(){
				        me.moveZone('left')
			        },
			        up: function(){
                        me.moveZone('up')
                    },
			        right: function(){
                        me.moveZone('right')
                    },
			        down: function(){
                        me.moveZone('down')
                    }
			    });
			},
            hide:function(){
                if(me.nav){
                    Ext.destroy(me.nav);
                }
            }
		};

		me.pageBody = [ me.floorPlans, me.floorPlan ];
		me.callParent(arguments);
	},

	onNewZone:function(){
		this.createZone(null);
	},

	createZone:function(record){
		var me = this, zone, form;
		zone = Ext.create('Ext.button.Split', {
		    text: record ? record.data.title : i18n['new_zone'],
			toggleGroup:'zones',
			draggable:{
				listeners:{
					scope:me,
					dragend:me.zoneDragged
				}
			},
			scale:'medium',
			x:record ? record.data.x : 0,
			y:record ? record.data.y : 0,
			enableToggle:true,
			toggleHandler:function(btn, pressed){
				if(pressed){
					me.activeZone = zone;
					me.floorPlan.focus();
				}else{
					me.activeZone = null;
					var rec = btn.menu.items.items[0].getForm().getRecord();
					rec.set({x:btn.x,y:btn.y});
				}
			},
			menu:[
				form = Ext.create('Ext.form.Panel',{
					bodyPadding:'5 5 0 5',
					items:[
						{
							xtype:'textfield',
							fieldLabel: i18n['zone_name'],
							labelWidth:80,
							name:'title'
						}
					]
				})
			],
			listeners:{
				scope:me,
				menushow:me.afterMenuShow,
				menuhide:me.afterMenuHide
			}
		});

		me.floorPlan.add(zone);

		if(record != null){
			form.getForm().loadRecord(record)
		}else{
			me.floorPlanZonesStore.add({
				floor_plan_id:me.floorPlanId,
				title: i18n['new_zone'],
				x:0,
				y:0,
				active:1
			});

			me.floorPlanZonesStore.sync({
				callback:function(batch, options){
					form.getForm().loadRecord(batch.operations[0].records[0])
				}
			})
		}
	},

	afterMenuShow:function(btn){
		btn.toggle(true);
	},

	afterMenuHide:function(btn){
		var form = btn.menu.items.items[0].getForm(),
			values = form.getValues(),
			rec = form.getRecord();
		btn.setText(values.title);
		rec.set(values);
	},

	moveZone:function(direction){
		if(app.currCardCmp == this && this.activeZone != null){
			var x = this.activeZone.x, y = this.activeZone.y;
			if(direction == 'left'){
				x = x-1;
			}else if(direction == 'right'){
				x = x+1;
			}else if(direction == 'up'){
				y = y-1;
			}else if(direction == 'down'){
				y = y+1;
			}
			this.activeZone.setPosition(x,y);
		}
	},

	zoneDragged:function(drag){
		var me = this, rec = drag.comp.menu.items.items[0].getForm().getRecord();
		rec.set({x:drag.comp.x,y:drag.comp.y});
	},

	onNewFloorPlan:function(){
		this.floorPlansStore.add({
			title: i18n['new_floor_plan']
		});
	},

	onFloorPlanSelected:function(model, record){
		this.floorPlanId = record.data.id;
		this.reloadFloorPlanZones();
	},

	reloadFloorPlanZones:function(){
		var me = this;
		me.floorPlan.removeAll();
		me.floorPlanZonesStore.load({
			params:{ floor_plan_id:this.floorPlanId },
			scope:me,
			callback:function(records, operation, success){
				this.activeZone = null;
				for(var i=0; i < records.length; i++){
					me.createZone(records[i]);
				}
			}
		});
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		var me = this;
		me.floorPlans.getSelectionModel().select(0);
		callback(true);
	}
});
/**
 * Practice Panel
 *
 * Author: Ernesto J Rodriguez
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace Practice.getPharmacies
 * @namespace Practice.addPharmacy
 * @namespace Practice.updatePharmacy
 *
 * @namespace Practice.getInsurances
 * @namespace Practice.addInsurance
 * @namespace Practice.updateInsurance
 *
 *
 */
Ext.define('App.view.administration.Practice', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelPractice',
	pageTitle    : i18n['practice_settings'],
	uses         : [
		'App.classes.combo.Titles', 'App.classes.combo.TransmitMethod', 'App.classes.combo.InsurancePayerType'
	],
	initComponent: function() {
		var me = this;

		/**
		 * Pharmacy Model and Store
		 */
		Ext.define('pharmacyGridModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'},
				{name: 'transmit_method', type: 'string'},
				{name: 'email', type: 'string'},
				{name: 'address_id', type: 'int'},
				{name: 'line1', type: 'string'},
				{name: 'line2', type: 'string'},
				{name: 'city', type: 'string'},
				{name: 'state', type: 'string'},
				{name: 'zip', type: 'string'},
				{name: 'plus_four', type: 'string'},
				{name: 'country', type: 'string'},
				{name: 'address_full', type: 'string'},
				{name: 'phone_id', type: 'int'},
				{name: 'phone_country_code', type: 'string'},
				{name: 'phone_area_code', type: 'string'},
				{name: 'phone_prefix', type: 'string'},
				{name: 'phone_number', type: 'string'},
				{name: 'phone_full', type: 'string'},
				{name: 'fax_id', type: 'int'},
				{name: 'fax_country_code', type: 'string'},
				{name: 'fax_area_code', type: 'string'},
				{name: 'fax_prefix', type: 'string'},
				{name: 'fax_number', type: 'string'},
				{name: 'fax_full', type: 'string'},
				{name: 'active', type: 'bool'}
			],
			proxy : {
				type: 'direct',
				api : {
					read  : Practice.getPharmacies,
					create: Practice.addPharmacy,
					update: Practice.updatePharmacy
				}
			}
		});
		me.pharmacyStore = Ext.create('Ext.data.Store', {
			model     : 'pharmacyGridModel',
			remoteSort: false,
			autoSync:true
		});
		// *************************************************************************************
		// Insurance Record Structure
		// *************************************************************************************
		Ext.define('insuranceGridModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'},
				{name: 'attn', type: 'string'},
				{name: 'cms_id', type: 'string'},
				{name: 'freeb_type', type: 'string'},
				{name: 'x12_receiver_id', type: 'string'},
				{name: 'x12_default_partner_id', type: 'string'},
				{name: 'alt_cms_id', type: 'string'},
				{name: 'address_id', type: 'int'},
				{name: 'line1', type: 'string'},
				{name: 'line2', type: 'string'},
				{name: 'city', type: 'string'},
				{name: 'state', type: 'string'},
				{name: 'zip', type: 'string'},
				{name: 'plus_four', type: 'string'},
				{name: 'country', type: 'string'},
				{name: 'address_full', type: 'string'},
				{name: 'phone_id', type: 'int'},
				{name: 'phone_country_code', type: 'string'},
				{name: 'phone_area_code', type: 'string'},
				{name: 'phone_prefix', type: 'string'},
				{name: 'phone_number', type: 'string'},
				{name: 'phone_full', type: 'string'},
				{name: 'fax_id', type: 'int'},
				{name: 'fax_country_code', type: 'string'},
				{name: 'fax_area_code', type: 'string'},
				{name: 'fax_prefix', type: 'string'},
				{name: 'fax_number', type: 'string'},
				{name: 'fax_full', type: 'string'},
				{name: 'active', type: 'bool'}
			],
			proxy : {
				type: 'direct',
				api : {
					read  : Practice.getInsurances,
					create: Practice.addInsurance,
					update: Practice.updateInsurance
				}
			}
		});
		me.insuranceStore = Ext.create('Ext.data.Store', {
			model     : 'insuranceGridModel',
			remoteSort: false,
			autoSync:true
		});
		// *************************************************************************************
		// Insurance Numbers Record Structure
		// *************************************************************************************
		//		me.insuranceNumbersStore = Ext.create('App.classes.restStoreModel', {
		//			fields     : [
		//				{name: 'id', type: 'int'},
		//				{name: 'name', type: 'string'}
		//			],
		//			model      : 'insuranceNumbersModel',
		//			idProperty : 'id',
		//			url        : 'app/administration/practice/data.php',
		//			extraParams: { task: "insuranceNumbers"}
		//		});
		// *************************************************************************************
		// X12 Partners Record Structure
		// *************************************************************************************
		//		me.x12PartnersStore = Ext.create('App.classes.restStoreModel', {
		//			fields     : [
		//				{name: 'id', type: 'int'},
		//				{name: 'name', type: 'string'}
		//			],
		//			model      : 'x12PartnersModel',
		//			idProperty : 'id',
		//			url        : 'app/administration/practice/data.php',
		//			extraParams: { task: "x12Partners"}
		//		});

		// -------------------------------------------------------------------------------------
		// render function for Default Method column in the Pharmacy grid
		// -------------------------------------------------------------------------------------
		function transmit_method(val) {
			if(val == '1') {
				return 'Print';
			} else if(val == '2') {
				return 'Email';
			} else if(val == '3') {
				return 'Email';
			}
			return val;
		}

		me.rowEditingPharmacy = Ext.create('App.classes.grid.RowFormEditing', {
			autoCancel  : false,
			errorSummary: false,
			clicksToEdit: 1,
			formItems   : [
				{
					xtype : 'container',
					layout: 'hbox',
					width : 900,
					items : [
						{
							xtype : 'container',
							width : 450,
							layout: 'anchor',
							items : [
								{ xtype: 'textfield', fieldLabel: i18n['name'], name: 'name', allowBlank: false, width: 385 },
								{ xtype: 'textfield', fieldLabel: i18n['address'], name: 'line1', width: 385 },
								{ xtype: 'textfield', fieldLabel: i18n['address_cont'], name: 'line2', width: 385 },
								{ xtype     : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { hideLabel: true },
									items   : [
										{ xtype: 'displayfield', width: 105, value: i18n['city_state_zip'] },
										{ xtype: 'textfield', width: 150, name: 'city' },
										{ xtype: 'displayfield', width: 5, value: ',' },
										{ xtype: 'textfield', width: 50, name: 'state' },
										{ xtype: 'textfield', width: 75, name: 'zip' }
									]
								}
							]
						},
						{
							xtype : 'container',
							width : 300,
							layout: 'anchor',
							items : [
								{
									xtype: 'textfield', fieldLabel: i18n['email'], name: 'email', width: 275
								},
								{
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { hideLabel: true },
									items   : [
										{ xtype: 'displayfield', width: 100, value: i18n['phone'] },
										{ xtype: 'displayfield', width: 5, value: '(' },
										{ xtype: 'textfield', width: 40, name: 'phone_area_code' },
										{ xtype: 'displayfield', width: 5, value: ')' },
										{ xtype: 'textfield', width: 50, name: 'phone_prefix' },
										{ xtype: 'displayfield', width: 5, value: '-' },
										{ xtype: 'textfield', width: 70, name: 'phone_number' }
									]
								},
								{
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { hideLabel: true },
									items   : [
										{ xtype: 'displayfield', width: 100, value: i18n['fax'] },
										{ xtype: 'displayfield', width: 5, value: '(' },
										{ xtype: 'textfield', width: 40, name: 'fax_area_code' },
										{ xtype: 'displayfield', width: 5, value: ')' },
										{ xtype: 'textfield', width: 50, name: 'fax_prefix' },
										{ xtype: 'displayfield', width: 5, value: '-' },
										{ xtype: 'textfield', width: 70, name: 'fax_number'
										}
									]
								},
								{
									xtype: 'transmitmethodcombo', fieldLabel: i18n['default_method'], labelWidth: 100, width: 275
								}
							]
						},
						{
							xtype: 'mitos.checkbox', fieldLabel: i18n['active'], labelWidth: 60, name: 'active'
						}
					]
				}
			]
		});

		me.rowEditingInsurance = Ext.create('App.classes.grid.RowFormEditing', {
			autoCancel  : false,
			errorSummary: false,
			clicksToEdit: 1,
			formItems   : [
				{
					xtype : 'container',
					layout: 'hbox',
					width : 900,
					items : [
						{
							xtype : 'container',
							width : 450,
							layout: 'anchor',
							items : [
								{ xtype: 'textfield', fieldLabel: i18n['name'], name: 'name', allowBlank: false, width: 385 },
								{ xtype: 'textfield', fieldLabel: i18n['address'], name: 'line1', width: 385 },
								{ xtype: 'textfield', fieldLabel: i18n['address_cont'], name: 'line2', width: 385 },
								{ xtype     : 'fieldcontainer',
									defaults: { hideLabel: true },
									layout  : 'hbox',
									items   : [
										{ xtype: 'displayfield', width: 105, value: i18n['city_state_zip'] },
										{ xtype: 'textfield', width: 150, name: 'city' },
										{ xtype: 'displayfield', width: 5, value: ',' },
										{ xtype: 'textfield', width: 50, name: 'state' },
										{ xtype: 'textfield', width: 75, name: 'zip' }
									]
								}
							]
						},
						{
							xtype : 'container',
							width : 300,
							layout: 'anchor',
							items : [
								{
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { hideLabel: true },
									items   : [
										{ xtype: 'displayfield', width: 100, value: i18n['phone'] },
										{ xtype: 'displayfield', width: 5, value: '(' },
										{ xtype: 'textfield', width: 40, name: 'phone_area_code' },
										{ xtype: 'displayfield', width: 5, value: ')' },
										{ xtype: 'textfield', width: 50, name: 'phone_prefix' },
										{ xtype: 'displayfield', width: 5, value: '-' },
										{ xtype: 'textfield', width: 70, name: 'phone_number' }
									]
								},
								{
									xtype   : 'fieldcontainer',
									layout  : 'hbox',
									defaults: { hideLabel: true },
									items   : [
										{ xtype: 'displayfield', width: 100, value: i18n['fax'] },
										{ xtype: 'displayfield', width: 5, value: '(' },
										{ xtype: 'textfield', width: 40, name: 'fax_area_code' },
										{ xtype: 'displayfield', width: 5, value: ')' },
										{ xtype: 'textfield', width: 50, name: 'fax_prefix' },
										{ xtype: 'displayfield', width: 5, value: '-' },
										{ xtype: 'textfield', width: 70, name: 'fax_number'
										}
									]
								},
								{ xtype: 'textfield', fieldLabel: i18n['cms_id'], name: 'cms_id', width: 275 },
								{ xtype: 'mitos.insurancepayertypecombo', fieldLabel: i18n['payer_type'], labelWidth: 100, width: 275  },
								{ xtype: 'textfield', fieldLabel: 'X12 Partner', name: 'x12_default_partner_id' }
							]
						},
						{
							xtype: 'checkbox', fieldLabel: i18n['active'], labelWidth: 60, name: 'active'
						}
					]
				}
			]

		});
		// *************************************************************************************
		// Grids
		// *************************************************************************************
		me.pharmacyGrid = Ext.create('Ext.grid.Panel', {
			title     : i18n['pharmacies'],
			store     : me.pharmacyStore,
			border    : false,
			frame     : false,
			viewConfig: { stripeRows: true },
			plugins   : [ me.rowEditingPharmacy ],
			columns   : [
				{ header: i18n['pharmacy_name'], width: 150, sortable: true, dataIndex: 'name' },
				{ header: i18n['address'], flex: 1, sortable: true, dataIndex: 'address_full' },
				{ header: i18n['phone'], width: 120, sortable: true, dataIndex: 'phone_full' },
				{ header: i18n['Fax'], width: 120, sortable: true, dataIndex: 'fax_full' },
				{ header: i18n['default_method'], flex: 1, sortable: true, dataIndex: 'transmit_method', renderer: transmit_method },
				{ header: i18n['active'], width: 55, sortable: true, dataIndex: 'active', renderer: me.boolRenderer }
			],
			tbar      : [
				{
					text   : i18n['add_new_pharmacy'],
					iconCls: 'save',
					action : 'pharmacyGridModel',
					scope  : me,
					handler: me.onNewRec
				}
			]
		});
		me.insuranceGrid = Ext.create('Ext.grid.Panel', {
			title     : i18n['insurance_companies'],
			store     : me.insuranceStore,
			border    : false,
			frame     : false,
			viewConfig: { stripeRows: true },
			plugins   : [ me.rowEditingInsurance ],
			columns   : [
				{ header: i18n['insurance_name'], width: 150, sortable: true, dataIndex: 'name' },
				{ header: i18n['address'], flex: 1, sortable: true, dataIndex: 'address_full' },
				{ header: i18n['Phone'], width: 120, sortable: true, dataIndex: 'phone_full' },
				{ header: i18n['fax'], width: 120, sortable: true, dataIndex: 'fax_full' },
				{ header: i18n['default_x12_partner'], flex: 1,  sortable: true, dataIndex: 'x12_default_partner_id' },
				{ header: i18n['active'], width: 55, sortable: true, dataIndex: 'active', renderer: me.boolRenderer }

			],
			tbar      : [
				{
					text   : i18n['add_new_insurance'],
					iconCls: 'save',
					action : 'insuranceGridModel',
					scope  : me,
					handler: me.onNewRec
				}
			]
		});

		//		me.InsuranceNumbersGrid = Ext.create('Ext.grid.Panel', {
		//            title    : 'Insurance Numbers',
		//			//store     : me.insuranceNumbersStore,
		//			border    : false,
		//			frame     : false,
		//            viewConfig: { stripeRows: true },
		//			columns   : [
		//				{ text: 'Name', flex: 1, sortable: true, dataIndex: 'name' },
		//				{ width: 100, sortable: true, dataIndex: 'address' },
		//				{ text: 'Provider #', flex: 1, width: 100, sortable: true, dataIndex: 'phone' },
		//				{ text: 'Rendering #', flex: 1, width: 100, sortable: true, dataIndex: 'phone' },
		//				{ text: 'Group #', flex: 1, width: 100, sortable: true, dataIndex: 'phone' }
		//			]
		//
		//		});
				me.x12ParnersGrid = Ext.create('Ext.grid.Panel', {
		            title    : i18n['x12_partners_clearing_houses'],
					//store     : me.x12PartnersStore,
					border    : false,
					frame     : false,
		            viewConfig: { stripeRows: true },
					columns   : [
						{ text: i18n['name'], flex: 1, sortable: true, dataIndex: 'name' },
						{ text: i18n['sender_id'], flex: 1, width: 100, sortable: true, dataIndex: 'phone' },
						{ text: i18n['receiver_id'], flex: 1, width: 100, sortable: true, dataIndex: 'phone' },
						{ text: i18n['version'], flex: 1, width: 100, sortable: true, dataIndex: 'phone' }
					]

				});

		// *************************************************************************************
		// Tab Panel
		// *************************************************************************************
		me.praticePanel = Ext.create('Ext.tab.Panel', {
			activeTab: 0,
			items    : [
				me.pharmacyGrid,
				me.insuranceGrid,
				//me.InsuranceNumbersGrid,
				me.x12ParnersGrid,
				{
					title      : i18n['hl7_viewer'],
					frame      : false,
					border     : false,
					items      : [
						{

						}
					],
					tbar: [
						{
							xtype  : 'button',
							text   : i18n['clear_hl7_data'],
							iconCls: 'save',
							handler: function() {
								me.onWinOpen();
							}
						},
						'-',
						{
							xtype  : 'button',
							text   : i18n['parse_hl7'],
							iconCls: 'save',
							handler: function() {
								me.onWinOpen();
							}
						}
					]
				}
			]
		});

		me.pageBody = [ me.praticePanel ];
		me.callParent(arguments);
	},

	onNewRec: function(btn) {
		var me = this, grid = btn.up('grid'), store = grid.store, model = btn.action, plugin = grid.editingPlugin, newModel;

		say(grid);
		say(plugin);
		say(model);

		plugin.cancelEdit();
		newModel = Ext.ModelManager.create({
			active:1
		}, model);
		say(newModel);
		store.insert(0, newModel);
		plugin.startEdit(0, 0);
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.pharmacyStore.load();
		this.insuranceStore.load();
		//this.insuranceNumbersStore.load();
		//this.x12PartnersStore.load();
		callback(true);
	}
}); // end of PracticePage
/**
 * services.ejs.php
 * Services
 * v0.0.1
 *
 * Author: Ernest Rodriguez
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 *
 * @namespace Services.getServices
 * @namespace Services.addService
 * @namespace Services.updateService
 */
Ext.define('App.view.administration.PreventiveCare', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelPreventiveCare',
	pageTitle    : i18n['preventive_care'],
	uses         : [
		'App.classes.GridPanel',
		'App.classes.combo.CodesTypes',
		'App.classes.combo.Titles'
	],
	initComponent: function() {
		var me = this;

		me.active = 1;
		me.dataQuery = '';
		me.category_id = '3';

		me.store = Ext.create('App.store.administration.PreventiveCare');
        me.activeProblemsStore = Ext.create('App.store.administration.PreventiveCareActiveProblems');
		me.medicationsStore = Ext.create('App.store.administration.PreventiveCareMedications');
		me.labsStore = Ext.create('App.store.administration.PreventiveCareLabs');

		function code_type(val) {
			if(val == '1') {
				return 'CPT4';
			} else if(val == '2') {
				return 'ICD9';
			} else if(val == '3') {
				return 'HCPCS';
			} else if(val == '100') {
				return 'CVX';
			}
			return val;
		}

		me.guidelineGrid = Ext.create('App.classes.GridPanel', {
			region : 'center',
			store  : me.store,
			columns: [
                {
                    xtype: 'actioncolumn',
                    width:30,
                    items: [
                        {
                            icon: 'resources/images/icons/delete.png',  // Use a URL in the icon config
                            tooltip: i18n['remove'],
                            handler: function(grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                            },
                            getClass:function(){
                                return 'x-grid-icon-padding';
                            }
                        }
                    ]
                },

				{ flex: 1, header: i18n['description'], sortable: true, dataIndex: 'description' },
				{ width: 100, header: i18n['age_start'], sortable: true, dataIndex: 'age_start' },
				{ width: 100, header: i18n['age_end'], sortable: true, dataIndex: 'age_end' },
				{ width: 100, header: i18n['sex'], sortable: true, dataIndex: 'sex' },
				{ width: 100, header: i18n['frequency'], sortable: true, dataIndex: 'frequency' }

			],
			plugins: Ext.create('App.classes.grid.RowFormEditing', {
				autoCancel  : false,
				errorSummary: false,
				clicksToEdit: 1,
                listeners:{
                    scope:me,
	                beforeedit:me.beforeServiceEdit,
                    edit:me.onServiceEdit,
                    canceledit:me.onServiceCancelEdit

                },
				formItems   : [
					{
						/**
						 * CVX Container
						 */
						xtype: 'tabpanel',
						action: i18n['immunizations'],
						layout:'fit',
						plain:true,
						listeners: {
							scope:me,
							tabchange:me.onFormTapChange
						},
						items: [
							{
								title : i18n['general'],
								xtype : 'container',
								padding:10,
								layout:'vbox',
								items : [
									{
										/**
										 * line One
										 */
										xtype   : 'fieldcontainer',
										layout:'hbox',
										defaults:{ margin:'0 10 5 0', action:'field' },
										items   : [
											{

												xtype     : 'textfield',
												fieldLabel: i18n['description'],
												name      : 'description',
												labelWidth:130,
												width:703
											},
											{
												xtype     : 'mitos.sexcombo',
												fieldLabel: i18n['sex'],
												name      : 'sex',
												width     : 100,
												labelWidth: 30

											},
											{
												fieldLabel: i18n['active'],
												xtype   : 'checkboxfield',
												labelWidth:75,
												name    : 'active'
											}



										]
									},
									{
										/**
										 * Line two
										 */
										xtype   : 'fieldcontainer',
										layout:'hbox',
										defaults:{ margin:'0 10 5 0', action:'field'  },
										items   : [
											{
												xtype     : 'mitos.codestypescombo',
												fieldLabel: i18n['coding_system'],
												labelWidth:130,
												value     : 'CVX',
												name      : 'coding_system',
												readOnly:true

											},
											{
												xtype     : 'numberfield',
												fieldLabel: i18n['frequency'],
												margin:'0 0 5 0',
												value     : 0,
												minValue  : 0,
												width:150,
												name      : 'frequency'

											},
											{
												xtype: 'mitos.timecombo',
												name : 'frequency_time',
												width:100

											},
											{
                                                xtype     : 'numberfield',
                                                fieldLabel: i18n['age_start'],
                                                name: 'age_start',
                                                labelWidth: 75,
                                                width:140,
                                                value     : 0,
                                                minValue  : 0

											},
                                            {
                                                fieldLabel: i18n['must_be_pregnant'],
                                                xtype   : 'checkboxfield',
                                                labelWidth:105,
                                                name    : 'pregnant'


                                            }
										]

									},
									{
										/**
										 * Line three
										 */
										xtype   : 'fieldcontainer',
										layout:'hbox',
										defaults:{ margin:'0 10 5 0', action:'field'  },
										items   : [
											{
												xtype     : 'textfield',
												fieldLabel: i18n['code'],
												name      : 'code',
												labelWidth:130
											},
											{
												xtype     : 'numberfield',
												fieldLabel: i18n['times_to_perform'],
												name      : 'times_to_perform',
												width     : 250,
												value     : 0,
												minValue  : 0,
												tooltip   : i18n['greater_than_1_or_just_check_perform_once']

											},
											{

                                                xtype     : 'numberfield',
                                                fieldLabel: i18n['age_end'],
                                                name: 'age_end',
                                                labelWidth: 75,
                                                width:140,
                                                value     : 0,
                                                minValue  : 0


											},
                                            {
                                                fieldLabel: i18n['perform_only_once'],
                                                xtype   : 'checkboxfield',
                                                labelWidth:105,
                                                name    : 'only_once'
                                            }



										]

									}

								]
							},
							{
								title  : i18n['active_problems'],
								action:'problems',
								xtype  : 'grid',
								margin:5,
								store: me.activeProblemsStore,
								columns: [

									{
										xtype:'actioncolumn',
										width:20,
										items: [
											{
												icon: 'resources/images/icons/delete.png',
												tooltip: i18n['remove'],
												scope:me,
												handler: me.onRemoveRelation
											}
										]
									},
									{
										header   : i18n['code'],
										width     : 100,
										dataIndex: 'code'
									},
									{
										header   : i18n['description'],
										flex     : 1,
										dataIndex: 'code_text'
									}

								],
								bbar:{
									xtype:'liveicdxsearch',
									margin:5,
									fieldLabel: i18n['add_problem'],
									hideLabel:false,
									listeners:{
										scope:me,
										select:me.addActiveProblem
									}
								}
							},
							{
								title  : i18n['medications'],
								action :'medications',
								xtype  : 'grid',
								width  : 300,
								store: me.medicationsStore,
								columns: [
									{
										xtype:'actioncolumn',
										width:20,
										items: [
											{
												icon: 'resources/images/icons/delete.png',
												tooltip: i18n['remove'],
												scope:me,
												handler: me.onRemoveRelation
											}
										]
									},
									{
										header   : i18n['code'],
										width     : 100,
										dataIndex: 'code'
									},
									{
										header   : i18n['description'],
										flex     : 1,
										dataIndex: 'code_text'
									}

								],
								bbar:{
									xtype:'medicationlivetsearch',
									margin:5,
									fieldLabel: i18n['add_problem'],
									hideLabel:false,
									listeners:{
										scope:me,
										select:me.addMedications
									}
								}
							},
							{
								title  : i18n['labs'],
								action:'labs',
								xtype  : 'grid',
								store: me.labsStore,
								width  : 300,
								columns: [
									{
										xtype:'actioncolumn',
										width:20,
										items: [
											{
												icon: 'resources/images/icons/delete.png',
												tooltip: i18n['remove'],
												scope:me,
												handler: me.onRemoveRelation
											}
										]
									},
									{
										header   : i18n['value_name'],
										flex     : 1,
										dataIndex: 'value_name'
									},
									{
										header   : i18n['less_than'],
										flex     : 1,
										dataIndex: 'less_than',
										editor:{
											xtype:'numberfield'
										}
									},
									{
										header   : i18n['greater_than'],
										flex     : 1,
										dataIndex: 'greater_than',
										editor:{
											xtype:'numberfield'
										}
									},
									{
										header   : i18n['equal_to'],
										flex     : 1,
										dataIndex: 'equal_to',
										editor:{
											xtype:'numberfield'
										}
									}


								],

								plugins: Ext.create('Ext.grid.plugin.CellEditing', {
                                    autoCancel  : true,
                                    errorSummary: false,
                                    clicksToEdit: 2,
                                    listeners:{
                                        scope:me,
                                        edit:me.afterLabTimeEdit

                                    }

                                }),
                                bbar:{
                                    xtype:'labslivetsearch',
                                    margin:5,
                                    fieldLabel: i18n['add_labs'],
                                    hideLabel:false,
                                    listeners:{
                                        scope:me,
                                        select:me.addLabs
                                    }
                                }
							}

						]

					}

				]
			}),


			tbar: me.PagingToolbar = Ext.create('Ext.PagingToolbar', {
				store      : me.store,
				displayInfo: true,
				emptyMsg   : i18n['no_office_notes_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items      : [
                    '-',
                    {
                        xtype    : 'mitos.preventivecaretypescombo',
                        width    : 150,
                        listeners: {
                            scope : me,
                            select: me.onCodeTypeSelect
                        }
                    }
                ]
			})
		}); // END GRID


		me.pageBody = [ me.guidelineGrid ];
		me.callParent(arguments);
	}, // end of initComponent


    onServiceEdit:function(context, e){

    },

    onServiceCancelEdit:function(context, e){

    },

    afterLabTimeEdit:function(editor, e){

    },

    beforeServiceEdit:function(context, e){
		var editor = context.editor,
			grids = editor.query('grid');
        for(var i=0; i < grids.length; i++ ){
            grids[i].store.load({params:{id: e.record.data.id}});
		}
    },

	onFormTapChange:function(panel, newCard, oldCard){
        //say(newCard);
		//this.ImmuRelationStore.proxy.extraParams = { code_type: newCard.action, selected_id:this.getSelectId() };
		//this.ImmuRelationStore.load();
	},

//	onSearch: function(field) {
//		var me = this,
//			store = me.store;
//		me.dataQuery = field.getValue();
//
//		store.proxy.extraParams = {active: me.active, code_type: me.code_type, query: me.dataQuery};
//		me.store.load();
//	},

	onCodeTypeSelect: function(combo, record) {
		var me = this;
		me.category_id = record[0].data.option_value;
		if(me.category_id=='dismiss'){

		}else{
            me.PagingToolbar.moveFirst();
//            me.store.proxy.pageParam = 1;
//            me.store.proxy.startParam = 0;
            me.store.proxy.extraParams = {category_id: me.category_id};
		    me.store.load();
		}
	},

//	onNew: function(form, model) {
//		form.getForm().reset();
//		var newModel = Ext.ModelManager.create({}, model);
//		form.getForm().loadRecord(newModel);
//	},

	addActiveProblem:function(field, model){

		this.activeProblemsStore.add({
			code:model[0].data.code,
			code_text:model[0].data.code_text,
            guideline_id: this.getSelectId()
		});
		field.reset();
	},
	addMedications:function(field, model){
		this.medicationsStore.add({

			code:model[0].data.id,
			code_text:model[0].data.PROPRIETARYNAME,
            guideline_id: this.getSelectId()
		});
		field.reset();

	},
    addLabs:function(field, model){

		this.labsStore.add({
            code:model[0].data.loinc_number,
			value_name:model[0].data.loinc_name,
			less_than:'0',
			greater_than:'0',
			equal_to:'0',
            preventive_care_id:this.getSelectId()
		});
		field.reset();

	},

    onRemoveRelation:function(grid, rowIndex, colIndex){
		var me = this,
            store = grid.getStore(),
			record = store.getAt(rowIndex);
        store.remove(record);
	},


	getSelectId:function(){
		var row = this.guidelineGrid.getSelectionModel().getLastSelected();
		return row.data.id;
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.guidelineGrid.query('combobox')[0].setValue(this.category_id);
        this.store.proxy.extraParams = {category_id: this.category_id};
		this.store.load();
		callback(true);
	}
}); //ens servicesPage class
/**
 * roles.ejs.php
 * Description: Facilities Screen
 * v0.0.3
 *
 * Author: Ernesto J Rodriguez
 * Modified: n/a
 *
 * GaiaEHR (Eletronic Health Records) 2011
 *
 * @namespace Roles.getRoleForm
 * @namespace Roles.saveRolesData
 * @namespace Roles.getRolesData
 */
Ext.define('App.view.administration.Roles', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelRoles',
	pageTitle    : i18n['roles_and_permissions'],
	pageLayout   : {
		type:'vbox',
		align:'stretch'
	},
	initComponent: function() {

		var me = this;

		//******************************************************************************
		// Roles Store
		//******************************************************************************

		me.header = Ext.create('Ext.container.Container',{
			height:30,
			html : '<div class="roleHeader">' +
					'<span class="perm">' + i18n['permission'] + '</span>' +
					'<span class="role">' + i18n['front_office'] + '</span>' +
					'<span class="role">' + i18n['auditors'] + '</span>' +
					'<span class="role">' + i18n['clinician'] + '</span>' +
					'<span class="role">' + i18n['physician']+ '</span>' +
					'<span class="role">' + i18n['administrator'] + '</span>' +
					'</div>'
		});

		me.form = Ext.create('Ext.form.Panel', {
			flex:1,
			frame:true,
			bodyStyle:'background-color:white',
			bodyPadding: 10,
			items      : [
				{
					xtype      : 'fieldcontainer',
					defaultType: 'mitos.checkbox',
					layout     : 'hbox'
				}
			],
			buttons       : [
				{
					text   : i18n['save'],
					iconCls: 'save',
					margin : '0 20 0 0',
					scope  : me,
					handler: me.onSave
				}
			]
		});

		me.pageBody = [ me.header, me.form ];
		me.callParent(arguments);
	},

	onSave: function() {
		var me = this,
			form = me.form.getForm(),
			values = form.getValues(),
			record = form.getRecord(),
			changedValues;

		if(record.set(values) !== null){
			me.form.el.mask( i18n['saving_roles'] + '...');
			changedValues = record.getChanges();
			Roles.saveRolesData(changedValues, function(provider, response){
				if(response.result){
					me.form.el.unmask();
					me.msg('Sweet!', i18n['roles_updated']);
					record.commit();
				}
			});
		}
	},


	getFormData: function() {

		var me = this,
			form = me.form,
			formFields = form.getForm().getFields(),
			modelFields = [],
			model;

		for(var i=0; i < formFields.items.length; i++){
			modelFields.push({name: formFields.items[i].name, type: 'bool'});
		}

		model = Ext.define(form.itemId + 'Model', {
			extend: 'Ext.data.Model',
			fields: modelFields,
			proxy : {
				type: 'direct',
				api : {
					read: Roles.getRolesData
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: model
		});

		me.store.load({
			scope   : this,
			callback: function(records, operation, success) {
				if(success) {
					form.getForm().loadRecord(records[0]);
					form.el.unmask();
				}
			}
		});
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		var me = this,
			form = me.form;
		form.el.mask( i18n['loading'] + '...');
		form.removeAll();
		Roles.getRoleForm(null, function(provider, response) {
			form.add(eval(response.result));
			me.getFormData();
		});

		callback(true);
	}
});
/**
 * External Data Loads
 * v0.0.1
 *
 * Author: Ernesto J Rodriguez
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 */
Ext.define('App.view.administration.ExternalDataLoads', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelExternalDataLoads',
	pageTitle    : i18n['external_data_loads'],
	/**
	 * define the layout 'accordion'
	 * and few more configs
	 */
	pageLayout   : {
		type       : 'accordion',
		animate    : true,
		activeOnTop: true
	},
	initComponent: function() {
		var me = this;
		/**
		 * var stores is used to hold all the stores inside this class
		 * this way, if I want to reload all the stores at once, I can do it
		 * using a for loop
		 *
		 * see function loadStores()
		 *
		 * @type {Array}
		 */
		me.stores = [];

		me.stores.push(me.icd9Store = Ext.create('App.store.administration.ExternalDataLoads', {codeType:'ICD9'}));
		me.stores.push(me.icd10Store = Ext.create('App.store.administration.ExternalDataLoads', {codeType:'ICD10', groupField:'version'}));
		me.stores.push(me.rxnormStore = Ext.create('App.store.administration.ExternalDataLoads', {codeType:'RXNORM'}));
		me.stores.push(me.snomedStore = Ext.create('App.store.administration.ExternalDataLoads', {codeType:'SNOMED'}));

		/**
		 * Since all the grid are very similar I created a function that return a grid
		 */
		me.icd9Grid = me.getCodeGrid('Available ICD9 Data', me.icd9Store, false);
		me.icd10Grid = me.getCodeGrid('Available ICD10 Data', me.icd10Store, true);
		me.rxnormGrid = me.getCodeGrid('Available RxNorm Data', me.rxnormStore, false);
		me.snomedGrid = me.getCodeGrid('Available SNOMED Data', me.snomedStore, false);

		/**
		 * Same thing with the forms
		 */
		me.icd9Form = me.getCodeForm('ICD9');
		me.icd10Form = me.getCodeForm('ICD10');
		me.rxnormForm = me.getCodeForm('RXNORM');
		me.snomedForm = me.getCodeForm('SNOMED');

		/**
		 * Here are the panels used inside the accordion layout
		 */
		me.icd9 = Ext.create('Ext.form.Panel', {
			title : i18n['update_icd9'],
			layout: 'border',
			items : [ me.icd9Grid, me.icd9Form ]
		});

		me.icd10 = Ext.create('Ext.panel.Panel', {
			title : i18n['update_icd10'],
			layout: 'border',
			items : [ me.icd10Grid, me.icd10Form ]
		});

		me.rxnorm = Ext.create('Ext.panel.Panel', {
			title : i18n['update_rxnorm'],
			layout: 'border',
			items : [ me.rxnormGrid, me.rxnormForm ]
		});

		me.snomed = Ext.create('Ext.panel.Panel', {
			title : i18n['update_snomed'],
			layout: 'border',
			items : [ me.snomedGrid, me.snomedForm ]
		});

		me.pageBody = [ me.icd9, me.icd10, me.rxnorm, me.snomed ];
		me.callParent(arguments);
	},

	getCodeForm: function(action) {
		var me = this;
		return Ext.create('Ext.form.Panel', {
			bodyPadding: 10,
			region     : 'center',
			action     : action,
			frame      : true,
			bodyStyle  : 'background-color:white',
			bodyBorder : true,
			margin     : '5 0 5 0',
			items      : [
				{
					xtype: 'fieldset',
					styleHtmlContent:true,
					action: action,
					title: i18n['current_version_installed'],
					html: i18n['no_data_installed'],
					tpl : i18n['revivion_name'] + ':  {revision_name}<br>' +
						i18n['revision_number'] + ':  {revision_number}<br>' +
						i18n['revision_version'] + ': {revision_version}<br>' +
						i18n['revision_date'] + ':    {revision_date}<br>' +
						i18n['imported_on'] + ':      {imported_date}'
				},
				{
					xtype: 'fieldset',
					title: i18n['installation'],
					action: 'installation',
					styleHtmlContent:true,
					html : me.getInstallationDetails(action)
				},
				{
					xtype: 'fieldset',
					title: i18n['upload'],
					action: 'upload',
					items:[
						{

							xtype     : 'filefield',
							name      : 'filePath',
							buttonText: i18n['Select file'] + '...',
							emptyText : i18n['data_file'],
							width     : 350,
							labelWidth: 50,
							allowBlank: false
						}
					]
				}
			],
			api        : {
				submit: ExternalDataUpdate.updateCodesWithUploadFile
			},
			buttons    : [
				{
					text   : i18n['update'],
					action : action,
					scope  : me,
					handler: me.uploadFile
				}
			]
		});
	},

	getCodeGrid: function(title, store, grouping) {
		var me = this;
		return Ext.create('Ext.grid.Panel', {
			title  : title,
			store  : store,
			region : 'west',
			width  : 500,
			margin : '5 0 5 0',
			padding: 0,
			split  : true,
			columns: me.getDefaultColumns(),
			listeners:{
				scope:me,
				itemdblclick:me.onCodeDblClick
			},
			features: grouping ? [{ftype:'grouping'}] : []
		});


	},

	getDefaultColumns: function() {
		return [
			{
				header   : i18n['date'],
				dataIndex: 'date',
				width    : 98
			},
			{
				header   : i18n['version'],
				dataIndex: 'version',
				width    : 98
			},
			{
				header   : i18n['file'],
				dataIndex: 'basename',
				width    : 300
			}
		];
	},

	getInstallationDetails: function(action) {
		if(action == 'ICD9') {
			return '<p>Steps to install the ICD 9 database:</p>' +
				'<ol>' +
				'<li>The raw data feed release can be obtained from <a href="https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes.html">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded ICD 9 database zip file into the following directory: contrib/icd9</li>' +
				'<li>Double Click the zip file from the "Available ICD9 Data" grid to install</li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Importing external data can take more than an hour depending on your hardware configuration. For example, one of the RxNorm data tables contain in excess of 6 million rows.</p>'
		} else if(action == 'ICD10') {
			return '<p>Steps to install the ICD 10 database:</p>' +
				'<ol>' +
				'<li>The raw data feed release can be obtained from <a href="https://www.cms.gov/Medicare/Coding/ICD10">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded ICD 10 database zip files into the following directory: contrib/icd10</li>' +
				'<li>Double Click the zip file from the "Available ICD10 Data" grid to install</li>' +
				'</ol>' +
				'<p>These are the ICD10 2012 links:</p>' +
				'<ol>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/DiagnosisGEMs_2012.zip">DiagnosisGEMs_2012</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/ProcedureGEMs_2012.zip">ProcedureGEMs_2012</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/ReimbursementMapping_2012.zip">ReimbursementMapping_2012</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/2012_PCS_long_and_abbreviated_titles.zip">2012_PCS_long_and_abbreviated_titles</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/ICD10OrderFiles_2012.zip">ICD10OrderFiles_2012</a></li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Importing external data can take more than an hour depending on your hardware configuration. For example, one of the RxNorm data tables contain in excess of 6 million rows.</p>'
			} else if(action == 'RXNORM') {
			return '<p>Steps to install the RxNorm database:</p>' +
				'<ol>' +
				'<li>The first step is to open an account with the Unified Medical Language System web site <a href="https://utslogin.nlm.nih.gov/cas/login">here</a></li>' +
				'<li>Then the raw data feed release can be obtained from <a href="http://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded RxNorm database zip file into the following directory: contrib/rxnorm.</li>' +
				'<li>Double Click the zip file from the "Available RxNorm Data" grid to install</li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Only the full monthly RxNorm release is currently supported</p>'
			} else if(action == 'SNOMED') {
			return 'Lorem ipsum dolor sit amet, porta nam suscipit sed id, ' +
				'vestibulum velit tortor velit viverra, non enim justo, ' +
				'purus nec, libero sociis lobortis, eu et leo mauris velit. ' +
				'Magnis tellus blandit fringilla, morbi mauris commodo, nec morbi ac non'
		}

	},

	uploadFile: function(btn) {
		var me = this,
			form = btn.up('form').getForm();

		if(form.isValid()) {
			form.submit({
				waitMsg: i18n['uploading_and_updating_code_database'] + '...',
				scope  : me,
				params : {
					codeType: btn.action
				},
				success: function(fp, o) {
					say(o.result);
				},
				failure: function(fp, o) {
					say(o.result);
				}
			});
		}
	},

	onCodeDblClick:function(grid, record){
		var me = this;
		app.setTask(false);
		grid.el.mask( i18n['installing_database_please_wait'] + '...');
        ExternalDataUpdate.updateCodes(record.data, function(provider, response){
			grid.el.unmask();
			if(response.result.success){
				me.setCurrentCodesInfo();
				me.alert(i18n['new_database_installed'], 'info');
			}else{
				me.alert(response.result.error, 'error');
			}
			app.setTask(true);
		});
	},

	setCurrentCodesInfo:function(){
		var me = this,
			codes,
			fieldset;
        ExternalDataUpdate.getCurrentCodesInfo(function(provider, response){
			codes = response.result;
			for(var i=0; i < codes.length; i++){
				if(codes[i].data !== false){
					fieldset = me.query('fieldset[action="'+codes[i].data.codeType+'"]')[0];
					fieldset.update(codes[i].data);
				}
			}
		});
	},

	loadStores: function() {
		var me = this;
		for(var i = 0; i < me.stores.length; i++) {
			me.stores[i].load({params: {pid: me.pid}});
		}
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.loadStores();
		this.setCurrentCodesInfo();
		callback(true);
	}
}); //ens servicesPage class
/**
 * Users.ejs.php
 * Description: Users Screen
 * v0.0.4
 *
 * Author: Ernesto J Rodriguez (Certun)
 * Modified: n/a
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace User.getUsers
 * @namespace User.addUser
 * @namespace User.updateUser
 * @namespace User.chechPasswordHistory
 */
Ext.define('App.view.administration.Users', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelUsers',
	pageTitle    : i18n['users'],
	uses         : [
		'App.classes.GridPanel'
	],
	initComponent: function() {

		var me = this;

		Ext.define('UserModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'username', type: 'string'},
				{name: 'password', type: 'auto'},
				{name: 'authorized', type: 'bool'},
				{name: 'active', type: 'bool'},
				{name: 'info', type: 'string'},
				{name: 'source', type: 'int'},
				{name: 'fname', type: 'string'},
				{name: 'mname', type: 'string'},
				{name: 'lname', type: 'string'},
				{name: 'fullname', type: 'string'},
				{name: 'federaltaxid', type: 'string'},
				{name: 'federaldrugid', type: 'string'},
				{name: 'upin', type: 'string'},
				{name: 'facility_id', type: 'int'},
				{name: 'see_auth', type: 'bool'},
				{name: 'active', type: 'bool'},
				{name: 'npi', type: 'string'},
				{name: 'title', type: 'string'},
				{name: 'specialty', type: 'string'},
				{name: 'cal_ui', type: 'string'},
				{name: 'taxonomy', type: 'string'},
				{name: 'calendar', type: 'bool'},
				{name: 'abook_type', type: 'string'},
				{name: 'default_warehouse', type: 'string'},
				{name: 'role_id', type: 'int'}
			]

		});

		me.userStore = Ext.create('Ext.data.Store', {
			model   : 'UserModel',
			proxy   : {
				type: 'direct',
				api : {
					read  : User.getUsers,
					create: User.addUser,
					update: User.updateUser
				}
			},
			autoLoad: false
		});

		function authCk(val) {
			if(val == '1') {
				return '<img src="resources/images/icons/yes.gif" />';
			} else if(val == '0') {
				return '<img src="resources/images/icons/no.gif" />';
			}
			return val;
		}

		// *************************************************************************************
		// Create the GridPanel
		// *************************************************************************************
		me.userGrid = Ext.create('App.classes.GridPanel', {
			store      : me.userStore,
			columns    : [
				{ text: 'id', sortable: false, dataIndex: 'id', hidden: true},
				{ width: 100, text: i18n['username'], sortable: true, dataIndex: 'username' },
				{ width: 200, text: i18n['name'], sortable: true, dataIndex: 'fullname' },
				{ flex: 1, text: i18n['aditional_info'], sortable: true, dataIndex: 'info' },
				{ text: i18n['active'], sortable: true, dataIndex: 'active', renderer: authCk },
				{ text: i18n['authorized'], sortable: true, dataIndex: 'authorized', renderer: authCk },
				{ text: i18n['calendar_q'], sortable: true, dataIndex: 'calendar', renderer: authCk }
			],
			listeners  : {
				scope       : me,
				itemdblclick: function(view, record) {
					me.onItemdblclick(me.userStore, record, i18n['edit_user']);
				}
			},
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: [
						{
							xtype  : 'button',
							text   : i18n['add_new_user'],
							iconCls: 'save',
							handler: function() {
								var form = me.win.down('form');
								me.onNew(form, 'UserModel', i18n['add_new_user']);
							}
						}
					]
				}
			]
		});

		// *************************************************************************************
		// Window User Form
		// *************************************************************************************
		me.win = Ext.create('App.classes.window.Window', {
			width    : 600,
			items    : [
				{
					xtype        : 'mitos.form',
					fieldDefaults: { msgTarget: 'side', labelWidth: 100 },
					defaultType  : 'textfield',
					//hideLabels      : true,
					defaults     : { labelWidth: 89, anchor: '100%',
						layout: { type: 'hbox', defaultMargins: {top: 0, right: 5, bottom: 0, left: 0} }
					},
					items        : [
						{
							xtype : 'textfield',
							hidden: true, name: 'id'
						},
						{
							xtype    : 'fieldcontainer',
							defaults : { hideLabel: true },
							msgTarget: 'under',
							items    : [
								{ width: 100, xtype: 'displayfield', value: i18n['username'] + ': '},
								{ width: 100, xtype: 'textfield', name: 'username', allowBlank:false },
								{ width: 100, xtype: 'displayfield', value: i18n['password'] + ': '},
								{ width: 105, xtype: 'textfield', name: 'password', inputType: 'password' }
							]
						},
						{
							xtype    : 'fieldcontainer',
							defaults : { hideLabel: true },
							msgTarget: 'under',
							items    : [
								{ width: 100, xtype: 'displayfield', value: i18n['first_middle_last'] },
								{ width: 50, xtype: 'mitos.titlescombo', name: 'title' },
								{ width: 80, xtype: 'textfield', name: 'fname', allowBlank:false },
								{ width: 65, xtype: 'textfield', name: 'mname' },
								{ width: 105, xtype: 'textfield', name: 'lname' }
							]
						},
						{
							xtype    : 'fieldcontainer',
							msgTarget: 'under',
							items    : [
								{ width: 150, xtype: 'mitos.checkbox', fieldLabel: i18n['active'], name: 'active' },
								{ width: 150, xtype: 'mitos.checkbox', fieldLabel: i18n['authorized'], name: 'authorized' },
								{ width: 150, xtype: 'mitos.checkbox', fieldLabel: i18n['calendar_q'], name: 'calendar' }
							]
						},
						{
							xtype    : 'fieldcontainer',
							defaults : { hideLabel: true },
							msgTarget: 'under',
							items    : [
								{ width: 100, xtype: 'displayfield', value: i18n['default_facility'] + ': '},
								{ width: 100, xtype: 'mitos.facilitiescombo', name: 'facility_id' },
								{ width: 100, xtype: 'displayfield', value: i18n['authorizations'] + ': '},
								{ width: 105, xtype: 'mitos.authorizationscombo', name: 'see_auth' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 100, xtype: 'displayfield', value: i18n['access_control'] + ': '},
								{ width: 100, xtype: 'mitos.rolescombo', name: 'role_id', allowBlank:false },
								// not implemented yet
								{ width: 100, xtype: 'displayfield', value: i18n['taxonomy'] + ': '},
								{ width: 105, xtype: 'textfield', name: 'taxonomy' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 100, xtype: 'displayfield', value: i18n['federal_tax_id'] + ': '},
								{ width: 100, xtype: 'textfield', name: 'federaltaxid' },
								{ width: 100, xtype: 'displayfield', value: i18n['fed_drug_id'] + ': '},
								{ width: 105, xtype: 'textfield', name: 'federaldrugid' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 100, xtype: 'displayfield', value: i18n['upin'] + ': '},
								{ width: 100, xtype: 'textfield', name: 'upin' },
								{ width: 100, xtype: 'displayfield', value: i18n['npi'] + ': '},
								{ width: 105, xtype: 'textfield', name: 'npi' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 100, xtype: 'displayfield', value: i18n['job_description'] + ': '},
								{ width: 315, xtype: 'textfield', name: 'specialty' }
							]
						},
						{
							width    : 410,
							height   : 50,
							xtype    : 'textfield',
							name     : 'info',
							emptyText: i18n['additional_info']
						}
					]
				}
			],
			buttons  : [
				{
					text   : i18n['save'],
					cls    : 'winSave',
					handler: function() {
						var form = me.win.down('form').getForm();
						if(form.isValid()) {
							me.onSave(form, me.userStore);

						}
					}
				},
				'-',
				{
					text   : i18n['cancel'],
					scope  : me,
					handler: function(btn) {
						btn.up('window').close();
					}
				}
			],
			listeners: {
				scope: me,
				close: function() {
					me.action('close');
				}
			}
		}); // END WINDOW
		me.pageBody = [ me.userGrid ];
		me.callParent(arguments);
	}, // end of initComponent

	onNew: function(form, model, title) {
		this.setForm(form, title);
		form.getForm().reset();
		var newModel = Ext.ModelManager.create({}, model);
		form.getForm().loadRecord(newModel);
		this.action('new');
		this.win.show();
	},

	onSave: function(form, store) {
		var me = this,
			password = form.findField('password').getValue(),
			id = form.findField('id').getValue();

		if(password != '') {
			User.chechPasswordHistory({password: password, id: id}, function(provider, response) {
				if(response.result.error) {
					Ext.Msg.alert('Opps!', i18n['password_currently_used']);
				} else {
					me.saveUser(form, store);
				}
			});
		} else {
			me.saveUser(form, store);
		}

	},

	saveUser: function(form, store) {
		var record = form.getRecord(),
			values = form.getValues(),
			storeIndex = store.indexOf(record);
		if(storeIndex == -1) {
			store.add(values);
		} else {
			record.set(values);
		}
		store.sync();
		this.win.close();
	},


	onItemdblclick: function(store, record, title) {
		var form = this.win.down('form');
		this.setForm(form, title);
		form.getForm().loadRecord(record);
		this.action('old');
		this.win.show();
	},

	setForm: function(form, title) {
		form.up('window').setTitle(title);
	},

	openWin: function() {
		this.win.show();
	},

	action: function(action) {
		var win = this.win,
			form = win.down('form');

		if(action == 'close') {
			form.getForm().reset();
		}
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.userStore.load();
		callback(true);
	}
}); //ens UserPage class
/**
 * AddressBook Panel
 *
 * Author: Ernesto J Rodriguez
 * Modified: GI Technologies, 2011
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 * @namespace AddressBook.getAddresses
 * @namespace AddressBook.addContact
 * @namespace AddressBook.updateAddress
 *
 */
Ext.define('App.view.miscellaneous.Addressbook', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelAddressbook',
	pageTitle    : i18n['address_book'],
	uses         : [
		'App.classes.GridPanel',
		'App.classes.combo.Titles',
		'App.classes.window.Window',
		'App.classes.combo.Types'
	],
	initComponent: function() {
		var me = this;
		var currRec;

		/**
		 * Addresses Store and Model
		 */
		Ext.define('addressBookModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'username', type: 'string'},
				{name: 'password', type: 'string'},
				{name: 'authorized', type: 'string'},
				{name: 'info', type: 'string'},
				{name: 'source', type: 'int'},
				{name: 'fname', type: 'string'},
				{name: 'mname', type: 'string'},
				{name: 'lname', type: 'string'},
				{name: 'fullname', type: 'string'},
				{name: 'federaltaxid', type: 'string'},
				{name: 'federaldrugid', type: 'string'},
				{name: 'upin', type: 'string'},
				{name: 'facility', type: 'string'},
				{name: 'facility_id', type: 'int'},
				{name: 'see_auth', type: 'int'},
				{name: 'active', type: 'int'},
				{name: 'npi', type: 'string'},
				{name: 'title', type: 'string'},
				{name: 'specialty', type: 'string'},
				{name: 'billname', type: 'string'},
				{name: 'email', type: 'string'},
				{name: 'url', type: 'string'},
				{name: 'assistant', type: 'string'},
				{name: 'organization', type: 'string'},
				{name: 'valedictory', type: 'string'},
				{name: 'fulladdress', type: 'string'},
				{name: 'street', type: 'string'},
				{name: 'streetb', type: 'string'},
				{name: 'city', type: 'string'},
				{name: 'state', type: 'string'},
				{name: 'zip', type: 'string'},
				{name: 'street2', type: 'string'},
				{name: 'streetb2', type: 'string'},
				{name: 'city2', type: 'string'},
				{name: 'state2', type: 'string'},
				{name: 'zip2', type: 'string'},
				{name: 'phone', type: 'string'},
				{name: 'fax', type: 'string'},
				{name: 'phonew1', type: 'string'},
				{name: 'phonew2', type: 'string'},
				{name: 'phonecell', type: 'string'},
				{name: 'notes', type: 'string'},
				{name: 'cal_ui', type: 'string'},
				{name: 'taxonomy', type: 'string'},
				{name: 'ssi_relayhealth', type: 'string'},
				{name: 'calendar', type: 'int'},
				{name: 'abook_type', type: 'string'},
				{name: 'pwd_expiration_date', type: 'string'},
				{name: 'pwd_history1', type: 'string'},
				{name: 'pwd_history2', type: 'string'},
				{name: 'default_warehouse', type: 'string'}

			],
			proxy : {
				type  : 'direct',
				api   : {
					read  : AddressBook.getAddresses,
					create: AddressBook.addContact,
					update: AddressBook.updateAddress
				},
				reader: {
					totalProperty: 'totals',
					root         : 'rows'
				}
			}
		});
		me.store = Ext.create('Ext.data.Store', {
			model     : 'addressBookModel',
			remoteSort: false
		});


		/**
		 * Window and form
		 */
		me.win = Ext.create('App.classes.window.Window', {
			width    : 755,
			title    : i18n['add_or_edit_contact'],
			items    : [
				{
					xtype: 'mitos.form',
					items: [
						{
							xtype      : 'fieldset',
							title      : i18n['primary_info'],
							collapsible: true,
							defaultType: 'textfield',
							layout     : 'anchor',
							defaults   : {
								labelWidth: 89,
								anchor    : '100%',
								layout    : {
									type          : 'hbox',
									defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
								}
							},
							items      : [
								{
									xtype    : 'fieldcontainer',
									defaults : { hideLabel: true },
									msgTarget: 'under',
									items    : [
										{ width: 100, xtype: 'displayfield', value: 'Type: '},
										{ width: 130, xtype: 'mitos.typescombobox'  }
									]
								},
								{
									xtype    : 'fieldcontainer',
									defaults : { hideLabel: true },
									msgTarget: 'under',
									items    : [
										{ width: 100, xtype: 'displayfield', value: 'First, Middle, Last: '},
										{ width: 55, xtype: 'mitos.titlescombo', name: 'title' },
										{ width: 130, xtype: 'textfield', name: 'fname' },
										{ width: 100, xtype: 'textfield', name: 'mname' },
										{ width: 280, xtype: 'textfield', name: 'lname' }
									]
								},
								{
									xtype    : 'fieldcontainer',
									msgTarget: 'side',
									items    : [
										{ width: 100, xtype: 'displayfield', value: 'Specialty: '},
										{ width: 130, xtype: 'textfield', name: 'specialty' },
										{ width: 90, xtype: 'displayfield', value: 'Organization: '},
										{ width: 120, xtype: 'textfield', name: 'organization' },
										{ width: 80, xtype: 'displayfield', value: 'Valedictory: '},
										{ width: 135, xtype: 'textfield', name: 'valedictory' }
									]
								}
							]
						},
						{
							xtype      : 'fieldset',
							title      : i18n['primary_address'],
							collapsible: true,
							defaultType: 'textfield',
							layout     : 'anchor',
							defaults   : {
								labelWidth: 89,
								anchor    : '100%',
								layout    : {
									type          : 'hbox',
									defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
								}
							},
							items      : [
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'Address: '},
										{ width: 130, xtype: 'textfield', name: 'street' },
										{ width: 100, xtype: 'displayfield', value: 'Addrress Cont: '},
										{ width: 335, xtype: 'textfield', name: 'streetb' }
									]
								},
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'City: '},
										{ width: 130, xtype: 'textfield', name: 'city' },
										{ width: 100, xtype: 'displayfield', value: 'State: '},
										{ width: 120, xtype: 'textfield', name: 'state' },
										{ width: 80, xtype: 'displayfield', value: 'Postal Code: '},
										{ width: 125, xtype: 'textfield', name: 'zip' }
									]
								}
							]
						},
						{
							xtype      : 'fieldset',
							title      : i18n['secondary_address'],
							collapsible: true,
							collapsed  : true,
							defaultType: 'textfield',
							layout     : 'anchor',
							defaults   : {
								labelWidth: 89,
								anchor    : '100%',
								layout    : {
									type          : 'hbox',
									defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
								}
							},
							items      : [
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'Address: '},
										{ width: 130, xtype: 'textfield', name: 'street2' },
										{ width: 100, xtype: 'displayfield', value: 'Cont.: '},
										{ width: 335, xtype: 'textfield', name: 'streetb2' }
									]
								},
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'City: '},
										{ width: 130, xtype: 'textfield', name: 'city2' },
										{ width: 100, xtype: 'displayfield', value: 'State: '},
										{ width: 120, xtype: 'textfield', name: 'state2' },
										{ width: 80, xtype: 'displayfield', value: 'Postal Code: '},
										{ width: 125, xtype: 'textfield', name: 'zip2' }
									]
								}
							]
						},
						{
							xtype      : 'fieldset',
							title      : i18n['phone_numbers'],
							collapsible: true,
							collapsed  : true,
							defaultType: 'textfield',
							layout     : 'anchor',
							defaults   : {
								labelWidth: 89,
								anchor    : '100%',
								layout    : {
									type          : 'hbox',
									defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
								}
							},
							items      : [
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'Home Phone: '},
										{ width: 130, xtype: 'textfield', name: 'phone' },
										{ width: 90, xtype: 'displayfield', value: 'Mobile Phone: '},
										{ width: 130, xtype: 'textfield', name: 'phonecell' }
									]
								},
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'Work Phone: '},
										{ width: 130, xtype: 'textfield', name: 'phonew1' },
										{ width: 90, xtype: 'displayfield', value: 'Work Phone: '},
										{ width: 130, xtype: 'textfield', name: 'phonew2' },
										{ width: 60, xtype: 'displayfield', value: 'FAX: '},
										{ width: 140, xtype: 'textfield', name: 'fax'   }
									]
								}
							]
						},
						{
							xtype      : 'fieldset',
							title      : i18n['online_info'],
							collapsible: true,
							collapsed  : true,
							defaultType: 'textfield',
							layout     : 'anchor',
							defaults   : {
								labelWidth: 89,
								anchor    : '100%',
								layout    : {
									type          : 'hbox',
									defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
								}
							},
							items      : [
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 100, xtype: 'displayfield', value: 'Email: '},
										{ width: 130, xtype: 'textfield', name: 'email' },
										{ width: 90, xtype: 'displayfield', value: 'Assistant: '},
										{ width: 130, xtype: 'textfield', name: 'assistant' },
										{ width: 60, xtype: 'displayfield', value: 'Website: '},
										{ width: 140, xtype: 'textfield', name: 'url' }
									]
								}
							]
						},
						{
							xtype      : 'fieldset',
							title      : i18n['other_info'],
							collapsible: true,
							collapsed  : true,
							defaultType: 'textfield',
							layout     : 'anchor',
							defaults   : {
								labelWidth: 89,
								anchor    : '100%',
								layout    : {
									type          : 'hbox',
									defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
								}
							},
							items      : [
								{
									xtype: 'fieldcontainer',
									items: [
										{ width: 50, xtype: 'displayfield', value: 'UPIN: '},
										{ width: 80, xtype: 'textfield', name: 'upin' },
										{ width: 50, xtype: 'displayfield', value: 'NPI: '},
										{ width: 80, xtype: 'textfield', name: 'npi' },
										{ width: 50, xtype: 'displayfield', value: 'TIN: '},
										{ width: 80, xtype: 'textfield', name: 'federaltaxid' },
										{ width: 80, xtype: 'displayfield', value: 'Taxonomy: '},
										{ width: 90, xtype: 'textfield', name: 'taxonomy' }
									]
								}
							]
						},
						{
							width    : 720,
							xtype    : 'htmleditor',
							name     : 'notes',
							emptyText: i18n['notes']
						}
					]
				}
			],
			buttons  : [
				{
					text   : i18n['save'],
					scope  : me,
					handler: me.onSave
				},
				{
					text   : i18n['cancel'],
					scope  : me,
					handler: me.onCancel
				}
			],
			listeners: {
				close: me.onWinClose
			}
		}); // END WINDOW


		// *************************************************************************************
		// Create the GridPanel
		// *************************************************************************************
		me.grid = Ext.create('Ext.grid.GridPanel', {
			store      : me.store,
			layout     : 'fit',
			frame      : true,
			loadMask   : true,
			viewConfig : {stripeRows: true},
			listeners  : {
				scope       : me,
				itemclick   : me.girdItemclick,
				itemdblclick: me.gridItemdblclick

			},
			columns    : [
				{ header: i18n['name'], width: 150, sortable: true, dataIndex: 'fullname' },
				{ header: i18n['local'], width: 50, sortable: true, dataIndex: 'username', renderer: me.local },
				{ header: i18n['type'], sortable: true, dataIndex: 'ab_title' },
				{ header: i18n['specialty'], sortable: true, dataIndex: 'specialty' },
				{ header: i18n['work_phone'], sortable: true, dataIndex: 'phonew1' },
				{ header: i18n['mobile'], sortable: true, dataIndex: 'phonecell' },
				{ header: i18n['fax'], sortable: true, dataIndex: 'fax' },
				{ header: i18n['email'], flex: 1, sortable: true, dataIndex: 'email' },
				{ header: i18n['primary_address'], flex: 1, sortable: true, dataIndex: 'fulladdress' }
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: [
						{
							text   : i18n['add_contact'],
							iconCls: 'icoAddressBook',
							scope  : me,
							handler: me.onAddContact
						}
					]
				}
			]
		});


		me.pageBody = [ me.grid ];
		me.callParent(arguments);
	},

	onAddContact: function() {
		this.win.show();
	},

	onSave: function(btn) {
		var me = this,
			win = btn.up('window'),
			form = win.down('form').getForm(),
			store = me.store;

		if(form.isValid()) {
			var record = form.getRecord(),
				values = form.getValues(),
				storeIndex = store.indexOf(record);

			if(storeIndex == -1) {
				store.add(values);
			} else {
				record.set(values);
			}
			store.sync();
			store.load();
			win.close();
			me.msg('Sweet!', i18n['message_sent']);
		}
	},


	onCancel: function() {
		this.win.close();
	},

	girdItemclick: function(grid, record) {

	},

	gridItemdblclick: function(grid, record) {
		this.win.down('form').getForm().loadRecord(record);
		this.win.show();
	},

	onWinClose: function(window) {
		window.down('form').getForm().reset();
	},


	onCopyClipBoard: function(company) {
		var store = Ext.getCmp('grid').store;
		var record = store.getById(company);

		var s = '';
		for(key in record.data) {
			s += key + ': ' + record.data[key] + '\n';
		}

		alert(i18n['following_data_copied_to_clipboard'] + ':\n\n' + s);

		if(window.clipboardData) {
			window.clipboardData.setData('text', s);
		} else {
			return (s);
		}
	},

	local: function(val) {
		if(val !== '') {
			return '<img src="resources/images/icons/yes.gif" />';
		}
		return val;
	},


	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.store.load();
		callback(true);
	}
});
/**
 * Author: Ernesto J Rodriguez <erodriuez@certun.com>
 * Modified: GI Technologies, 2011
 *
 * GaiaEHR (Electronic Health Records) 2011
 *
 */
Ext.define('App.view.miscellaneous.MyAccount', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelMyAccount',
	pageTitle    : i18n['my_account'],
	uses         : [
		'App.classes.combo.Titles',
		'App.classes.window.Window',
		'App.classes.combo.Facilities',
		'App.classes.combo.Authorizations'
	],
	initComponent: function() {
		var me = this;

		Ext.define('UsersModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'title', type: 'string'},
				{name: 'fname', type: 'string'},
				{name: 'mname', type: 'string'},
				{name: 'lname', type: 'string'},
				{name: 'username', type: 'string'},
				{name: 'password', type: 'string'},
				{name: 'oPassword', type: 'string'},
				{name: 'nPassword', type: 'string'},
				{name: 'facility_id', type: 'int'},
				{name: 'see_auth', type: 'string'},
				{name: 'taxonomy', type: 'string'},
				{name: 'federaltaxid', type: 'string'},
				{name: 'federaldrugid', type: 'string'},
				{name: 'upin', type: 'string'},
				{name: 'npi', type: 'string'},
				{name: 'specialty', type: 'string'}

			],
			proxy : {
				type: 'direct',
				api : {
					read  : User.getCurrentUserData,
					update: User.getCurrentUserData
				}
			}
		});
		me.store = Ext.create('Ext.data.Store', {
			model     : 'UsersModel',
			remoteSort: false
		});

		// *************************************************************************************
		// User Settings Form
		// Add or Edit purpose
		// *************************************************************************************
		me.myAccountForm = Ext.create('App.classes.form.Panel', {
			cls        : 'form-white-bg',
			frame      : true,
			hideLabels : true,
			defaults   : {
				labelWidth: 89,
				layout    : {
					type          : 'hbox',
					defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
				}
			},
			items      : [
				{
					xtype: 'textfield', hidden: true, name: 'id'
				},
				{
					xtype      : 'fieldset',
					title      : i18n['personal_info'],
					defaultType: 'textfield',
					layout     : 'anchor',
					defaults   : {
						labelWidth: 89,
						anchor    : '100%',
						layout    : {
							type          : 'hbox',
							defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
						}
					},
					items      : [
						{
							xtype    : 'fieldcontainer',
							defaults : { hideLabel: true },
							msgTarget: 'under',
							items    : [
								{ width: 110, xtype: 'displayfield', value: 'First, Middle, Last: '},
								{ width: 55, xtype: 'mitos.titlescombo', name: 'title'},
								{ width: 105, xtype: 'textfield', name: 'fname' },
								{ width: 100, xtype: 'textfield', name: 'mname' },
								{ width: 175, xtype: 'textfield', name: 'lname' }
							]
						}
					]
				},
				{
					xtype      : 'fieldset',
					title      : i18n['login_info'],
					defaultType: 'textfield',
					layout     : 'anchor',
					defaults   : {
						labelWidth: 89,
						anchor    : '100%',
						layout    : {
							type          : 'hbox',
							defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
						}
					},
					items      : [
						{
							xtype    : 'fieldcontainer',
							defaults : { hideLabel: true },
							msgTarget: 'under',
							items    : [
								{ width: 110, xtype: 'displayfield', value: 'Username: '},
								{ width: 150, xtype: 'textfield', name: 'username' },
								{ width: 120, xtype: 'displayfield', value: 'Password: '},
								{ width: 175, xtype: 'textfield', name: 'password', inputType: 'password', disabled: true }
							]
						}
					]
				},
				{
					xtype      : 'fieldset',
					title      : i18n['other_info'],
					defaultType: 'textfield',
					layout     : 'anchor',
					defaults   : {
						labelWidth: 89,
						anchor    : '100%',
						layout    : {
							type          : 'hbox',
							defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
						}
					},
					items      : [
						{
							xtype    : 'fieldcontainer',
							defaults : { hideLabel: true },
							msgTarget: 'under',
							items    : [
								{ width: 110, xtype: 'displayfield', value: 'Default Facility: '},
								Ext.create('App.classes.combo.Facilities', {width: 170 }),
								{ width: 100, xtype: 'displayfield', value: 'Authorizations: '},
								Ext.create('App.classes.combo.Authorizations', {width: 175 })
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 110, xtype: 'displayfield', value: 'Access Control: '},
								Ext.create('App.classes.combo.Roles', {width: 170 }),
								{ width: 100, xtype: 'displayfield', value: 'Taxonomy: '},
								{ width: 175, xtype: 'textfield', name: 'taxonomy' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 110, xtype: 'displayfield', value: 'Federal Tax ID: '},
								{ width: 170, xtype: 'textfield', name: 'federaltaxid' },
								{ width: 100, xtype: 'displayfield', value: 'Fed Drug ID: '},
								{ width: 175, xtype: 'textfield', name: 'federaldrugid' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 110, xtype: 'displayfield', value: 'UPIN: '},
								{ width: 170, xtype: 'textfield', name: 'upin' },
								{ width: 100, xtype: 'displayfield', value: 'NPI: '},
								{ width: 175, xtype: 'textfield', name: 'npi' }
							]
						},
						{
							xtype   : 'fieldcontainer',
							defaults: { hideLabel: true },
							items   : [
								{ width: 110, xtype: 'displayfield', value: 'Job Description: '},
								{ width: 455, xtype: 'textfield', name: 'specialty' }
							]
						}
					]
				}
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: [
						{
							text   : i18n['save'],
							iconCls: 'save',
							handler: function() {
//                        var record =  me.store.getAt('0');
//                        var fieldValues = me.myAccountForm.getForm().getValues();
//                        for ( var k=0; k <= record.fields.getCount()-1; k++) {
//                            var i = record.fields.get(k).name;
//                            record.set( i, fieldValues[i] );
//                        }
//                        me.store.sync();	// Save the record to the dataStore
//                        me.store.load();	// Reload the dataSore from the database
//
//                        me.msg('Sweet!', 'Your Account have been updated.');
							}
						},
						{
							text   : i18n['change_password'],
							iconCls: 'save',
							scope  : me,
							handler: me['onPasswordChange']
						}
					]
				}
			],
			listeners  : {
				afterrender: {
					fn: function() {
						//me.store.load();
					}
				}
			}
		});

		me.win = Ext.create('App.classes.window.Window', {
			width    : 420,
			title    : i18n['change_you_password'],
			items    : [
				{
					xtype      : 'form',
					bodyPadding: 15,
					defaultType: 'textfield',
					defaults   : {labelWidth: 130, width: 380, inputType: 'password'},
					items      : [
						{
							name  : 'id',
							hidden: true
						},
						{
							fieldLabel: i18n['old_password'],
							name      : 'oPassword',
							allowBlank: false
						},
						{
							fieldLabel: i18n['new_password'],
							name      : 'nPassword',
							allowBlank: false,
							id        : 'myAccountPage_nPassword'
						},
						{
							fieldLabel      : i18n['re_type_password'],
							name            : 'vPassword',
							allowBlank      : false,
							vtype           : 'password',
							initialPassField: 'myAccountPage_nPassword',
							validateOnChange: true
						}
					]
				}
			],
			buttons  : [
				{
					text   : i18n['save'],
					scope  : me,
					handler: me.onPasswordSave
				},
				{
					text   : i18n['cancel'],
					scope  : me,
					handler: me.onCancel
				}
			],
			listeners: {
				scope: me,
				close: me.onClose
			}

		});
		me.pageBody = [ me.myAccountForm ];
		me.callParent(arguments);
	},


	onPasswordSave: function() {

	},

	onPasswordChange: function() {
		this.win.show();
	},

	onCancel: function() {
		this.win.close();
	},

	onClose: function() {
		this.win.down('form').getForm().reset();
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		var me = this,
			form = me.myAccountForm.getForm();

		this.store.load({
			scope   : me,
			callback: function(record) {
				form.loadRecord(record[0]);
			}
		});
		callback(true);
	}
});
//******************************************************************************
// new.ejs.php
// New Patient Entry Form
// v0.0.1
// 
// Author: Ernest Rodriguez
// Modified: GI Technologies, 2011
// 
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.miscellaneous.MySettings', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelMySettings',
	pageTitle    : i18n['my_settings'],
	uses         : [
		'App.classes.GridPanel'
	],
	initComponent: function() {
		var panel = this;
		// *************************************************************************************
		// User Settings Form
		// Add or Edit purpose
		// *************************************************************************************
		panel.uSettingsForm = Ext.create('App.classes.form.Panel', {
			id         : 'uSettingsForm',
			bodyStyle  : 'padding: 10px;',
			cls        : 'form-white-bg',
			frame      : true,
			hideLabels : true,
			items      : [
				{
					xtype: 'textfield', hidden: true, id: 'id', name: 'id'
				},
				{
					xtype      : 'fieldset',
					title      : i18n['appearance_settings'],
					collapsible: true,
					defaultType: 'textfield',
					layout     : 'anchor',
					defaults   : {
						labelWidth: 89,
						anchor    : '100%',
						layout    : {
							type          : 'hbox',
							defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
						}
					},
					items      : [
						{
							// fields
						},
						{

						},
						{

						}
					]
				},
				{
					xtype      : 'fieldset',
					title      : i18n['locale_settings'],
					collapsible: true,
					defaultType: 'textfield',
					layout     : 'anchor',
					defaults   : {
						labelWidth: 89,
						anchor    : '100%',
						layout    : {
							type          : 'hbox',
							defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
						}
					},
					items      : [
						{
							// fields
						},
						{

						},
						{

						}
					]
				},
				{
					xtype      : 'fieldset',
					title      : i18n['calendar_settings'],
					collapsible: true,
					defaultType: 'textfield',
					layout     : 'anchor',
					defaults   : {
						labelWidth: 89,
						anchor    : '100%',
						layout    : {
							type          : 'hbox',
							defaultMargins: {top: 0, right: 5, bottom: 0, left: 0}
						}
					},
					items      : [
						{
							// fields
						},
						{

						},
						{

						}
					]
				}
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: [
						{
							text    : i18n['save'],
							iconCls : 'save',
							id      : 'cmdSave',
							disabled: true,
							handler : function() {

							}
						}
					]
				}
			]
		});
		panel.pageBody = [panel.uSettingsForm];
		panel.callParent(arguments);
	},
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive     : function(callback) {
		callback(true);
	}
}); // End ExtJS
//******************************************************************************
// ofice_notes.ejs.php
// office Notes Page
// v0.0.1
// 
// Author: Ernest Rodriguez
// Modified:
// 
// GaiaEHR (Electronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.miscellaneous.OfficeNotes', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelOfficeNotes',
	pageTitle    : i18n['office_notes'],
	pageLayout   : 'border',
	initComponent: function() {
		var me = this;

		me.store = Ext.create('App.store.miscellaneous.OfficeNotes');

		me.form = Ext.create('Ext.form.FormPanel', {
			region     : 'north',
			frame      : true,
			height     : 97,
			margin     : '0 0 3 0',
			items      : [
				{
					xtype     : 'textareafield',
					allowBlank: false,
					grow      : true,
					margin    : 0,
					itemId    : 'body',
					name      : 'body',
					anchor    : '100%',
					emptyText : i18n['type_new_note_here'] + '...',
					listeners : {
						scope         : me,
						validitychange: me.onValidityChange
					}
				}
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock : 'top',
					items: [
						{
							text    : i18n['save'],
							iconCls : 'save',
							itemId  : 'cmdSave',
							disabled: true,
							scope   : me,
							handler : me.onNoteSave
						},
						'-',
						{
							text    : i18n['hide_this_note'],
							iconCls : 'save',
							itemId  : 'cmdHide',
							tooltip : i18n['hide_selected_office_note'],
							disabled: true,
							scope   : me,
							handler : me.onNoteHide

						},
						'-',
						{
							text    : i18n['reset'],
							iconCls : 'save',
							itemId  : 'cmdReset',
							disabled: true,
							scope   : me,
							handler : me.onFormReset
						}
					]
				}
			]
		});
		
		me.grid = Ext.create('Ext.grid.Panel', {
			region   : 'center',
			store    : me.store,
			listeners: {
				scope    : me,
				itemclick: me.onItemClick
			},
			columns  : [
				{ width: 150, header: i18n['date'], sortable: true, dataIndex: 'date', renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s') },
				{ width: 150, header: i18n['user'], sortable: true, dataIndex: 'user' },
				{ flex: 1, header: i18n['note'], sortable: true, dataIndex: 'body' }

			],
			tbar     : Ext.create('Ext.PagingToolbar', {
				store      : me.store,
				displayInfo: true,
				emptyMsg   : i18n['no_office_notes_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {}),
				items      : [
					{
						text        : i18n['show_only_active_notes'],
						iconCls     : 'save',
						enableToggle: true,
						pressed     : true,
						handler     : function() {
							//me.cmdShowAll.toggle(false);
							me.store.load({params: {show: 'active' }});
						}
					},
					'-',
					{
						text        : i18n['show_all_notes'],
						iconCls     : 'save',
						enableToggle: true,
						handler     : function() {
							//me.cmdShow.toggle(false);
							me.store.load({params: {show: 'all' }});
						}
					}
				]
			})
		}); // END GRID
		me.pageBody = [ me.form, me.grid ];
		me.callParent(arguments);
	},


    onNoteSave: function(btn) {
		var form = btn.up('form').getForm(),
			store = this.store,
			record = form.getRecord(),
			values = form.getValues(),
			storeIndex = store.indexOf(record);
		if(storeIndex == -1) {
			store.add(values);
		} else {
			record.set(values);
		}
		store.sync();
		//store.load();
	},

	onNoteHide: function() {

	},

    onFormReset: function(btn) {
		var panel = this.form,
			form = panel.getForm(),
			toolbar = panel.down('toolbar'),
			savebtn = toolbar.getComponent('cmdSave'),
			hidebtn = toolbar.getComponent('cmdHide'),
			resetbtn = toolbar.getComponent('cmdReset');
		form.reset();
		savebtn.disable();
		hidebtn.disable();
		resetbtn.disable();
		savebtn.setText('Save');
	},

	onItemClick: function(grid, record) {
		var panel = this.form,
			form = panel.getForm(),
			toolbar = panel.down('toolbar'),
			savebtn = toolbar.getComponent('cmdSave'),
			hidebtn = toolbar.getComponent('cmdHide'),
			resetbtn = toolbar.getComponent('cmdReset');
		form.reset();
		form.loadRecord(record);
		savebtn.enable();
		hidebtn.enable();
		resetbtn.enable();
		savebtn.setText('Update');
	},


	onValidityChange: function() {
		var panel = this.form,
			textfield = panel.getComponent('body'),
			toolbar = panel.down('toolbar'),
			savebtn = toolbar.getComponent('cmdSave'),
			resetbtn = toolbar.getComponent('cmdReset');

		if(textfield.isValid()) {
			savebtn.enable();
			resetbtn.enable();
		} else {
			savebtn.disable();
		}
	},

	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback) {
		this.store.load({params: {show: 'active' }});
		callback(true);
	}
}); //ens oNotesPage class
//******************************************************************************
// Users.ejs.php
// Description: Users Screen
// v0.0.4
//
// Author: Ernesto J Rodriguez
// Modified: n/a
//
// GaiaEHR (Eletronic Health Records) 2011
//******************************************************************************
Ext.define('App.view.miscellaneous.Websearch', {
	extend       : 'App.classes.RenderPanel',
	id           : 'panelWebsearch',
	pageTitle    : i18n['national_library'],
	pageLayout   : 'border',
	uses         : [
		'App.classes.GridPanel'
	],
	initComponent: function() {

		var page = this;
		var search_type;
		var rec;
		if(!Ext.ModelManager.isRegistered('webSearch')) {
			Ext.define("webSearch", {
				extend: 'Ext.data.Model',
				fields: [
					{name: 'title', type: 'string'},
					{name: 'source', type: 'string'},
					{name: 'FullSummary', type: 'string'},
					{name: 'snippet', type: 'string'}
				]
			});
		}
		page.store = Ext.create('Ext.data.Store', {
			pageSize: 15,
			model   : 'webSearch',
			proxy   : {
				type      : 'ajax',
				url       : 'app/miscellaneous/websearch/data_read.ejs.php',
				noCache   : false,
				startParam: 'retstart',
				limitParam: 'retmax',
				pageParam : 'file',
				reader    : {
					type         : 'json',
					root         : 'row',
					totalProperty: 'totals',
					idProperty   : 'id'
				}
			}
			//autoLoad:true
		});
		page.searchPanel = Ext.create('Ext.panel.Panel', {
			region     : 'north',
			bodyPadding: '8 11 5 11',
			margin     : '0 0 2 0',
			layout     : 'anchor',
			items      : [
				{
					xtype     : 'radiogroup',
					fieldLabel: i18n['search_by'],
					items     : [
						{boxLabel: i18n['heath_topics'], name: 'type', inputValue: 'health_topics'},
						{boxLabel: 'ICD-9-CM', name: 'type', inputValue: 'icd9cm'}
						//{boxLabel: 'N/A', name: 'type', inputValue: 3},
						//{boxLabel: 'N/A', name: 'type', inputValue: 4},
						//{boxLabel: 'N/A', name: 'type', inputValue: 5}
					],
					listeners : {
						change: function() {
							var value = this.getValue();
							search_type = value.type;
							page.searchField.enable();
							page.searchField.reset();
						}
					}
				},
				page.searchField = Ext.create('Ext.form.field.Text', {
					emptyText      : i18n['web_search'] + '...',
					enableKeyEvents: true,
					hideLabel      : true,
					anchor         : '100%',
					disabled       : true,
					listeners      : {
						keyup    : function() {
							var query = this.getValue();
							if(query.length > 2) {
								page.store.load({params: { type: search_type, q: query }});
							}
						}, buffer: 500,
						focus    : function() {
							page.viewPanel.collapse();
						}
					}
				})
			]
		});
		page.searchRow = function(value, p, record) {
			return Ext.String.format('<div class="topic"><span class="search_title">{0}</span><br><span class="search_source">{1}</span><br><span class="search_snippet" style="white-space: normal;">{2}</span></div>', value, record.get('source') || "Unknown", record.get('snippet') || "Unknown");
		};
		page.onotesGrid = Ext.create('App.classes.GridPanel', {
			margin    : '0 0 2 0',
			region    : 'center',
			store     : page.store,
			viewConfig: {
				deferEmptyText: false,
				emptyText     : '<p class="search_nothing_found" style="padding: 10px 0 0 20px; font-size: 24px">' + i18n['nothing_found'] + '!</p>',
				stripeRows    : true,
				loadingText   : i18n['searching'] + '... ' +  i18n['please_wait']
			},
			columns   : [
				{ flex: 1, header: i18n['search_results'], sortable: true, dataIndex: 'title', renderer: page.searchRow  },
				{ hidden: true, sortable: true, dataIndex: 'source' },
				{ hidden: true, sortable: true, dataIndex: 'snippet' }
			],
			tbar      : Ext.create('Ext.PagingToolbar', {
				store      : page.store,
				displayInfo: true,
				emptyMsg   : i18n['nothing_to_display'],
				plugins    : Ext.create('Ext.ux.SlidingPager', {})
			}),
			listeners : {
				itemclick: function(DataView, record, item, rowIndex) {
					page.viewPanel.expand();
					rec = page.store.getAt(rowIndex);
					page.viewPanel.update(rec.data);
				}
			}
		}); // END GRID
		page.viewPanel = Ext.create('Ext.panel.Panel', {
			region     : 'south',
			height     : 300,
			collapsible: true,
			collapsed  : true,
			layout     : 'fit',
			frame      : true,
			bodyBorder : true,
			tpl        : Ext.create('Ext.XTemplate',
				'<div class="search_container">',
				'<div class="search_data">',
				'<h3 class="search_title">' + i18n['title'] + ': {title}</h3>',
				'<h4 class="search_source">' + i18n['source'] + ': {source}</h4>',
				'</div>',
				'<div class="search_body">{FullSummary}</div>',
				'</div>')
		});

		page.pageBody = [ page.searchPanel, page.onotesGrid, page.viewPanel ];
		page.callParent(arguments);
	}, // end of initComponent
	/**
	 * This function is called from MitosAPP.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive     : function(callback) {
		callback(true);
	}
}); //ens UserPage class
/**
 * Created by JetBrains PhpStorm.
 * User: Ernesto J. Rodriguez (Certun)
 * File:
 * Date: 2/15/12
 * Time: 4:30 PM
 *
 * @namespace Immunization.getImmunizationsList
 * @namespace Immunization.getPatientImmunizations
 * @namespace Immunization.addPatientImmunization
 */
Ext.define('App.view.signature.SignatureWindow', {
	extend      : 'Ext.window.Window',
	title       : i18n['please_sign'],
	closeAction : 'hide',
	height      : 250,
	width       : 500,
	bodyStyle   : 'background-color:#fff',
	modal       : true,
    layout		: 'fit',
	initComponent: function() {
		var me = this;

        me.html = me.signature = '<iframe id="svgSignature" src="app/view/signature/signature.svg" height="100%" width="100%" scrolling="no" frameborder="0"></iframe>';

        me.buttons = [
            {
                text: i18n['save'],
                scope:me,
                handler:me.signatureSave
            },
            {
                text: i18n['reset'],
                scope:me,
                handler:me.signatureCancel
            }
        ];

		this.callParent(arguments);

	},

    signatureSave:function(){
        var svg = document.getElementById('svgSignature').contentWindow;
        say(svg.getSignature());
    },

    signatureCancel:function(){
        var svg = document.getElementById('svgSignature').contentWindow;
        svg.clearSignature();
        //this.close();
    }



});
Ext.define('Modules.Module', {
    extend:'Ext.Component',
    constructor:function(){
        var me = this;

        me.callParent();
    },

    /**
     * @param panel
     */
    addAppPanel:function(panel)
    {
        app.MainPanel.add(panel);
    },

    /**
     * @param item
     */
    addHeaderItem:function(item)
    {
        app.Header.add(item);
    },

    /**
     * @param parentId
     * @param node
     * 
     * Desc: Method to add items to the navigation tree.
     * 
     */
    addNavigationNodes:function(parentId, node)
    {
        var parent;
        if(parentId == 'root' || parentId == null){
            parent = app.storeTree.tree.getRootNode();
        }else{
            parent = app.storeTree.tree.getNodeById(parentId);
        }

        var firstChildNode = parent.findChildBy(function(node){
            return node.hasChildNodes();
        });

        if(Ext.isArray(node)){
            for(var i=0; i < node.length; i++) parent.insertBefore(node[i], firstChildNode);
        }else{
            parent.insertBefore(node, firstChildNode);
        }


    },

    addLanguages:function(languages){

    }

});
 /*
 * -----------------------------------------------------------------------------------------------------------
 * brief: Viewport.js (CORE)
 * ----------------------------------------------------------------------------------------------------------- 
 * Description: This are the viewport, the absolute panel of GaiaEHR application
 * this will manage all the panels on the application, this file should not
 * be modified by extrangers. 
 * 
 * Third-party companies: If you want to add a extra app's, widgets, modules, or another other improvement
 * to the application you should create it using the documentation on How To Create (Modules, PlugIns, and Widgets)
 * All other things are going to the CORE of the application.
 * 
 * Remember this is a BETA software, all the structure are subject to change.
 * When the software are more mature, we will maintain the API and CORE for a LTS version (Long Term Support).
 * 
 * Enjoy the application!
 * 
 */
Ext.define('App.view.Viewport', {
	extend  : 'Ext.Viewport',
	requires: window.requires,
    // app settings
	minWidthToFullMode: 1585,       // full mode = nav expanded
	currency          : '$',        // currency used
    activityMonitorInterval: 60,    // in seconds - interval to check for mouse and keyboard activity
    activityMonitorMaxInactive: 10, // in minutes - Maximum time application can be inactive (no mouse or keyboard imput)
    cronTaskInterval:10,            // in seconds - interval to run me.cronTask (check PHP session, refresh Patient Pool Areas, and PHP Cron Job)
    // end app settings

	initComponent: function() 
	{
		Ext.tip.QuickTipManager.init();
		var me = this;
		me.lastCardNode = null;
		me.currCardCmp = null;

        me.fullMode = window.innerWidth >= me.minWidthToFullMode;

        me.patient = {
            name    : null,
            pid     : null,
            sex     : null,
            dob     : null,
            age     : null,
            eid     : null,
            readOnly: false
        };

		me.user = window.user;
		/**
		 * TaskScheduler
		 * This will run all the procedures inside the checkSession
		 */
		me.cronTask = {
			scope   : me,
			run     : function() 
			{
				me.checkSession();
				me.getPatientsInPoolArea();
				CronJob.run();
			},
			interval: me.cronTaskInterval * 1000
		};

		/*
		 * The store for the Navigation Tree menu.
		 */ 
		me.storeTree = Ext.create('App.store.navigation.Navigation',
		{
			autoLoad : true,
			listeners: {
				scope: me,
				load : me.afterNavigationLoad
			}
		});

		/**
		 * This store will handle the patient pool area
		 */
		me.patientPoolStore = Ext.create('App.store.areas.PoolArea');

		/*
		 * TODO: this should be managed by the language files
		 * The language file has a definition for this.
		 */ 
		if(me.currency == '$') 
		{
			me.icoMoney = 'icoDollar';
		} else if(me.currency == '€') 
		{
			me.icoMoney = 'icoEuro';
		} else if(me.currency == '£') 
		{
			me.icoMoney = 'icoLibra';
		} else if(me.currency == '¥') 
		{
			me.icoMoney = 'icoYen';
		}

		/**
		 * GaiaEHR Support Page
		 */
		me.winSupport = Ext.create('Ext.window.Window', 
		{
			title        : i18n['support'],
			closeAction  : 'hide',
			bodyStyle    : 'background-color: #ffffff; padding: 5px;',
			animateTarget: me.Footer,
			resizable    : false,
			draggable    : false,
			maximizable  : false,
			autoScroll   : true,
			maximized    : true,
			dockedItems  : {
				xtype: 'toolbar',
				dock : 'top',
				items: ['-', 
				{
					text   : "List issues",
					iconCls: 'list',
					action : 'http://GaiaEHR.org/projects/GaiaEHR001/issues',
					scope  : me,
					handler: me.showMiframe
				}, '-', 
				{
					text   : "Create an issue",
					iconCls: 'icoAddRecord',
					action : 'http://GaiaEHR.org/projects/GaiaEHR001/issues/new',
					scope  : me,
					handler: me.showMiframe
				}]
			}
		});

		/**
		 * header Panel
		 */
		me.Header = Ext.create('Ext.container.Container', 
		{
			region     : 'north',
			height     : 44,
			split      : false,
			collapsible: false,
			collapsed  : true,
			frame      : false,
			border     : false,
			bodyStyle  : 'background: transparent',
			margins    : '0 0 0 0'
		});

        me.patientBtn = me.Header.add({
            xtype    : 'button',
            scale    : 'large',
            style    : 'float:left',
            margin   : 0,
            scope    : me,
            handler  : me.openPatientSummary,
            listeners: {
                scope      : me,
                afterrender: me.patientBtnRender
            },
            tpl      : me.patientBtnTpl()
        });
        me.patientOpenVisitsBtn = me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:left',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            iconCls: 'icoBackClock',
            scope  : me,
            handler: me.openPatientVisits,
            tooltip: i18n['open_patient_visits_history']
        });
        if(acl['add_encounters']){
            me.patientCreateEncounterBtn = me.Header.add({
                xtype  : 'button',
                scale  : 'large',
                style  : 'float:left',
                margin : '0 0 0 3',
                cls    : 'headerLargeBtn',
                padding: 0,
                iconCls: 'icoClock',
                scope  : me,
                handler: me.createNewEncounter,
                tooltip: i18n['create_new_encounter']
            });
        }
        me.patientCloseCurrEncounterBtn = me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:left',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            iconCls: 'icoArrowDown',
            scope  : me,
            handler: me.stowPatientRecord,
            tooltip: i18n['show_patient_record']
        });
        me.patientCheckOutBtn = me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:left',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            iconCls: 'icoCheckOut',
            scope  : me,
            handler: me.chargePatient,
            tooltip: i18n['check_out_patient']
        });
        me.patientChargeBtn = me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:left',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            iconCls: me.icoMoney,
            scope  : me,
            handler: me.onPaymentEntryWindow,
            tooltip: i18n['payment_entry']
        });
        me.Header.add({
            xtype      : 'panel',
            bodyPadding: '8 11 5 11',
            margin     : '0 0 0 3',
            style      : 'float:left',
            items      : [
                {
                    xtype     : 'patienlivetsearch',
                    emptyText : i18n['patient_live_search'] + '...',
                    fieldStyle: me.fullMode ? 'width:300' : 'width:250',
                    listeners : {
                        scope : me,
                        select: me.liveSearchSelect,
                        blur  : function(combo) {
                            combo.reset();
                        }
                    }
                }
            ]
        });
        me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:left',
            margin : '0 0 0 3',
            padding: 4,
            itemId : 'patientNewReset',
            iconCls: 'icoAddPatient',
            scope  : me,
            handler: me.newPatient,
            tooltip: i18n['create_a_new_patient']
        });
        me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:left',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn emerBtn',
            overCls: 'emerBtnOver',
            padding: 0,
            itemId : 'createEmergency',
            iconCls: 'icoEmer',
            scope  : me,
            handler: me.createEmergency,
            tooltip: i18n['create_new_emergency']
        });
        me.Header.add({
            xtype    : 'button',
            text     : user.title + ' ' + user.lname,
            scale    : 'large',
            iconCls  : 'icoDoctor',
            iconAlign: 'left',
            cls      : 'drButton',
            style    : 'float:right',
            margin   : '0 0 0 3',
            menu     : [
                {
                    text   : i18n['my_account'],
                    iconCls: 'icoArrowRight',
                    handler: function() {
                        me.navigateTo('panelMyAccount');
                    }
                },
                {
                    text   : i18n['my_settings'],
                    iconCls: 'icoArrowRight',
                    handler: function() {
                        me.navigateTo('panelMySettings');
                    }
                },
                {
                    text   : i18n['logout'],
                    iconCls: 'icoArrowRight',
                    scope  : me,
                    handler: me.appLogout
                }
            ]
        });
        me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:right',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            itemId : 'patientCheckIn',
            iconCls: 'icoLog',
            scope  : me,
            handler: me.onPatientLog,
            tooltip: i18n['arrival_log']
        });
        me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:right',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            itemId : 'patientPoolArea',
            iconCls: 'icoPoolArea',
            scope  : me,
            handler: me.goToPoolAreas,
            tooltip: i18n['pool_areas']
        });
        me.Header.add({
            xtype  : 'button',
            scale  : 'large',
            style  : 'float:right',
            margin : '0 0 0 3',
            cls    : 'headerLargeBtn',
            padding: 0,
            itemId : 'floorPlans',
            iconCls: 'icoZoneAreasBig',
            scope  : me,
            handler: me.goToFloorPlans,
            tooltip: i18n['floor_plans']
        });

        /**
		 * The panel definition for the the TreeMenu & the support button
		 */
		me.navColumn = Ext.create('Ext.panel.Panel', {
			title      : i18n['navigation'],
			stateId    : 'navColumn',
			layout     : 'border',
			region     : 'west',
			width      : 200,
			split      : true,
			collapsible: true,
			collapsed  : false,
			items      : [
				{
					xtype      : 'treepanel',
					region     : 'center',
					cls        : 'nav_tree',
					hideHeaders: true,
					rootVisible: false,
					border     : false,
					store      : me.storeTree,
					width      : 200,
					plugins    : [
						{
                            ptype: 'nodedisabled'
                        }
					],
					//					root       : {
					//						nodeType : 'async',
					//						draggable: false
					//					},
					listeners  : {
						scope          : me,
						selectionchange: me.onNavigationNodeSelected
					}
				},
				me.patientPoolArea = Ext.create('Ext.Panel',{
					title      : i18n['patient_pool_areas'],
					layout     : 'fit',
					region     : 'south',
					bodyPadding: 5,
					height     : 25,
					cls        : 'patient-pool',
					split      : true,
					collapsible: true,
					border     : false,
//                    overflowY: 'auto',
					items      : [
						{
							xtype            : 'dataview',
							loadMask         : false,
							cls              : 'patient-pool-view',
							tpl              : '<tpl for=".">' +
								'<div class="patient-pool-btn x-btn x-btn-default-large {priority}">' +
								'<div class="patient_btn_img"><img src="{photoSrc}" width="35" height="35"></div>' +
								'<div class="patient_btn_info">' +
								'<div class="patient-name">{shortName}</div>' +
								'<div class="patient-name">#{pid} ({poolArea})</div>' +
								'</div>' +
								'</div>' +
								'</tpl>',
							itemSelector     : 'div.patient-pool-btn',
							overItemCls      : 'patient-over',
							selectedItemClass: 'patient-selected',
							singleSelect     : true,
							store            : me.patientPoolStore,
							listeners        : {
								scope : me,
								render: me.initializeOpenEncounterDragZone
							}
						}
                    ]
				})
			],
			dockedItems: [
				{
					xtype  : 'toolbar',
					dock   : 'bottom',
					border : true,
					margin : '3 0 0 0',
					padding: 5,
					layout : {
						type: 'hbox',
						pack: 'center'
					},
					items  : ['-', {
						xtype  : 'button',
						frame  : true,
						text   : 'GaiaEHR Support',
						iconCls: 'icoHelp',
						action : 'http://gaiaehr.org/',
						scope  : me,
						handler: me.showMiframe
					}, '-']
				}
			],
			listeners  : {
				scope         : me,
				beforecollapse: me.navCollapsed,
				beforeexpand  : me.navExpanded

			}
		});

		/**
		 * MainPanel is where all the pages are displayed
		 */
		me.MainPanel = Ext.create('Ext.container.Container', {
			region   : 'center',
			layout   : 'card',
			border   : true,
			itemId   : 'MainPanel',
			defaults : { layout: 'fit', xtype: 'container' },
			listeners: {
				scope      : me,
				afterrender: me.initializeOpenEncounterDropZone
			}
		});
		
        /**
         * General Area
         */
        me.MainPanel.add(Ext.create('App.view.dashboard.Dashboard')); // TODO: panels
        me.MainPanel.add(Ext.create('App.view.calendar.Calendar'));
        me.MainPanel.add(Ext.create('App.view.messages.Messages'));
        me.MainPanel.add(Ext.create('App.view.search.PatientSearch'));
        me.MainPanel.add(Ext.create('App.view.areas.FloorPlan'));

        /**
         * Patient Area
         */
        me.MainPanel.add(Ext.create('App.view.patient.NewPatient'));
        me.MainPanel.add(Ext.create('App.view.patient.Summary'));
        me.MainPanel.add(Ext.create('App.view.patient.Visits'));
        me.MainPanel.add(Ext.create('App.view.patient.Encounter'));
        me.MainPanel.add(Ext.create('App.view.patient.VisitCheckout'));
        /**
         * Fees Area
         */
        me.MainPanel.add(Ext.create('App.view.fees.Billing'));
        me.MainPanel.add(Ext.create('App.view.fees.Payments'));
        /**
         * Miscellaneous
         */
        me.MainPanel.add(Ext.create('App.view.miscellaneous.Addressbook'));
        me.MainPanel.add(Ext.create('App.view.miscellaneous.MyAccount'));
        me.MainPanel.add(Ext.create('App.view.miscellaneous.MySettings'));
        me.MainPanel.add(Ext.create('App.view.miscellaneous.OfficeNotes'));
        me.MainPanel.add(Ext.create('App.view.miscellaneous.Websearch'));
        
        me.ppdz = me.MainPanel.add(Ext.create('App.view.areas.PatientPoolDropZone'));

		if(acl['access_gloabal_settings']) me.MainPanel.add(Ext.create('App.view.administration.Globals'));
		if(acl['access_facilities']) me.MainPanel.add(Ext.create('App.view.administration.Facilities'));
		if(acl['access_users']) me.MainPanel.add(Ext.create('App.view.administration.Users'));
		if(acl['access_practice']) me.MainPanel.add(Ext.create('App.view.administration.Practice'));
		if(acl['access_data_manager']) me.MainPanel.add(Ext.create('App.view.administration.DataManager'));
		if(acl['access_preventive_care']) me.MainPanel.add(Ext.create('App.view.administration.PreventiveCare'));
		if(acl['access_medications']) me.MainPanel.add(Ext.create('App.view.administration.Medications'));
		if(acl['access_floor_plans']) me.MainPanel.add(Ext.create('App.view.administration.FloorPlans'));
		if(acl['access_roles']) me.MainPanel.add(Ext.create('App.view.administration.Roles'));
		if(acl['access_layouts']) me.MainPanel.add(Ext.create('App.view.administration.Layout'));
		if(acl['access_lists']) me.MainPanel.add(Ext.create('App.view.administration.Lists'));
		if(acl['access_event_log']) me.MainPanel.add(Ext.create('App.view.administration.Log'));
		if(acl['access_documents']) me.MainPanel.add(Ext.create('App.view.administration.Documents'));

        me.MainPanel.add(Ext.create('App.view.administration.ExternalDataLoads'));

		/**
		 * Footer Panel
		 */
		me.Footer = Ext.create('Ext.container.Container', {
			height : me.fullMode ? 30 : 60,
			split  : false,
			padding: '3 0',
			region : 'south',
			items  : [
				{
					xtype            : 'dataview',
					margin           : '0 0 3 0',
					hidden           : true,
					hideMode         : 'offsets',
					cls              : 'patient-pool-view-footer x-toolbar x-toolbar-default x-box-layout-ct',
					tpl              : '<div class="x-toolbar-separator x-toolbar-item x-toolbar-separator-horizontal" style="float:left; margin-top:5px;" role="presentation" tabindex="-1"></div>' +
						'<tpl for=".">' +
						'<div class="patient-pool-btn-small x-btn x-btn-default-small {priority}" style="float:left">' +
						'<div class="patient_btn_info">' +
						'<div class="patient-name">{name} ({pid})</div>' +
						'</div>' +
						'</div>' +
						'<div class="x-toolbar-separator x-toolbar-item x-toolbar-separator-horizontal" style="float:left; margin-top:5px; margin-left:3px;" role="presentation" tabindex="-1"></div>' +
						'</tpl>',
					itemSelector     : 'div.patient-pool-btn-small',
					overItemCls      : 'patient-over',
					selectedItemClass: 'patient-selected',
					singleSelect     : true,
					loadMask         : false,
					store            : me.patientPoolStore,
					listeners        : {
						render: me.initializeOpenEncounterDragZone
					}
				},
				{
					xtype: 'toolbar',
					dock : 'bottom',
					items: [
						{
							text    : 'Copyright (C) 2011 GaiaEHR (Electronic Health Records) |:|  Open Source Software operating under GPLv3 ',
							iconCls : 'icoGreen',
							disabled: true,
							action  : 'http://GaiaEHR.org/projects/GaiaEHR001',
							scope   : me,
							handler : me.showMiframe
						},
						'->',
						{
							text   : i18n['news'],
							action : 'http://GaiaEHR.org/projects/GaiaEHR001/news',
							scope  : me,
							handler: me.showMiframe
						},
						'-',
						{
							text   : i18n['wiki'],
							action : 'http://gaiaehr.org/',
							scope  : me,
							handler: me.showMiframe
						},
						'-',
						{
							text   : i18n['issues'],
							action : 'http://gaiaehr.org/',
							scope  : me,
							handler: me.showMiframe
						},
						'-',
						{
							text   : i18n['forums'],
							action : 'http://gaiaehr.org/',
							scope  : me,
							handler: me.showMiframe
						}
					]
				}
			]
		});

		me.MedicalWindow = Ext.create('App.view.patient.windows.Medical');
		me.ChartsWindow = Ext.create('App.view.patient.windows.Charts');
		me.PaymentEntryWindow = Ext.create('App.view.fees.PaymentEntryWindow');
		me.PreventiveCareWindow = Ext.create('App.view.patient.windows.PreventiveCare');
		me.NewDocumentsWindow = Ext.create('App.view.patient.windows.NewDocuments');
		me.DocumentViewerWindow = Ext.create('App.view.patient.windows.DocumentViewer');

		me.layout = { type: 'border', padding: 3 };
		me.defaults = { split: true };
		me.items = [ me.Header, me.navColumn, me.MainPanel, me.Footer ];

		me.listeners = {
			render : me.appRender,
			beforerender: me.beforeAppRender
		};

		me.callParent(arguments);

		me.signature = Ext.create('App.view.signature.SignatureWindow');

	},

	/*
	 * Show the medical window dialog.
	 */ 
	onMedicalWin: function(btn) {
		this.MedicalWindow.show();
		this.MedicalWindow.down('toolbar').getComponent(btn.action).toggle(true);
		this.MedicalWindow.cardSwitch(btn);
	},

	/*
	 * Show the Charts window dialog.
	 */ 
	onChartsWin      : function() {
		this.ChartsWindow.show();
	},
	
	/*
	* Show the Document window dialog.
	*/ 
	onNewDocumentsWin: function(action) {

		this.NewDocumentsWindow.eid = this.patient.eid;
		this.NewDocumentsWindow.pid = this.patient.pid;
		this.NewDocumentsWindow.show();
		this.NewDocumentsWindow.cardSwitch(action);
	},

	onWebCamComplete: function(msg) {
		var panel = this.getActivePanel();
		if(panel.id == 'panelSummary') {
			panel.completePhotoId();
		}
		this.msg('Sweet!', i18n['patient_image_saved']);
	},

	onPatientLog: function() {
		if(this.patientArrivalLog) {
			this.patientArrivalLog.show();
		} else {
			this.patientArrivalLog = Ext.create('App.view.patient.windows.ArrivalLog').show();
		}
	},

	/*
	 * Show the Payment Entry window dialog.
	 */ 
	onPaymentEntryWindow: function() {
		this.PaymentEntryWindow.show();
	},

	/*
	 * Show the new patient form panel.
	 */ 
	newPatient: function() {
		var me = this;
		me.navigateTo('panelNewPatient');
	},

	createEmergency: function() {
		var me = this, emergency;

		Ext.Msg.show({
		     title: i18n['wait'] + '!!!',
		     msg: i18n['are_you_sure_you_want_to_create_a_new'] + ' <span style="color: red">"' + i18n['emergency'] + '"</span>?',
		     buttons: Ext.Msg.YESNO,
		     icon: Ext.Msg.WARNING,
			fn:function(btn){
				if(btn == 'yes'){
					Emergency.createNewEmergency(function(provider, response){
						emergency = response.result.emergency;
						if(response.result.success){
							me.setPatient(emergency.pid,emergency.name, function(){
								me.openEncounter(emergency.eid);
							});
							me.msg('Sweet!',emergency.name + ' ' + i18n['created'])
						}
					});
				}
			}
		});

	},

	/*
	 * Show the Create New Encounter panel.
	 */ 
	createNewEncounter: function() {
		var me = this;
		if(acl['access_encounters'] && acl['add_encounters']) {
			me.navigateTo('panelEncounter', function(success) {
				if(success) {
					me.currCardCmp.newEncounter();
				}
			});
		} else {
			me.accessDenied();
		}
	},

	openPatientSummary: function() {
		var me = this;
//		if(me.currCardCmp == Ext.getCmp('panelSummary')) {
//			var same = true;
//		}
        if(me.currCardCmp == Ext.getCmp('panelSummary')) {
            me.currCardCmp.onActive();
        }else{
            me.navigateTo('panelSummary');
        }
//		me.navigateTo('panelSummary', function() {
//			if(same) {
//				me.currCardCmp.onActive();
//			}
//		});
	},

	stowPatientRecord: function() {
		this.unsetPatient();
		this.navigateTo('panelDashboard');
	},

	openEncounter: function(eid) {
		var me = this;
		if(acl['access_encounters']) {
			me.navigateTo('panelEncounter', function(success) {
				if(success) {
					me.currCardCmp.openEncounter(eid);
				}
			});
		} else {
			me.accessDenied();
		}
	},

	checkOutPatient: function(eid) {
		var me = this;

		me.navigateTo('panelVisitCheckout', function(success) {
			if(success) {
				me.currCardCmp.setPanel(eid);

			}
		});
	},

	chargePatient: function() {
		this.navigateTo('panelVisitPayment');
	},

	openPatientVisits: function() {
		this.navigateTo('panelVisits');
	},

	goToPoolAreas: function() {
		this.navigateTo('panelPoolArea');
	},

	goToFloorPlans: function() {
		this.navigateTo('panelAreaFloorPlan');
	},

	navigateTo: function(id, callback) {
		var tree = this.navColumn.down('treepanel'),
			treeStore = tree.getStore(),
			sm = tree.getSelectionModel(),
			node = treeStore.getNodeById(id);

		sm.select(node);
		if(typeof callback == 'function') {
			callback(true);
		}
	},

	navigateToDefault: function() {
		this.navigateTo('panelDashboard');
	},

	afterNavigationLoad: function() {
		this.fullMode ? this.navColumn.expand() : this.navColumn.collapse();
		this.navigateToDefault();
		this.removeAppMask();
		this.setTask(true);

	},

	onNavigationNodeSelected: function(model, selected) {
		var me = this;
		if(0 < selected.length) {
			if(selected[0].data.leaf) {
				var tree = me.navColumn.down('treepanel'),
					sm = tree.getSelectionModel(),
					card = selected[0].data.id,
					layout = me.MainPanel.getLayout(),
					cardCmp = Ext.getCmp(card);

				me.currCardCmp = cardCmp;
				layout.setActiveItem(card);
				cardCmp.onActive(function(success) {
					(success) ? me.lastCardNode = sm.getLastSelected() : me.goBack();
				});
			}
		}
	},

	goBack: function() {
		var tree = this.navColumn.down('treepanel'),
			sm = tree.getSelectionModel();
		sm.select(this.lastCardNode);
	},

	navCollapsed: function() {
		var me = this,
            navView = me.patientPoolArea,
			foot = me.Footer, footView;

		if(foot) {
			footView = foot.down('dataview');
			foot.setHeight(60);
			footView.show();
		}
        me.navColumn.isCollapsed = true;
		navView.hide();
	},

	navExpanded: function() {
		var me = this,
            navView = me.patientPoolArea,
			foot = me.Footer, footView;

		if(foot) {
			footView = foot.down('dataview');
			foot.setHeight(30);
			footView.hide();
		}
        me.navColumn.isCollapsed = false;
		navView.show();
	},

	/*
	 * Function to get the current active panel.
	 * NOTE: This may be used on all the application.
	 */
	getActivePanel: function() 
	{
		return this.MainPanel.getLayout().getActiveItem();
	},

	liveSearchSelect: function(combo, selection) {
		var me = this,
			post = selection[0];
		if(post) {
			Patient.currPatientSet({pid: post.get('pid')}, function() {
				me.setPatient(post.get('pid'), post.get('fullname'), function() {
					me.openPatientSummary();
				});
			});
		}
	},

	setPatient: function(pid, fullname, callback) {
		var me = this;

		me.unsetPatient(function() {
			Patient.currPatientSet({ pid: pid }, function(provider, response) {
				var data = response.result, msg1, msg2;
				if(data.readOnly) {
					msg1 = data.user + ' ' + i18n['is_currently_working_with'] + ' "' + data.patient.name + '" ' + i18n['in'] + ' "' + data.area + '" ' + i18n['area'] + '.<br>' +
						i18n['override_read_mode_will_remove_the_patient_from_previous_user'] + '.<br>' +
						i18n['do_you_would_like_to_override_read_mode'];
					msg2 = data.user + ' ' + i18n['is_currently_working_with'] + ' "' + data.patient.name + '" ' + i18n['in'] + ' "' + data.area + '" ' + i18n['area'] + '.<br>';
					Ext.Msg.show({
						title  : i18n['wait'] + '!!!',
						msg    : data.overrideReadOnly ? msg1 : msg2,
						buttons: data.overrideReadOnly ? Ext.Msg.YESNO : Ext.Msg.OK,
						icon   : Ext.MessageBox.WARNING,
						fn     : function(btn) {
							continueSettingPatient(btn != 'yes');
						}
					});
				} else {
					continueSettingPatient(false);
				}

				function continueSettingPatient(readOnly) {

	                me.patient = {
                        pid     : data.patient.pid,
                        name    : data.patient.name,
                        sex     : data.patient.sex,
                        dob     : data.patient.dob,
                        age     : data.patient.age,
                        priority: data.patient.priority,
                        readOnly: readOnly,
                        eid     : null
                    };

                    me.patientBtn.update({pid:data.patient.pid, name:data.patient.name});
					me.patientBtn.addCls(data.patient.priority);
					me.patientBtn.enable();
					if(me.patientOpenVisitsBtn) me.patientOpenVisitsBtn.enable();
					if(me.patientCreateEncounterBtn) me.patientCreateEncounterBtn.enable();
					if(me.patientCloseCurrEncounterBtn) me.patientCloseCurrEncounterBtn.enable();
					if(me.patientChargeBtn) me.patientChargeBtn.enable();
					if(me.patientCheckOutBtn) me.patientCheckOutBtn.enable();
					if(typeof callback == 'function') callback(me.patient);
				}
			});
		});
	},

    unsetPatient: function(callback) {
		var me = this;
		Patient.currPatientUnset(function() {
			me.currEncounterId = null;
            me.patient = {
                pid     : null,
                name    : null,
                sex     : null,
                dob     : null,
                age     : null,
                eid     : null,
                priority: null,
                readOnly: false
            };

			me.patientButtonRemoveCls();
			if(typeof callback == 'function'){
				callback(true);
			}else{
				if(me.patientCreateEncounterBtn) me.patientCreateEncounterBtn.disable();
				if(me.patientOpenVisitsBtn) me.patientOpenVisitsBtn.disable();
				if(me.patientCloseCurrEncounterBtn) me.patientCloseCurrEncounterBtn.disable();
				if(me.patientChargeBtn) me.patientChargeBtn.disable();
				if(me.patientCheckOutBtn) me.patientCheckOutBtn.disable();
				me.patientBtn.disable();
				me.patientBtn.update({ pid: 'record number', name: i18n['no_patient_selected']});
			}
		});
	},

	patientButtonRemoveCls:function(){
        var me = this;
        me.patientBtn.removeCls('Minimal');
        me.patientBtn.removeCls('Delayed');
        me.patientBtn.removeCls('Immediate');
        me.patientBtn.removeCls('Expectant');
        me.patientBtn.removeCls('Deceased');
	},

	showMiframe: function(btn) {
		var me = this, src = btn.action;
        me.winSupport.remove(me.miframe);
        me.winSupport.add(me.miframe = Ext.create('App.classes.ManagedIframe', {src: src}));
        me.winSupport.show();
	},

	msg: function(title, format) {
		if(!this.msgCt) {
			this.msgCt = Ext.core.DomHelper.insertFirst(document.body, {id: 'msg-div'}, true);
		}
		this.msgCt.alignTo(document, 't-t');
		var s = Ext.String.format.apply(String, Array.prototype.slice.call(arguments, 1)),
			m = Ext.core.DomHelper.append(this.msgCt, {html: '<div class="msg"><h3>' + title + '</h3><p>' + s + '</p></div>'}, true);
		m.slideIn('t').pause(3000).ghost('t', {remove: true});
	},

	checkSession: function() {
		authProcedures.ckAuth(function(provider, response) {
			if(!response.result.authorized) {
					window.location = './';
			}
		});
	},

	patientBtnTpl: function() {
		return Ext.create('Ext.XTemplate',
			'<div class="patient_btn  {priority}">',
			'<div class="patient_btn_img"><img src="resources/images/icons/user_32.png"></div>',
			'<div class="patient_btn_info">',
			'<div class="patient_btn_name">{name}</div>',
			'<div class="patient_btn_record">( {pid} )</div>',
			'</div>',
			'</div>');
	},

	patientBtnRender: function(btn) {
		this.unsetPatient();
		this.initializePatientPoolDragZone(btn)
	},

	getPatientsInPoolArea: function() {
		var me = this,
            poolArea = me.patientPoolArea,
			height = 35;
		this.patientPoolStore.load({
			callback: function(records) {
				if(records.length >= 1) {
                    for(var i=0; i < records.length; i++ ){
                        height = height + 45;
                    }
				} else {
					height = 25;
				}
                if(me.navColumn.collapsed === false && !me.navColumn.isCollapsingOrExpanding){
                    height = (height > 300) ? 300 : height;
    				poolArea.down('dataview').refresh();
    				poolArea.setHeight(height);
                }
			}
		});

		this.ppdz.reloadStores();

	},


    cancelAutoLogout:function(){
        var me = this;
        me.el.unmask();
        me.LogoutTask.stop(me.LogoutTaskTimer);
        me.logoutWarinigWindow.destroy();
        delete me.logoutWarinigWindow;
        App.classes.ActivityMonitor.start();
    },

    startAutoLogout:function(){
        var me = this;
        me.logoutWarinigWindow = Ext.create('Ext.Container',{
            floating:true,
            cls:'logout-warning-window',
            html:'Logging Out in...',
            seconds:10
        }).show();

        app.el.mask();

        if(!me.LogoutTask) me.LogoutTask = new Ext.util.TaskRunner();
        if(!me.LogoutTaskTimer){
            me.LogoutTaskTimer = me.LogoutTask.start({
                scope:me,
                run: me.logoutCounter,
                interval: 1000
            });
        }else{
            me.LogoutTask.start(me.LogoutTaskTimer);
        }


    },

    logoutCounter:function(){
        var me = this,
            sec = me.logoutWarinigWindow.seconds - 1;
        if(sec <= 0) {
            me.logoutWarinigWindow.update('Logging Out... Bye! Bye!');
            me.appLogout(true);
        }else{
            me.logoutWarinigWindow.update('Logging Out in '+sec+'sec');
            me.logoutWarinigWindow.seconds = sec;
            say('Logging Out in '+sec+'sec');
        }
    },

	appLogout: function(auto) {
        var me = this;
        if(auto === true){
            me.setTask(false);
            authProcedures.unAuth(function() {
                window.location = './'
            });
        }else{
            Ext.Msg.show({
                title  : i18n['please_confirm'] + '...',
                msg    : i18n['are_you_sure_to_quit'] + ' GaiaEHR?',
                icon   : Ext.MessageBox.QUESTION,
                buttons: Ext.Msg.YESNO,
                fn     : function(btn) {
                    if(btn == 'yes') {
                        authProcedures.unAuth(function() {
                            me.setTask(false);
                            window.location = './'
                        });
                    }
                }
            });
        }
	},

	initializePatientPoolDragZone: function(panel) {
		panel.dragZone = Ext.create('Ext.dd.DragZone', panel.getEl(), {
			ddGroup    : 'patientPoolAreas',
			getDragData: function() {
				var sourceEl = app.patientBtn.el.dom, d;
				if(app.currCardCmp != app.ppdz){
					app.MainPanel.getLayout().setActiveItem(app.ppdz);
				}
				app.navColumn.down('treepanel').getSelectionModel().deselectAll();

				if(sourceEl) {
					d = sourceEl.cloneNode(true);
					d.id = Ext.id();
					return panel.dragData = {
						copy    : true,
						sourceEl: sourceEl,
						repairXY: Ext.fly(sourceEl).getXY(),
						ddel    : d,
						records : [ panel.data ],
						patient : true
					};
				}
                return false;
			},
			getRepairXY: function() {
				app.goBack();
				return this.dragData.repairXY;
			}
		});
	},

	/**
	 *
	 * @param panel
	 */
	initializeOpenEncounterDragZone: function(panel) {
		panel.dragZone = Ext.create('Ext.dd.DragZone', panel.getEl(), {
			ddGroup:'patient',
			newGroupReset:true,
			b4MouseDown:function(e){
				if(this.newGroupReset){
					var sourceEl = e.getTarget(panel.itemSelector, 10),
						patientData = panel.getRecord(sourceEl).data;
					this.removeFromGroup(this.ddGroup);
                    say('initializeOpenEncounterDragZone | patientData:');
					say(patientData);
					if(patientData.floorPlanId != null && patientData.patientZoneId == null){
						app.navigateTo('panelAreaFloorPlan');
						this.ddGroup = 'patientPoolAreas';
					}else{
						this.ddGroup = 'patient';
						app.MainPanel.el.mask(i18n['drop_here_to_open'] + ' <strong>"' + panel.getRecord(sourceEl).data.name + '"</strong> ' + i18n['current_encounter']);
					}
					this.addToGroup(this.ddGroup);
					this.newGroupReset = false;
				}
				this.autoOffset(e.getPageX(), e.getPageY());
			},

			endDrag: function(e) {
				this.newGroupReset = true;
			},

			getDragData: function(e) {
				var sourceEl = e.getTarget(panel.itemSelector, 10), d,
					patientData = panel.getRecord(sourceEl).data;
				if(sourceEl) {
					d = sourceEl.cloneNode(true);
					d.id = Ext.id();
					return panel.dragData = {
						sourceEl   : sourceEl,
						repairXY   : Ext.fly(sourceEl).getXY(),
						ddel       : d,
						patientData: patientData
					};
				}
                return false;
			},

			getRepairXY: function() {
				app.MainPanel.el.unmask();
				this.newGroupReset = true;
				return this.dragData.repairXY;
			}
		});
	},
	
	onDocumentView: function(src) {
		var me = this;
		if(me.documentViewWindow) me.DocumentViewerWindow.remove(me.documentViewWindow);
		me.DocumentViewerWindow.add(me.documentViewWindow = Ext.create('App.classes.ManagedIframe', {src: src}));
		me.DocumentViewerWindow.show();
	},
	
	/**
	 *
	 * @param panel
	 */
	initializeOpenEncounterDropZone: function(panel) {
		var me = this;
		panel.dropZone = Ext.create('Ext.dd.DropZone', panel.getEl(), {
			ddGroup   : 'patient',
			notifyOver: function(dd, e, data) {
				return Ext.dd.DropZone.prototype.dropAllowed;
			},
			notifyDrop: function(dd, e, data) {
				app.MainPanel.el.unmask();
				me.setPatient(data.patientData.pid, data.patientData.name, function() {
					/**
					 * if encounter id is set and pool area is check out....  go to Patient Checkout panel
					 */
					if(data.patientData.eid && data.patientData.poolArea == 'Check Out') {
						me.checkOutPatient(data.patientData.eid);

					/**
					 * if encounter id is set and and user has access to encounter area... go to Encounter panel
					 * and open the encounter
					 */
					} else if(data.patientData.eid && acl['access_encounters']) {
						me.openEncounter(data.patientData.eid);

					/**
					 * else go to patient summary
					 */
					} else if(data.patientData.floorPlanId == null){
						me.openPatientSummary();
					}
				});

			}
		});
	},

	/*
	 * When the application finishes loading all the GaiaEHR core.
	 * Then it will load all the modules.
	 */
	appRender: function() {
        this.loadModules();
	},

	/*
	 * Load all the modules on the modules folder.
	 * This folder will hold modules created by third-party. 
	 */
    loadModules:function(){
        Modules.getEnabledModules(function(provider, response){
            var modules = response.result;
            for(var i=0; i < modules.length; i++){
                say('Module ' + modules[i].dir + ' loaded!');
                Ext.create('Modules.'+modules[i].dir+'.Main');
            }
        });
    },

	removeAppMask: function() {
		Ext.get('mainapp-loading').remove();
		Ext.get('mainapp-loading-mask').fadeOut({remove: true});
	},

	beforeAppRender: function() {

	},

	getCurrPatient: function() {
		return this.patient.pid;
	},

	getApp: function() {
		return this;
	},

	setTask:function(start){
        var me = this;
        if(start){

            App.classes.ActivityMonitor.init({
                interval    : me.activityMonitorInterval * 1000,
                maxInactive : (1000 * 60 * me.activityMonitorMaxInactive),
                verbose:true,
                isInactive:function(){
                    me.startAutoLogout();
                }
            });
            Ext.TaskManager.start(me.cronTask);
            App.classes.ActivityMonitor.start();
        }else{
            Ext.TaskManager.stop(me.cronTask);
            App.classes.ActivityMonitor.stop();
        }
	},

	/*
	 * Access denied massage.
	 */
	accessDenied: function() {
		Ext.Msg.show({
			title  : 'Oops!',
			msg    : i18n['access_denied'],
			buttons: Ext.Msg.OK,
			icon   : Ext.Msg.ERROR
		});
	},

	alert: function(msg,icon) {
		if(icon == 'error'){
			icon = Ext.Msg.ERROR
		}else if(icon == 'warning'){
			icon = Ext.Msg.WARNING
		}else if(icon == 'question'){
			icon = Ext.Msg.QUESTION
		}else{
			icon = Ext.Msg.INFO
		}
		Ext.Msg.show({
			title  : 'Oops!',
			msg    : msg,
			buttons: Ext.Msg.OK,
			icon   : icon
		});
	}

});

